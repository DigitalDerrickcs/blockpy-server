{"version":3,"sources":["webpack://frontend/external \"ko\"","webpack://frontend/external \"CodeMirror\"","webpack://frontend/external \"hljs\"","webpack://frontend/./components/plugins.ts","webpack://frontend/./models/user.ts","webpack://frontend/./models/assignment.ts","webpack://frontend/./models/course.ts","webpack://frontend/./models/submission.ts","webpack://frontend/./models/review.ts","webpack://frontend/./components/server.ts","webpack://frontend/./models/model.ts","webpack://frontend/./models/assignment_group.ts","webpack://frontend/./components/group_list.ts","webpack://frontend/./models/log.ts","webpack://frontend/./components/dates.ts","webpack://frontend/./components/model_selector.ts","webpack://frontend/./components/editor.ts","webpack://frontend/./components/watcher.ts","webpack://frontend/webpack/bootstrap","webpack://frontend/webpack/startup","webpack://frontend/webpack/runtime/define property getters","webpack://frontend/webpack/runtime/hasOwnProperty shorthand","webpack://frontend/webpack/runtime/make namespace object"],"names":["ko","CodeMirror","hljs","pushObservableArray","array","values","underlyingArray","valueWillMutate","valueHasMutated","init","element","valueAccessor","options","editor","on","cm","readOnly","value","getValue","wrapper","getWrapperElement","parentNode","removeChild","update","cur","getCursor","setValue","setCursor","refresh","languages","code","innerHTML","trim","TwoWayReadonlyMap","map","this","Map","lefts","rights","member","push","set","key","get","last","length","allBindingAccessors","selectedOptions","$","multiSelect","config","afterSelect","i","afterDeselect","remove","console","log","forEach","option","id","text","optionsText","Role","Model","data","super","FIELDS","koFromJson","User","name","firstName","lastName","primaryRole","roles","role","capitalize","str","replace","charAt","toUpperCase","slice","join","fromJson","removeAll","result","toJson","UserStore","ModelStore","GET_FIELD","user_ids","getDelayedIds","course_id","courseId","email","date_created","date_modified","first_name","last_name","viewModel","template","Assignment","AssignmentStore","assignment_ids","url","type","instructions","reviewed","hidden","public","ip_ranges","settings","on_run","on_change","on_eval","starting_code","extra_instructor_files","extra_starting_files","forked_id","forked_version","owner_id","version","ServiceType","CourseVisibility","SubmissionStatus","GradingStatus","Course","CourseStore","endpoint","external_id","service","term","visibility","Review","ReviewStore","submission_ids","assignment_version","author_id","comment","generic","location","score","submission_id","submission_version","tag_id","Submission","userId","assignmentId","expected","gradingStatus","toLowerCase","submissionStatus","SubmissionStore","assignment_group_id","assignment_id","correct","extra_files","grading_status","NOT_READY","submission_status","INITIALIZED","user_id","undefined","ajax_get","window","Server","initialIds","initialData","userStore","userIds","users","courseStore","courseIds","courses","assignmentStore","assignmentIds","assignments","assignmentGroupStore","AssignmentGroupStore","assignmentGroupIds","assignmentGroups","reviewStore","reviewIds","reviews","submissionStore","submissionIds","submissions","dateModified","dateCreated","left","right","delayedData","timer","instance","newInstance","getInstance","delayedInstance","makeEmptyInstance","delayLoadInstance","clearTimeout","queueFinishDelay","finishDelayedLoads","setTimeout","bind","ids","payload","getPayload","getUrl","Promise","resolve","reject","then","success","created","modelJson","removeDelayedInstances","error","filter","includes","AssignmentGroup","assignment_group_ids","position","GroupList","groups","ready","load","g","Log","subjectId","eventType","REMAP_EVENT_TYPES","monthNames","weekDays","isSameDay","first","second","getDate","getMonth","getFullYear","prettyPrintDate","timeString","now","Date","past","parseInt","date","getDay","formatDuration","earlier","later","timeEarlier","timeLater","delta","Math","abs","getTime","sign","years","floor","days","hours","minutes","seconds","daysDisplay","hoursDisplay","minutesDisplay","secondsDisplay","ModelSet","params","default","getIds","SelectMode","ModelSetSelector","store","available","isLoading","getAllAvailable","models","sets","u","loadDefault","selectMode","ALL","singleSet","singleOption","loadFromLocalStorage","item","currentSet","modelSet","editorVisible","bulkEditor","subscribe","SET","SINGLE","changes","some","change","status","newOptions","startAdding","prettyResult","localStorage","getItem","getLocalStorageKey","getDefaultGroupSetName","JSON","parse","newSet","getNewGroupSetName","split","model","a1","a2","superSet","areArraysEqualSets","confirm","deleted","saveToLocalStorage","modelSetJson","stringify","m","setItem","MODEL_SET_SELECTOR_HTML","setName","launchEditor","assignment","submission","form","document","createElement","setAttribute","formData","user","IN_PROGRESS","hiddenField","appendChild","body","submit","WatchMode","WatchGroupingMode","SubmissionState","current","makeNextState","toLocaleTimeString","prettyPrintDateTime","clientTimestamp","watchMode","REVIEW","lastEdit","lastRan","lastOpened","other","friendly","completed","mode","fullscreen","copyState","message","category","SubmissionHistory","initialLog","states","currentStateIndex","FROZEN_LATEST","isVcrActive","getWatchModeClass","POLL","currentState","getCurrentStateIndex","logs","latestState","nextState","event","selector","getSelector","empty","optGroup","entry","formattedDate","attr","append","displayed","loadHistorySelector","target","closest","find","max","currentId","isEditEvent","min","Watcher","userSet","assignmentSet","grouping","NONE","cauToSubmission","logJsons","sortedLogs","submissionId","getAsSubmissionKey","addLogs","submissionJsons","getStored","with_submission","history","addSubmissions","__webpack_module_cache__","__webpack_require__","moduleId","exports","module","__webpack_modules__","d","definition","o","Object","defineProperty","enumerable","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag"],"mappings":"8LAAA,MAAM,EAA+BA,GCA/B,EAA+BC,WCA/B,EAA+BC,KCsD9B,SAASC,EAAuBC,EAAmCC,GACtE,IAAIC,EAAkBF,IAItB,OAHAA,EAAMG,kBACN,qBAAsBD,EAAiBD,GACvCD,EAAMI,kBACCJ,EApDX,6BAAgC,CAC5BK,KAAM,SAAUC,EAASC,GACrB,IAAIC,EAAU,SAAUD,KACxBD,EAAQG,OAAS,EAAWH,EAAS,OAAQE,IAC7CF,EAAQG,OAAOC,GAAG,UAAU,SAAUC,GAC7BH,EAAQI,UACTJ,EAAQK,MAAMF,EAAGG,eAIzB,2CAA4CR,GAAS,WACjD,IAAIS,EAAUT,EAAQG,OAAOO,oBAC7BD,EAAQE,WAAWC,YAAYH,OAGvCI,OAAQ,SAAUb,EAASC,GACvB,IAAIM,EAAQ,OAAQN,KAAiBM,MACrC,GAAIP,EAAQG,OAAQ,CAChB,IAAIW,EAAMd,EAAQG,OAAOY,YACzBf,EAAQG,OAAOa,SAAST,GACxBP,EAAQG,OAAOc,UAAUH,GACzBd,EAAQG,OAAOe,aAM3B,YAAe,CACXC,UAAW,CAAC,YAEhB,kCAAqC,CACjCN,OAAQ,SAAUb,EAASC,GACvB,IAAImB,EAAO,SAAUnB,KACrBD,EAAQqB,UAAYD,EACpB,iBAAoBpB,GAChBoB,EAAKE,QAEL,mBAAsBtB,KAmB3B,MAAMuB,EAKT,YAAYC,GACRC,KAAKD,IAAM,IAAIE,IACfD,KAAKE,MAAQ,GACbF,KAAKG,OAAS,GACd,IAAK,IAAIC,KAAUL,EACfC,KAAKE,MAAMG,KAAKD,GAChBJ,KAAKG,OAAOE,KAAKN,EAAIK,IACrBJ,KAAKD,IAAIO,IAAIF,EAAQL,EAAIK,IACzBJ,KAAKD,IAAIO,IAAIP,EAAIK,GAASA,GAIlC,IAAIG,GACA,OAAOP,KAAKD,IAAIS,IAAID,IAWrB,SAASE,EAAQxC,GACpB,OAAOA,EAAMA,EAAMyC,OAAS,GA8BhC,8BAAiC,CAC7BpC,KAAM,SAAUC,EAASC,EAAemC,GACpC,IAAIlC,EAAUD,IAGd,iCAAqCD,GAAS,IAAME,EAAQA,SAASkC,GAGrE,uCAA2CpC,GAAS,IAAME,EAAQmC,iBAAiBD,GAEnF,yCAA6CpC,GAAS,IAAME,EAAQmC,iBAAiBD,GAGrFE,EAAEtC,GAASuC,YAAYrC,EAAQsC,QAK/BF,EAAEtC,GAASuC,YAAY,CACnBE,YAAa,SAAU9C,GACnB,IAAK,IAAI+C,EAAI,EAAGA,EAAI/C,EAAOwC,OAAQO,GAAK,EACpCxC,EAAQmC,gBAAgBP,KAAKnC,EAAO+C,KAEzCC,cAAe,SAAUhD,GACxB,IAAK,IAAI+C,EAAI,EAAGA,EAAI/C,EAAOwC,OAAQO,GAAK,EACpCxC,EAAQmC,gBAAgBO,OAAOjD,EAAO+C,QAKtD7B,OAAQ,SAAUb,EAASC,EAAemC,GACtC,IAAIlC,EAAUD,IACd4C,QAAQC,IAAI5C,EAAQA,UAAWA,EAAQmC,mBAGvC,yCAA0CrC,GAAS,IAAME,EAAQmC,iBAAiBD,GAClFlC,EAAQA,UAAU6C,SAASC,IAEvBV,EAAEtC,GAASuC,YAAY,YAAa,CAAChC,MAAOyC,EAAOC,GAAIC,KAAMF,EAAO9C,EAAQiD,oBAIhFb,EAAEtC,GAASuC,YAAY,aCzJxB,MAAMa,UAAaC,EAWtB,YAAYC,GACRC,MAAMD,GAPV,KAAAE,OAA4B,IAAIjC,EAAkB,CAC9C,QAAW,SACX,UAAa,WACb,KAAQ,SAKRE,KAAKgC,WAAWH,IAYjB,MAAMI,UAAaL,EAetB,YAAYC,GACRC,MAAMD,GAVV,KAAAE,OAA4B,IAAIjC,EAAkB,CAC9C,MAAS,QACT,WAAc,YACd,UAAa,aAQbE,KAAKgC,WAAWH,GAChB7B,KAAKkC,KAAO,gBAAgB,IACjBlC,KAAKmC,YAAc,IAAMnC,KAAKoC,YACtCpC,MACHA,KAAKqC,YAAc,gBAAgB,IAC1BrC,KAAKsC,QAAQ5B,OAGPV,KAAKsC,QAAQvC,KAAKwC,IACrBC,MDuBG,iBADIC,ECtBIF,EAAKL,OACXQ,QAAQ,wBAAyB,KDuB3C,GAEJD,EAAIE,OAAO,GAAGC,cAAgBH,EAAII,MAAM,GAJ5C,IAAoBJ,KCpBLK,KAAK,KALJ,QAOZ9C,MAGP,WAAW6B,GACPC,MAAME,WAAWH,GACjB,IAAIS,EAAgB,GAChBT,EAAKS,QACLA,EAAQT,EAAKS,MAAMvC,KAAKwC,GAAmB,IAAIZ,EAAKY,MAExDvC,KAAKsC,MAAQ,kBAAmBA,GAGpC,SAAST,GACLC,MAAMiB,SAASlB,GACf7B,KAAKsC,MAAMU,YACPnB,EAAKS,OACLT,EAAKS,MAAMhB,SAASiB,GAAmBvC,KAAKsC,MAAMjC,KAAK,IAAIsB,EAAKY,MAIxE,SACI,IAAIU,EAAmBnB,MAAMoB,SAE7B,OADAD,EAAOX,MAAQtC,KAAKsC,QAAQvC,KAAKwC,GAAeA,EAAKW,WAC9CD,GAIR,MAAME,UAAkBC,EAA/B,c,oBACI,KAAAC,UAAoB,QAEpB,aACI,MAAO,CACHC,SAAUtD,KAAKuD,gBAAgBT,KAAK,KACpCU,UAAWxD,KAAKyD,UAIxB,SACI,MAAO,gBAGX,qBACI,MAAO,kBAAkBzD,KAAKyD,iBAGlC,kBAAkBjC,GACd,OAAO,IAAIS,EAAK,CACZT,GAAIA,EACJkC,MAAO,GACPC,aAAc,KACdC,cAAe,KACfC,WAAY,GACZC,UAAW,aAavB,sBAAuB,OAAQ,CAC3BC,UAAW9B,EACX+B,SAVwB,kEAa5B,sBAAuB,aAAc,CACjCA,SAV6B,iJChG1B,MAAMC,UAAmBrC,EA8C5B,YAAYC,GACRC,MAAMD,GAxBV,KAAAE,OAA4B,IAAIjC,EAAkB,CAC9C,KAAQ,OACR,IAAO,MACP,KAAQ,OACR,aAAgB,eAChB,SAAY,WACZ,OAAU,SACV,OAAU,SACV,UAAa,WACb,SAAY,WACZ,OAAU,QACV,UAAa,WACb,QAAW,SACX,cAAiB,eACjB,uBAA0B,uBAC1B,qBAAwB,qBACxB,UAAa,WACb,eAAkB,gBAClB,SAAY,UACZ,UAAa,WACb,QAAW,YAKXE,KAAKgC,WAAWH,IAIjB,MAAMqC,UAAwBd,EAArC,c,oBACI,KAAAC,UAAoB,cAEpB,aACI,MAAO,CACHc,eAAgBnE,KAAKuD,gBAAgBT,KAAK,KAC1CU,UAAWxD,KAAKyD,UAIxB,SACI,MAAO,sBAGX,kBAAkBjC,GACd,OAAO,IAAIyC,EAAW,CAClBzC,GAAIA,EACJmC,aAAc,KACdC,cAAe,KACf1B,KAAM,UACNkC,IAAK,GACLC,KAAM,UACNC,aAAc,GACdC,UAAU,EACVC,QAAQ,EACRC,QAAQ,EACRC,UAAW,GACXC,SAAU,GACVC,OAAQ,GACRC,UAAW,GACXC,QAAS,GACTC,cAAe,GACfC,uBAAwB,GACxBC,qBAAsB,GACtBC,UAAW,EACXC,eAAgB,EAChBC,SAAU,EACV5B,UAAW,EACX6B,QAAS,IAIjB,qBACI,MAAO,kBAAkBrF,KAAKyD,wBC1HtC,IAAY6B,EAKAC,ECNAC,EAaAC,EF0HZ,sBAAuB,aAAc,CACjC1B,UAAWE,EACXD,SAV8B,wEAalC,sBAAuB,mBAAoB,CACvCA,SAVmC,8GClIvC,SAAYsB,GACR,kBACA,YAFJ,CAAYA,MAAW,KAKvB,SAAYC,GACR,oBACA,kBAFJ,CAAYA,MAAgB,KAkBrB,MAAMG,UAAe9D,EAwBxB,YAAYC,GACRC,MAAMD,GAbV,KAAAE,OAA4B,IAAIjC,EAAkB,CAC9C,KAAQ,OACR,IAAO,MACP,SAAY,UACZ,QAAW,UACX,YAAe,aACf,SAAY,WACZ,WAAc,aACd,KAAQ,OACR,SAAY,aAKZE,KAAKgC,WAAWH,IAIjB,MAAM8D,UAAoBvC,EAAjC,c,oBACI,KAAAC,UAAoB,UAEpB,aACI,MAAO,CACHG,UAAWxD,KAAKyD,UAIxB,SACI,MAAO,UAGX,qBACI,MAAO,kBAAkBzD,KAAKyD,mBAGlC,kBAAkBjC,GACd,OAAO,IAAIkE,EAAO,CACdlE,GAAIA,EACJmC,aAAc,KACdC,cAAe,KACfgC,SAAU,GACVC,YAAa,GACb3D,KAAM,iBACNkD,SAAU,KACVU,QAAS,KACTnB,SAAU,GACVoB,KAAM,eACN3B,IAAK,GACL4B,WAAY,QASxB,sBAAuB,SAAU,CAC7BjC,UAAW2B,EACX1B,SAN0B,oEE1EvB,MAAMiC,UAAerE,EAgCxB,YAAYC,GACRC,MAAMD,GAlBV,KAAAE,OAA4B,IAAIjC,EAAkB,CAC9C,cAAiB,eACjB,aAAgB,cAChB,QAAW,UACX,SAAY,WACZ,QAAW,UACX,OAAU,QACV,MAAS,QACT,cAAiB,eACjB,UAAa,WACb,mBAAsB,oBACtB,mBAAsB,oBACtB,QAAW,UACX,UAAa,WACb,eAAkB,kBAKlBE,KAAKgC,WAAWH,IAKjB,MAAMqE,UAAoB9C,EAAjC,c,oBACI,KAAAC,UAAoB,cAEpB,aACI,MAAO,CACH8C,eAAgBnG,KAAKuD,gBAAgBT,KAAK,KAC1CU,UAAWxD,KAAKyD,UAIxB,SACI,MAAO,qBAGX,kBAAkBjC,GACd,OAAO,IAAIyE,EAAO,CACdG,mBAAoB,EACpBC,UAAW,EACXC,QAAS,GACTpB,UAAW,KACXC,eAAgB,KAChBoB,SAAS,EACTC,SAAU,GACVC,MAAO,EACPC,cAAe,KACfC,mBAAoB,EACpBC,OAAQ,KACRvB,QAAS,EACT7D,GAAIA,EACJmC,aAAc,KACdC,cAAe,OAIvB,qBACI,MAAO,kBAAkB5D,KAAKyD,qBDzFtC,SAAY+B,GAER,4BAEA,oBAEA,2BAEA,wBAEA,wBAVJ,CAAYA,MAAgB,KAa5B,SAAYC,GACR,6BACA,oBACA,iCACA,kBACA,uBALJ,CAAYA,MAAa,KAyBlB,MAAMoB,UAAmBjF,EAmC5B,YAAYC,GACRC,MAAMD,GApBV,KAAAE,OAA4B,IAAIjC,EAAkB,CAC9C,cAAiB,eACjB,aAAgB,cAChB,KAAQ,OACR,YAAe,aACf,IAAO,MACP,SAAY,WACZ,MAAS,QACT,QAAW,UACX,kBAAqB,mBACrB,eAAkB,gBAClB,cAAiB,eACjB,oBAAuB,oBACvB,mBAAsB,oBACtB,UAAa,WACb,QAAW,SACX,QAAW,YAKXE,KAAKgC,WAAWH,GAGpB,qBACI,MAAO,CAAC7B,KAAKyD,WAAYzD,KAAK8G,SAAU9G,KAAK+G,gBAAgBjE,KAAK,KAGtE,aAAakE,GACT,OAAOhH,KAAKiH,gBAAgBC,gBAAkBF,EAASE,cAG3D,gBAAgBF,GACZ,OAAOhH,KAAKmH,mBAAmBD,gBAAkBF,EAASE,eAM3D,MAAME,UAAwBhE,EAArC,c,oBACI,KAAAC,UAAoB,cAEpB,aACI,MAAO,CACH8C,eAAgBnG,KAAKuD,gBAAgBT,KAAK,KAC1CU,UAAWxD,KAAKyD,UAIxB,SACI,MAAO,qBAGX,kBAAkBjC,GACd,OAAO,IAAIqF,EAAW,CAClBQ,oBAAqB,KACrBC,cAAe,KACflB,mBAAoB,EACpBzG,KAAM,GACN4H,SAAS,EACT/D,UAAW,KACXoC,SAAU,GACV4B,YAAa,GACbC,eAAgBhC,EAAciC,UAC9BjB,MAAO,EACPkB,kBAAmBnC,EAAiBoC,YACpCxD,IAAK,GACLyD,aAASC,EACTzC,QAAS,EACT7D,GAAIA,EACJmC,aAAc,KACdC,cAAe,OAIvB,qBACI,MAAO,kBAAkB5D,KAAKyD,wBE3H/B,SAASsE,EAAS3D,EAAavC,GAClC,OAAOhB,EAAEL,IAAIwH,OAAkB,UAAE5D,EAAKvC,GAgCnC,MAAMoG,EAUT,YAAYxE,EAAkByE,EAAuBC,GACjDnI,KAAKyD,SAAWA,EAChBzD,KAAKoI,UAAY,IAAIjF,EAAUM,EAAUyE,EAAWG,QAASF,EAAYG,OACzEtI,KAAKuI,YAAc,IAAI5C,EAAYlC,EAAUyE,EAAWM,UAAWL,EAAYM,SAC/EzI,KAAK0I,gBAAkB,IAAIxE,EAAgBT,EAAUyE,EAAWS,cAAeR,EAAYS,aAC3F5I,KAAK6I,qBAAuB,IAAIC,EAAqBrF,EAAUyE,EAAWa,mBAAoBZ,EAAYa,kBAC1GhJ,KAAKiJ,YAAc,IAAI/C,EAAYzC,EAAUyE,EAAWgB,UAAWf,EAAYgB,SAC/EnJ,KAAKoJ,gBAAkB,IAAIhC,EAAgB3D,EAAUyE,EAAWmB,cAAelB,EAAYmB,cClD5F,MAAe1H,EASlB,YAAsBC,GALtB,KAAAE,OAA4B,IAAIjC,EAAkB,CAC9C,cAAiB,eACjB,aAAgB,gBAIhBE,KAAKwB,GAAKK,EAAKL,GACfxB,KAAKuJ,aAAe,aAAc1H,EAAK+B,eACvC5D,KAAKwJ,YAAc,aAAc3H,EAAK8B,cAG1C,SAAS9B,GACL7B,KAAK+B,OAAO7B,MAAMoB,SAASmI,IAEvBzJ,KAAKA,KAAK+B,OAAOvB,IAAIiJ,IAAO5H,EAAK4H,OAIzC,WAAW5H,GACP7B,KAAK+B,OAAO7B,MAAMoB,SAASmI,IAEvBzJ,KAAKA,KAAK+B,OAAOvB,IAAIiJ,IAAS,aAAc5H,EAAK4H,OAIzD,SACI,IAAI5H,EAAO,CAACL,GAAIxB,KAAKwB,IAGrB,OADAxB,KAAK+B,OAAO5B,OAAOmB,SAASoI,GAAU7H,EAAK7B,KAAK+B,OAAOvB,IAAIkJ,IAAQ1J,KAAK0J,OAC9D7H,GAKX,MAAeuB,EAOlB,YAAYK,EAAuByE,EAAsBC,GACrDnI,KAAK6B,KAAO,GACZ7B,KAAKyD,SAAWA,EAChBzD,KAAK2J,YAAc,GACnB3J,KAAK4J,MAAQ,UACO9B,IAAhBK,GACAA,EAAYpI,KAAK8J,GAAgB7J,KAAK8J,YAAYD,UAEnC/B,IAAfI,GACAA,EAAWnI,KAAKyB,GAAexB,KAAK+J,YAAYvI,KAIxD,YAAYA,GACR,QAAsBsG,IAAlB9H,KAAK6B,KAAKL,GACV,OAAOxB,KAAK6B,KAAKL,GACd,CACH,IAAIwI,EAAkBhK,KAAKiK,kBAAkBzI,GAG7C,OAFAxB,KAAKkK,kBAAkBF,GACvBhK,KAAK6B,KAAKL,GAAMwI,EACTA,GAIf,kBAAkBH,GACdM,aAAanK,KAAK4J,OAClB5J,KAAK2J,YAAYtJ,KAAKwJ,GACtB7J,KAAKoK,mBAGT,mBACQpK,KAAK2J,YAAYjJ,OAAS,GAC1BV,KAAKqK,qBACErK,KAAK2J,YAAYjJ,OAAS,IACjCV,KAAK4J,MAAQ5B,OAAOsC,WAAWtK,KAAKqK,mBAAmBE,KAAKvK,MAAO,MAI3E,aAAawK,GACT,OAAOA,EAAIzK,IAAIC,KAAK+J,YAAYQ,KAAKvK,OAGzC,kBACI,IAAIyK,EAAUzK,KAAK0K,aACftG,EAAMpE,KAAK2K,SACf,OAAO,IAAIC,SAAQ,CAACC,EAASC,KACzB/C,EAAS3D,EAAKqG,GAASM,MAAMlJ,IACzB,GAAIA,EAAKmJ,QAAS,CACd,IACIC,EADUpJ,EAAK7B,KAAKqD,WACFtD,KAAMmL,GACjBlL,KAAK8J,YAAYoB,KAE5BL,EAAQI,QAERH,EAAOjJ,SAUvB,cAAcgI,GAEV,OADA7J,KAAK6B,KAAKgI,EAASrI,IAAMqI,EAClBA,EAOX,YAAYqB,GAGR,OAFAlL,KAAK6B,KAAKqJ,EAAU1J,IAAMxB,KAAKiK,kBAAkBiB,EAAU1J,IAC3DxB,KAAK6B,KAAKqJ,EAAU1J,IAAIuB,SAASmI,GAC1BlL,KAAK6B,KAAKqJ,EAAU1J,IAS/B,qBACI,IAAIiJ,EAAUzK,KAAK0K,aACftG,EAAMpE,KAAK2K,SAEf,OADA3K,KAAK2J,YAAYjJ,OAAQ,EAClBqH,EAAS3D,EAAKqG,GAASM,MAAMlJ,IACjC,GAAIA,EAAKmJ,QAAS,CACd,IACIC,EADUpJ,EAAK7B,KAAKqD,WACFtD,KAAMmL,IACxBlL,KAAK6B,KAAKqJ,EAAU1J,IAAIuB,SAASmI,GAC1BA,EAAU1J,MAErBxB,KAAKmL,uBAAuBF,QAE5B7J,QAAQgK,MAAMvJ,MAKf,gBACN,OAAO7B,KAAK2J,YAAY5J,KAAK8J,GAAgBA,EAASrI,KAG1D,uBAAuBgJ,GACnBxK,KAAK2J,YAAc3J,KAAK2J,YAAY0B,QAAQrB,IAAwBQ,EAAIc,SAAStB,EAAgBxI,MACjGxB,KAAKoK,oBClJN,MAAMmB,UAAwB3J,EAsBjC,YAAYC,GACRC,MAAMD,GAZV,KAAAE,OAA4B,IAAIjC,EAAkB,CAC9C,KAAQ,OACR,IAAO,MACP,SAAY,WACZ,UAAa,WACb,eAAkB,gBAClB,SAAY,UACZ,UAAa,WACb,QAAW,YAKXE,KAAKgC,WAAWH,IAIjB,MAAMiH,UAA6B1F,EAA1C,c,oBACI,KAAAC,UAAoB,oBAEpB,aACI,MAAO,CACHmI,qBAAsBxL,KAAKuD,gBAAgBT,KAAK,KAChDU,UAAWxD,KAAKyD,UAIxB,SACI,MAAO,4BAGX,kBAAkBjC,GACd,OAAO,IAAI+J,EAAgB,CACvB/J,GAAIA,EACJmC,aAAc,KACdC,cAAe,KACf1B,KAAM,UACNkC,IAAK,GACLqH,SAAU,EACVvG,UAAW,EACXC,eAAgB,EAChBC,SAAU,EACV5B,UAAW,EACX6B,QAAS,IAIjB,qBACI,MAAO,kBAAkBrF,KAAKyD,8BAStC,sBAAuB,mBAAoB,CACvCM,UAAWwH,EACXvH,SAPmC,8EC9EhC,MAAM0H,EAGT,cACI1L,KAAK2L,OAAS,kBAAoC,IAClD9K,IAAI+K,OAAM,IAAM5L,KAAK6L,SAGzB,OACI9D,EAAS,OAAQ,CAACvE,UAAW,IAAIuH,MAAMlJ,IACnC7B,KAAK2L,OAAO9J,EAAK8J,OAAO5L,KAAM+L,GAA2B,IAAIP,EAAgBO,UAazF,sBAAuB,aAAc,CACjC/H,UAAW2H,EACX1H,SAV6B,yMCD1B,MAAM+H,UAAYnK,EA6BrB,YAAYC,GACRC,MAAMD,GAjBV,KAAAE,OAA4B,IAAIjC,EAAkB,CAC9C,cAAiB,eACjB,aAAgB,cAChB,cAAiB,eACjB,mBAAsB,oBACtB,UAAa,WACb,WAAc,YACd,WAAc,YACd,UAAa,WACb,SAAY,WACZ,MAAS,QACT,QAAW,UACX,iBAAoB,kBACpB,gBAAmB,mBAKnBE,KAAKgC,WAAWH,GAKpB,qBACI,MAAO,CAAC7B,KAAKyD,WAAYzD,KAAKgM,YAAahM,KAAK+G,gBAAgBjE,KAAK,KAGzE,cACI,MAA6B,cAArB9C,KAAKiM,aAAoD,gBAArBjM,KAAKiM,aAIlD,MAAMC,EAA4C,CACrD,gBAAiB,gBACjB,cAAe,qBACf,YAAa,cACb,cAAe,qBACf,cAAe,cACf,gBAAiB,eACjB,mBAAoB,iBCtElBC,EAAa,CACf,MAAO,MAAO,MACd,MAAO,MAAO,OAAQ,OACtB,MAAO,OAAQ,MACf,MAAO,OAELC,EAAW,CACb,MAAO,MAAO,MACd,MAAO,MAAO,MACd,OAGG,SAASC,EAAUC,EAAaC,GACnC,OAAOD,EAAME,YAAcD,EAAOC,WAC9BF,EAAMG,aAAeF,EAAOE,YAC5BH,EAAMI,gBAAkBH,EAAOG,cAoChC,SAASC,EAAgBC,GAC5B,QAAmB9E,IAAf8E,EACA,MAAO,iBAEX,IAAIC,EAAM,IAAIC,KACVC,EAAO,IAAID,KAAKE,SAASJ,EAAY,KACzC,GAAIP,EAAUQ,EAAKE,GACf,MAAO,QACJ,CACH,IAEIE,EAFSb,EAASW,EAAKG,UAEP,KADLf,EAAWY,EAAKN,YACO,IAAMM,EAAKP,UACjD,OAAIK,EAAIH,gBAAkBK,EAAKL,cACpBO,EAEAA,EAAO,KAAKF,EAAKL,eAa7B,SAASS,EAAeC,EAAiBC,GAC5C,GAAgB,OAAZD,EACA,MAAO,QAEX,IAAIE,EAAc,IAAIR,KAAKE,SAASI,EAAS,KACzCG,EAAsB,OAAVF,EAAiB,IAAIP,KAAS,IAAIA,KAAKE,SAASK,EAAO,KACnEG,EAAQC,KAAKC,IAAIH,EAAUI,UAAYL,EAAYK,WAAW,IAC9DC,EAAOL,EAAUI,UAAYL,EAAYK,UAAY,WAAa,SAElEE,EAAQJ,KAAKK,MAAMN,EAAQ,SAC3BO,EAAON,KAAKK,MAAMN,EAAQ,QAAgB,OAC1CQ,EAAQP,KAAKK,MAAMN,EAAQ,MAAY,MACvCS,EAAUR,KAAKK,MAAMN,EAAQ,KAAO,IACpCU,EAAUT,KAAKK,MAAMN,EAAQ,IAG7BW,EAAc,GAAGJ,QAAkB,IAAPA,EAAU,IAAK,KAC3CK,EAAe,GAAGJ,SAAqB,IAARA,EAAW,IAAK,KAC/CK,EAAiB,GAAGJ,WAA2B,IAAVA,EAAa,IAAK,KACvDK,EAAiB,GAAGJ,WAA2B,IAAVA,EAAa,IAAK,KAE3D,OAAIV,EAAQ,EACD,eACAA,EAAQ,GACRc,EAAeV,EACfJ,EAAQ,IACRa,EAAe,KAAKC,EAAeV,EACnCJ,EAAQ,KACRa,EAAeT,EACfJ,EAAQ,MACRY,EAAa,KAAKC,EAAeT,EACjCJ,EAAQ,QACRW,EAAY,KAAKC,EAAaR,EAjBtB,GAAGC,SAAqB,IAARA,EAAW,IAAK,OAmBtBM,EAAYP,ECrGtC,MAAMW,EAKT,YAAYC,GACRxO,KAAKkC,KAAO,aAAcsM,EAAOtM,MACjClC,KAAKwK,IAAM,kBAA2BgE,EAAOhE,KAC7CxK,KAAKyO,QAAU,aAAcD,EAAOC,SAGxC,SACI,OAAOzO,KAAKwK,MAAM1H,KAAK,KAG3B,SACI,MAAO,CACHZ,KAAMlC,KAAKkC,OACXsI,IAAKxK,KAAKwK,MACViE,QAASzO,KAAKyO,WAItB,YACI,OAAIzO,KAAKyO,UACE,GAEAzO,KAAK0O,UAWxB,IAAYC,GAAZ,SAAYA,GACR,YAAW,kBAAiB,YADhC,CAAYA,MAAU,KAKf,MAAMC,EAeT,YAAYJ,GAERxO,KAAK6O,MAAQL,EAAOK,MACpB7O,KAAK8O,UAAY,kBAAsB,IACvC9O,KAAK+O,UAAY,cAAc,GAC/B/O,KAAK6O,MAAMG,kBAAkBjE,MAAMkE,IAC/BjR,EAAoBgC,KAAK8O,UAAWG,GACpCjP,KAAKkP,OAAO,GAAG1E,IAAIyE,EAAOlP,KAAKoP,GAASA,EAAE3N,MAC1CxB,KAAKoP,YAAYZ,EAAOC,SACxBzO,KAAK+O,WAAU,MAInB/O,KAAKqP,WAAa,aAA0BV,EAAWW,KACvDtP,KAAKuP,UAAY,aAAwB,IAAIhB,EAAS,CAACE,SAAS,EAAOjE,IAAK,GAAItI,KAAM,mBACtFlC,KAAKwP,aAAe,aAAsB,MAE1C,IAAIN,EAAOlP,KAAKyP,uBAAuB1P,KAAK2P,GAAqB,IAAInB,EAASmB,KAC9E1P,KAAKkP,KAAO,kBAA6BA,GAEzClP,KAAK2P,WAAanB,EAAOoB,SACzB5P,KAAK2P,WAAW3P,KAAKkP,OAAO,IAE5BlP,KAAK6P,cAAgB,cAAc,GAGnC7P,KAAKY,gBAAkB,kBAA2B,IAElDZ,KAAK8P,WAAa,aAAsB,IAExC9P,KAAK2P,WAAWI,WAAU,KAClB/P,KAAK6P,iBACL7P,KAAKY,gBAAgBZ,KAAK2P,aAAanF,UAI/CxK,KAAKwP,aAAaO,WAAU,KACxB/P,KAAKuP,YAAY/E,IAAI,CAACxK,KAAKwP,iBAC3BxP,KAAK2P,WAAW3P,KAAKuP,gBAGzBvP,KAAKqP,WAAWU,WAAU,KACtB,OAAQ/P,KAAKqP,cACT,KAAKV,EAAWW,IAAK,KAAKX,EAAWqB,IACjChQ,KAAK2P,WAAW3P,KAAKkP,OAAO,IAC5B,MACJ,KAAKP,EAAWsB,OACZjQ,KAAK2P,WAAW3P,KAAKuP,gBAE9BvP,MAEHA,KAAKY,gBAAgBmP,WAAWG,IAC5B,GAAIlQ,KAAK2P,aAAalB,WACCyB,EAAQC,MAAMC,GAA6B,YAAlBA,EAAOC,SACjC,CACd,IAAIC,EAAatQ,KAAKY,kBACtBZ,KAAKuQ,YAAYD,MAG1BtQ,KAAM,eAETA,KAAKwQ,aAAe,gBAAsB,IAC/BxQ,KAAK2P,aAAanF,MAAMzK,KAAKyB,GAAexB,KAAK6O,MAAM9E,YAAYvI,MAC3ExB,MAGP,yBACI,MAAO,aAGX,qBACI,MAAO,UAGX,uBAEI,IAAIkP,EAAOuB,aAAaC,QAAQ1Q,KAAK6O,MAAM8B,sBAC3C,OAAa,OAATzB,EACO,CAAC,CAAChN,KAAMlC,KAAK4Q,yBAA0BnC,SAAS,EAAMjE,IAAK,KAE3DqG,KAAKC,MAAM5B,GAI1B,eACIlP,KAAK6P,eAAc,GACnB7P,KAAKY,gBAAgBZ,KAAK2P,aAAanF,OAG3C,YAAYA,GACR,IAAIuG,EAAS,IAAIxC,EAAS,CAACrM,KAAMlC,KAAKgR,qBAAsBvC,SAAS,EAAOjE,IAAKA,GAAO,KAIxF,OAHAxK,KAAKkP,KAAK7O,KAAK0Q,GACf/Q,KAAK2P,WAAWoB,GAChB/Q,KAAK6P,eAAc,GACZkB,EAGX,eAMA,YAAYjS,GAER,GADAsC,QAAQC,IAAIvC,GACE,UAAVA,EACAkB,KAAKqP,WAAWV,EAAWsB,QAC3BjQ,KAAKwP,aAAaxP,KAAK8O,YAAY,GAAGtN,SACnC,GAAc,QAAV1C,GAAoC,KAAjBA,EAAMe,OAChCG,KAAKqP,WAAWV,EAAWW,KAC3BtP,KAAK2P,WAAW3P,KAAKkP,OAAO,QACzB,CACH,IAAI1E,EAAM1L,EAAMmS,MAAM,KAAKlR,KAAKyB,GAAewL,SAASxL,EAAI,MAC5D,OAAQgJ,EAAI9J,QACR,KAAK,EAAG,KAAKV,KAAK8O,YAAYpO,OAC1BV,KAAKqP,WAAWV,EAAWW,KAC3BtP,KAAK2P,WAAW3P,KAAKkP,OAAO,IAC5B,MACJ,KAAK,EACGlP,KAAK8O,YAAYqB,MAAMe,GAAaA,EAAM1P,KAAOgJ,EAAI,OACrDxK,KAAKqP,WAAWV,EAAWsB,QAC3BjQ,KAAKwP,aAAahF,EAAI,KAE1B,MACJ,QACIxK,KAAKkP,OAAO5N,SAASsO,KZrBlC,SAA4BuB,EAAcC,GAC7C,MAAMC,EAAmC,GACzC,IAAK,MAAMpQ,KAAKkQ,EACZE,EAASpQ,GAAK,EAGlB,IAAK,MAAMA,KAAKmQ,EAAI,CAChB,IAAKC,EAASpQ,GACV,OAAO,EAEXoQ,EAASpQ,GAAK,EAGlB,IAAK,IAAIA,KAAKoQ,EACV,GAAoB,IAAhBA,EAASpQ,GACT,OAAO,EAIf,OAAO,GYGiBqQ,CAAmB1B,EAASpF,MAAOA,KACnCxK,KAAKqP,WAAWV,EAAWqB,KAC3BhQ,KAAK2P,WAAWC,SAQxC,YACI,GAAI5P,KAAK2P,aAAalB,UAElB,OADAzO,KAAK6P,eAAc,IACZ,EAEX,GAAI0B,QAAQ,6CAA8C,CACtD,IAAIC,EAAUxR,KAAK2P,aAKnB,OAJA3P,KAAK2P,WAAW3P,KAAKkP,OAAO,IAC5BlP,KAAKkP,KAAK/N,OAAOqQ,GACjBxR,KAAKyR,qBACLzR,KAAK6P,eAAc,IACZ,EAEX,OAAO,EAGX,UACI7P,KAAK2P,aAAanF,IAAIxK,KAAKY,mBAC3BZ,KAAKyR,qBACLzR,KAAK6P,eAAc,GAGvB,aACI7P,KAAK6P,eAAc,GAGf,qBACJ,IAAI6B,EAAeb,KAAKc,UAAU3R,KAAKkP,OAAOnP,KAAK6R,GAAgBA,EAAE1O,YACrEuN,aAAaoB,QAAQ7R,KAAK6O,MAAM8B,qBAAsBe,IAIvD,MAAMI,EAA2BC,GAAoB,mQAMpBA,UAAgBA,sEACLA,mRAOXA,UAAgBA,yEACLA,oRAOXA,UAAgBA,sEACLA,yBACjCA,0jBAgBCA,sjBAUaA,uQAIFA,2JAIDA,ubAM4BA,wrBAYSA,8IAEZA,+hBAY3BA,wMCpUpB,SAASC,EAAaC,EAAwBC,GACjD,IAAIC,EAAOC,SAASC,cAAc,QAClCF,EAAKG,aAAa,SAAU,QAC5BH,EAAKG,aAAa,SAAUtK,OAAkB,UAAE,yBAChDmK,EAAKG,aAAa,SAAU,UAE5B,IAAIC,EAAW,CACXC,KAAM,CACFjQ,KAAM,cAEV0P,WAAYA,EAAaA,EAAW/O,SAAU,KAC9CgP,WAAYA,EAAaA,EAAWhP,SAAU,MAGlDqP,EAASN,WAAW/M,UAAY+M,EAAWzQ,GAC3C+Q,EAASN,WAAW9M,eAAiB8M,EAAW5M,UAChDkN,EAASN,WAAWzQ,GAAK,KACzB+Q,EAASN,WAAW7N,IAAM,GAC1BmO,EAASN,WAAWzO,UAAY,KAChC+O,EAASL,WAAW1Q,GAAK,KACzB+Q,EAASL,WAAWtM,SAAW,GAC/B2M,EAASL,WAAW9N,IAAM,GAC1BmO,EAASL,WAAWrK,QAAU,KAC9B0K,EAASL,WAAW1O,UAAY,KAChC+O,EAASL,WAAW5K,cAAgB,KACpCiL,EAASL,WAAWzK,eAAiBhC,EAAciC,UACnD6K,EAASL,WAAWvK,kBAAoBnC,EAAiBiN,YAEzD,IAAIC,EAAcN,SAASC,cAAc,SACzCK,EAAYJ,aAAa,OAAQ,UACjCI,EAAYJ,aAAa,OAAQ,mBACjCI,EAAYJ,aAAa,QAASzB,KAAKc,UAAUY,EAAU,KAAM,IACjEJ,EAAKQ,YAAYD,GACjBN,SAASQ,KAAKD,YAAYR,GAI1BA,EAAKU,SCvBT,IAAYC,EAkTAC,EFyCZ,sBAAuB,oBAAqB,CACxChP,UA9BG,cAA8B6K,EAEjC,YAAYJ,GACR1M,MAAM0M,GAGV,yBACI,MAAO,eAGX,qBACI,MAAO,iBAoBXxK,SAAU8N,EAAwB,UAEtC,sBAAuB,0BAA2B,CAC9C/N,UAnBG,cAAoC6K,EACvC,YAAYJ,GACR1M,MAAM0M,GAGV,yBACI,MAAO,kBAGX,qBACI,MAAO,uBAUXxK,SAAU8N,EAAwB,gBEjWtC,SAAYgB,GACR,qCAAe,mBAAM,uBADzB,CAAYA,MAAS,KAId,MAAME,EAaT,YAAYC,EAA0B5R,GAClCrB,KAAKkT,cAAcD,EAAS5R,GAGhC,gBACI,OHhBD,SAA6BuL,GAQhC,QAAmB9E,IAAf8E,EACA,MAAO,iBAEX,IAAIC,EAAM,IAAIC,KACVC,EAAO,IAAID,KAAKE,SAASJ,EAAY,KACzC,GAAIP,EAAUQ,EAAKE,GACf,MAAO,YAAYA,EAAKoG,qBACrB,CACH,IAEIlG,EAFSb,EAASW,EAAKG,UAEP,KADLf,EAAWY,EAAKN,YACO,IAAMM,EAAKP,UACjD,OAAIK,EAAIH,gBAAkBK,EAAKL,cACpBO,EAAO,OAAOF,EAAKoG,qBAEnBlG,EAAO,KAAKF,EAAKL,cAAgB,OAAOK,EAAKoG,sBGNjDC,CAAoBpT,KAAKqB,IAAIgS,mBAGxC,kBAAkBC,GACd,IAAIL,EAAUK,IAAcR,EAAUS,OAASvT,KAAKqB,IAAIgS,kBAAoB,KAC5E,OAAOlG,EAAenN,KAAKwT,SAAUP,GAGzC,iBAAiBK,GACb,IAAIL,EAAUK,IAAcR,EAAUS,OAASvT,KAAKqB,IAAIgS,kBAAoB,KAC5E,OAAOlG,EAAenN,KAAKyT,QAASR,GAGxC,oBAAoBK,GAChB,IAAIL,EAAUK,IAAcR,EAAUS,OAASvT,KAAKqB,IAAIgS,kBAAoB,KAC5E,OAAOlG,EAAenN,KAAK0T,WAAYT,GAG3C,UAAUU,GACQ,OAAVA,GACA3T,KAAKL,KAAO,GACZK,KAAK4T,SAAW,aAChB5T,KAAKyT,QAAU,KACfzT,KAAKwT,SAAW,KAChBxT,KAAK0T,WAAa,KAClB1T,KAAK6T,WAAY,EACjB7T,KAAKyG,MAAQ,EACbzG,KAAK8T,KAAO,UACZ9T,KAAK+T,YAAa,EAClB/T,KAAKqB,IAAM,OAEXrB,KAAKL,KAAOgU,EAAMhU,KAClBK,KAAKyT,QAAUE,EAAMF,QACrBzT,KAAKwT,SAAWG,EAAMH,SACtBxT,KAAK0T,WAAaC,EAAMD,WACxB1T,KAAK6T,UAAYF,EAAME,UACvB7T,KAAKyG,MAAQkN,EAAMlN,MACnBzG,KAAK8T,KAAOH,EAAMG,KAClB9T,KAAK+T,WAAaJ,EAAMI,WACxB/T,KAAKqB,IAAM,MAInB,cAAc4R,EAA0B5R,GAIpC,OAHArB,KAAKgU,UAAUf,GACfjT,KAAKqB,IAAMA,EACXrB,KAAK4T,SAAW1H,EAAkB7K,EAAI4K,aAC9B5K,EAAI4K,aACR,IAAK,cAIL,IAAK,YACDjM,KAAKL,KAAO0B,EAAI4S,UAChBjU,KAAKwT,SAAWnS,EAAIgS,kBACpB,MACJ,IAAK,gBACDrT,KAAK0T,WAAarS,EAAIgS,kBACtB,MACJ,IAAK,cACDrT,KAAKyT,QAAUpS,EAAIgS,kBACnB,MACJ,IAAK,eACDrT,KAAK6T,UAA+B,aAAnBxS,EAAI6S,WACrB,MACJ,IAAK,gBACDlU,KAAK8T,KAAOzS,EAAI4S,UAChB,MACJ,IAAK,mBACDjU,KAAKyG,MAAQuG,SAAS3L,EAAI4S,UAAW,MAM9C,MAAME,EAiBT,YAAYC,EAAiB5B,EAAYP,GACrCjS,KAAKqU,OAAS,kBAAoC,IAClDrU,KAAKsU,kBAAoB,aAAc,GACvCtU,KAAKwS,KAAOA,EACZxS,KAAKiS,WAAaA,EAClBjS,KAAKsT,UAAY,aAAcR,EAAUyB,eACzCvU,KAAKwU,YAAc,gBAAgB,IACxBxU,KAAKsT,cAAgBR,EAAUS,QACvCvT,MACHA,KAAKyU,kBAAoB,gBAAgB,KACrC,OAAQzU,KAAKsT,aACT,KAAKR,EAAUyB,cACX,MAAO,kBACX,KAAKzB,EAAU4B,KACX,MAAO,SACX,KAAK5B,EAAUS,OACX,MAAO,gBAEhBvT,MACHA,KAAK2U,aAAe,gBAAgB,KAChC,GAAI3U,KAAKqU,SAAS3T,OAAS,EACvB,OAAIV,KAAKsT,cAAgBR,EAAUS,OACxBvT,KAAKqU,SAASrU,KAAK4U,wBAEnBnU,EAAKT,KAAKqU,UAGrBjT,QAAQgK,MAAM,qCAEnBpL,MAGC,uBACJ,OAAOgN,SAAiBhN,KAAKsU,oBAAqB,IAGtD,QAAQO,GACJ,IAAIR,EAA4B,GAC5BS,EAA+B9U,KAAKqU,SAAS3T,OAASD,EAAKT,KAAKqU,UAAY,KAChF,IAAK,IAAIpT,EAAE,EAAGA,EAAG4T,EAAKnU,OAAQO,GAAG,EAAG,CAChC,IAAI8T,EAAY,IAAI/B,EAAgB8B,EAAaD,EAAK5T,IACtDoT,EAAOhU,KAAK0U,GACZD,EAAcC,EAElB/W,EAAoBgC,KAAKqU,OAAQA,GAMrC,oBAAoBW,GAChB,IAEI/T,EAFAgU,EAAWjV,KAAKkV,YAAYF,GAChCC,EAASE,QAET,IAAIC,EAAgC,KACpC,IAAKnU,EAAE,EAAGA,EAAGjB,KAAKqU,SAAS3T,OAAQO,GAAI,EAAG,CACtC,IAAIoU,EAAarV,KAAKqU,SAASpT,GAAGI,IAC9BiU,EAAgB3I,EAAgB0I,EAAMhC,mBACzB,OAAb+B,GAAqBA,EAASG,KAAK,UAAYD,IAC/CF,EAAWvU,EAAE,yBACbuU,EAASG,KAAK,QAASD,GACvBL,EAASO,OAAOJ,IAEpB,IAAInJ,EAAYC,EAAkBmJ,EAAMpJ,cAAgBoJ,EAAMpJ,YAC1DwJ,QH5HO3N,KADS8E,EG6HYyI,EAAMhC,mBH3HnC,iBAEA,IAAIvG,KAAKE,SAASJ,EAAY,KAC7BuG,sBGwHsD,MAAMlH,EAC5D1K,EAASV,EAAE,oBAAqB,CAACY,KAAMgU,IAC3ClU,EAAOgU,KAAK,QAAStU,GACrBmU,EAASI,OAAOjU,GHhIrB,IAAyBqL,EGkIxB5M,KAAKsU,kBAAkBrT,EAAE,GAI7B,gBAAgBY,EAAWmT,GACvB,OAAQhV,KAAKsT,aACT,KAAKR,EAAUyB,cACXvU,KAAKsT,UAAUR,EAAU4B,MACzB,MACJ,KAAK5B,EAAU4B,KACX1U,KAAK0V,oBAAoBV,GACzBhV,KAAKsT,UAAUR,EAAUS,QACzB,MACJ,KAAKT,EAAUS,OACXvT,KAAKsT,UAAUR,EAAUyB,gBAKrC,YAAYS,GACR,OAAOnU,EAAEmU,EAAMW,QAAQC,QAAQ,OAAOC,KAAK,mBAG/C,iBAAiBhU,EAAWmT,GACxBhV,KAAKsU,kBAAkBtU,KAAKqU,SAAS3T,OAAO,GAGhD,WAAWmB,EAAWmT,GAClBhV,KAAKsU,kBAAkB7G,KAAKqI,IAAI,EAAG9V,KAAK4U,uBAAuB,IAGnE,WAAW/S,EAAWmT,GAClB,IACIL,EADAoB,EAAY/V,KAAK4U,uBAErB,GACImB,GAAa,EACbpB,EAAe3U,KAAKqU,SAAS0B,SACxBA,EAAU,IAAMpB,EAAatT,IAAI2U,eAC1ChW,KAAKsU,kBAAkByB,GAG3B,WAAWlU,EAAWmT,GAClBhV,KAAKsU,kBAAkB7G,KAAKwI,IAAIjW,KAAKqU,SAAS3T,OAAO,EAAGV,KAAK4U,uBAAuB,IAGxF,WAAW/S,EAAWmT,GAClB,IACIL,EADAoB,EAAY/V,KAAK4U,uBAErB,GACImB,GAAa,EACbpB,EAAe3U,KAAKqU,SAAS0B,SACxBA,EAAU/V,KAAKqU,SAAS3T,OAAO,IAAMiU,EAAatT,IAAI2U,eAC/DhW,KAAKsU,kBAAkByB,GAG3B,YAAYlU,EAAWmT,GAGnBhV,KAAKsU,kBAAkB,GAG3B,eACItC,EAAahS,KAAKiS,WAAYjS,KAAKkS,aAkB3C,sBAAuB,0BAA2B,CAC9ClO,SAfiC,kgCAqDrC,sBAAuB,yBAA0B,CAC7CA,SApCgC,2oDAuCpC,SAAY+O,GACR,mBAAM,+BAAY,mBADtB,CAAYA,MAAiB,KAKtB,MAAMmD,EAoBT,YAAYrU,GAER7B,KAAKyD,SAAW,aAAsB5B,EAAK4B,UAC3CzD,KAAKqI,QAAUxG,EAAKwG,QACpBrI,KAAK2I,cAAgB9G,EAAK8G,cAC1B3I,KAAKmW,QAAU,aAAwB,MACvCnW,KAAKoW,cAAgB,aAAwB,MAC7CpW,KAAKqW,SAAW,aAAiCtD,EAAkBuD,MACnEtW,KAAKsJ,YAAc,kBAAsC,IACzDtJ,KAAKuW,gBAAkB,GACvBvW,KAAKoI,UAAY,IAAIjF,EAAUtB,EAAK4B,SAAU,GAAI,IAClDzD,KAAK0I,gBAAkB,IAAIxE,EAAgBrC,EAAK4B,SAAU,GAAI,IAIlE,QAAQ+S,GACJ,IAAIC,EAAoC,GACxC,IAAK,IAAIxV,EAAE,EAAGA,EAAEuV,EAAS9V,OAAQO,GAAG,EAAG,CACnC,IAAII,EAAW,IAAI0K,EAAIyK,EAASvV,IAC5ByV,EAAerV,EAAIsV,qBACvB,KAAMD,KAAgB1W,KAAKuW,iBAAkB,CACzC,IAAI/D,EAAOxS,KAAKoI,UAAU2B,YAAY1I,EAAI2K,aACtCiG,EAAajS,KAAK0I,gBAAgBqB,YAAY1I,EAAI0F,gBACtD/G,KAAKuW,gBAAgBG,GAAgB,IAAIvC,EAAkB9S,EAAKmR,EAAMP,GACtEjS,KAAKsJ,YAAYjJ,KAAKL,KAAKuW,gBAAgBG,IAEzCA,KAAgBD,IAClBA,EAAWC,GAAgB,IAE/BD,EAAWC,GAAcrW,KAAKgB,GAElC,IAAK,IAAIqV,KAAgBD,EACrBzW,KAAKuW,gBAAgBG,GAAcE,QAAQH,EAAWC,IAI9D,eAAeG,GACX,IAAK,IAAI5V,EAAE,EAAGA,EAAE4V,EAAgBnW,OAAQO,GAAG,EAAG,CAC1C,IAAIiR,EAAyB,IAAIrL,EAAWgQ,EAAgB5V,IACxDyV,EAAexE,EAAWyE,qBAC9BvV,QAAQC,IAAIrB,KAAKuW,gBAAgBG,IACjC1W,KAAKuW,gBAAgBG,GAAcxE,WAAaA,GAIxD,YACIzB,aAAaoB,QAAQ,yBAA0B7R,KAAKmW,UAAUW,aAC9DrG,aAAaoB,QAAQ,+BAAgC7R,KAAKoW,gBAAgBU,aAC1E/O,EAAS,uBAAwB,CAC7BT,cAAetH,KAAKoW,gBAAgB1H,SACpClL,UAAWxD,KAAKyD,WAChBoE,QAAS7H,KAAKmW,UAAUzH,SACxBqI,iBAAiB,IAClBhM,MAAMlJ,IACDA,EAAKmJ,SACLhL,KAAK4W,QAAQ/U,EAAKmV,SAClBhX,KAAKiX,eAAepV,EAAKyH,cAEzBlI,QAAQgK,MAAMvJ,OAoC9B,sBAAuB,UAAW,CAC9BkC,UAAWmS,EACXlS,SAhC2B,uwCC5Z3BkT,EAA2B,GAG/B,SAASC,EAAoBC,GAE5B,GAAGF,EAAyBE,GAC3B,OAAOF,EAAyBE,GAAUC,QAG3C,IAAIC,EAASJ,EAAyBE,GAAY,CAGjDC,QAAS,IAOV,OAHAE,EAAoBH,GAAUE,EAAQA,EAAOD,QAASF,GAG/CG,EAAOD,QCjBf,OCFAF,EAAoBK,EAAI,CAACH,EAASI,KACjC,IAAI,IAAIlX,KAAOkX,EACXN,EAAoBO,EAAED,EAAYlX,KAAS4W,EAAoBO,EAAEL,EAAS9W,IAC5EoX,OAAOC,eAAeP,EAAS9W,EAAK,CAAEsX,YAAY,EAAMrX,IAAKiX,EAAWlX,MCJ3E4W,EAAoBO,EAAI,CAACI,EAAKC,IAASJ,OAAOK,UAAUC,eAAeC,KAAKJ,EAAKC,GCCjFZ,EAAoBgB,EAAKd,IACH,oBAAXe,QAA0BA,OAAOC,aAC1CV,OAAOC,eAAeP,EAASe,OAAOC,YAAa,CAAEvZ,MAAO,WAE7D6Y,OAAOC,eAAeP,EAAS,aAAc,CAAEvY,OAAO,KHFhDqY,EAAoB,M","file":"frontend.js","sourcesContent":["const __WEBPACK_NAMESPACE_OBJECT__ = ko;","const __WEBPACK_NAMESPACE_OBJECT__ = CodeMirror;","const __WEBPACK_NAMESPACE_OBJECT__ = hljs;","import * as ko from 'knockout';\r\nimport * as CodeMirror from 'codemirror';\r\nimport * as hljs from 'highlight.js';\r\nimport * as select2 from 'select2';\r\n//import 'select2';\r\n\r\n// Knockout codemirror binding handler\r\nko.bindingHandlers.codemirror = {\r\n    init: function (element, valueAccessor) {\r\n        let options = ko.unwrap(valueAccessor());\r\n        element.editor = CodeMirror(element, ko.toJS(options));\r\n        element.editor.on('change', function (cm: any) {\r\n            if (!options.readOnly) {\r\n                options.value(cm.getValue());\r\n            }\r\n        });\r\n\r\n        ko.utils.domNodeDisposal.addDisposeCallback(element, function () {\r\n            let wrapper = element.editor.getWrapperElement();\r\n            wrapper.parentNode.removeChild(wrapper);\r\n        });\r\n    },\r\n    update: function (element, valueAccessor) {\r\n        let value = ko.toJS(valueAccessor()).value;\r\n        if (element.editor) {\r\n            let cur = element.editor.getCursor();\r\n            element.editor.setValue(value);\r\n            element.editor.setCursor(cur);\r\n            element.editor.refresh();\r\n        }\r\n    }\r\n};\r\n\r\n// Highlighted Code Area\r\nhljs.configure({\r\n    languages: [\"python\"]\r\n})\r\nko.bindingHandlers.highlightedCode = {\r\n    update: function (element, valueAccessor) {\r\n        let code = ko.unwrap(valueAccessor());\r\n        element.innerHTML = code;\r\n        hljs.highlightBlock(element);\r\n        if (code.trim()) {\r\n            // @ts-ignore\r\n            hljs.lineNumbersBlock(element);\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * https://github.com/knockout/knockout/issues/416#issuecomment-4877853\r\n * Adds a new function to the ObservableArray class to efficiently push multiple values\r\n * @param valuesToPush\r\n */\r\nexport function pushObservableArray<T>(array: KnockoutObservableArray<T>, values: T[]): KnockoutObservableArray<T> {\r\n    let underlyingArray = array();\r\n    array.valueWillMutate();\r\n    ko.utils.arrayPushAll(underlyingArray, values);\r\n    array.valueHasMutated();\r\n    return array;\r\n}\r\n\r\n// https://stackoverflow.com/a/60766129\r\nexport class TwoWayReadonlyMap {\r\n    map: Map<string, string>;\r\n    lefts: string[];\r\n    rights: string[];\r\n\r\n    constructor(map: Record<string, string>) {\r\n        this.map = new Map<string, string>();\r\n        this.lefts = [];\r\n        this.rights = [];\r\n        for (let member in map) {\r\n            this.lefts.push(member);\r\n            this.rights.push(map[member]);\r\n            this.map.set(member, map[member]);\r\n            this.map.set(map[member], member);\r\n        }\r\n    }\r\n\r\n    get(key: string) {\r\n        return this.map.get(key);\r\n    }\r\n}\r\n\r\nexport function capitalize(str: string): string {\r\n    if (typeof str !== 'string') {\r\n        return '';\r\n    }\r\n    return str.charAt(0).toUpperCase() + str.slice(1);\r\n}\r\n\r\nexport function last<T>(array: T[]): T {\r\n    return array[array.length - 1];\r\n}\r\n\r\n/*\r\nko.bindingHandlers.select2 = {\r\n    after: [\"options\", \"value\"],\r\n    init: function (el, valueAccessor, allBindingsAccessor, viewModel) {\r\n        $(el).select2(ko.unwrap(valueAccessor()));\r\n        ko.utils.domNodeDisposal.addDisposeCallback(el, function () {\r\n            $(el).select2('destroy');\r\n        });\r\n    },\r\n    update: function (el, valueAccessor, allBindingsAccessor, viewModel) {\r\n        var allBindings = allBindingsAccessor();\r\n        var select2 = $(el).data(\"select2\");\r\n        if (\"value\" in allBindings) {\r\n            var newValue = \"\" + ko.unwrap(allBindings.value);\r\n            if ((allBindings.select2.multiple || el.multiple) && newValue.constructor !== Array) {\r\n                // @ts-ignore\r\n                select2.val([newValue.split(\",\")]);\r\n            }\r\n            else {\r\n                // @ts-ignore\r\n                select2.val([newValue]);\r\n            }\r\n        }\r\n    }\r\n};*/\r\n\r\n\r\nko.bindingHandlers.multiselect = {\r\n    init: function (element, valueAccessor, allBindingAccessors) {\r\n        let options = valueAccessor();\r\n\r\n        // Pay attention to model updates\r\n        ko.bindingHandlers['options'].update(element, () => options.options, allBindingAccessors);\r\n        // TypeScript thinks that this bindingHandler has a smaller number of args for some reason\r\n        // @ts-ignore\r\n        ko.bindingHandlers['selectedOptions'].init(element, () => options.selectedOptions, allBindingAccessors);\r\n        // @ts-ignore\r\n        ko.bindingHandlers['selectedOptions'].update(element, () => options.selectedOptions, allBindingAccessors);\r\n\r\n        // @ts-ignore\r\n        $(element).multiSelect(options.config);\r\n\r\n\r\n        //make view model know about select/deselect changes\r\n        // @ts-ignore\r\n        $(element).multiSelect({\r\n            afterSelect: function (values: any) {\r\n                for (let i = 0; i < values.length; i += 1) {\r\n                    options.selectedOptions.push(values[i]);\r\n                }\r\n            }, afterDeselect: function (values: any) {\r\n                for (let i = 0; i < values.length; i += 1) {\r\n                    options.selectedOptions.remove(values[i]);\r\n                }\r\n            }\r\n        });\r\n    },\r\n    update: function (element, valueAccessor, allBindingAccessors) {\r\n        let options = valueAccessor();\r\n        console.log(options.options(), options.selectedOptions());\r\n        //update html if items set through code\r\n        // @ts-ignore\r\n        ko.bindingHandlers.selectedOptions.update(element, () => options.selectedOptions, allBindingAccessors);\r\n        options.options().forEach((option: any) => {\r\n            // @ts-ignore\r\n            $(element).multiSelect(\"addOption\", {value: option.id, text: option[options.optionsText]()})\r\n        });\r\n\r\n        // @ts-ignore\r\n        $(element).multiSelect(\"refresh\");\r\n    }\r\n};\r\n\r\n/** assumes array elements are primitive types\r\n * check whether 2 arrays are equal sets.\r\n * @param  {} a1 is an array\r\n * @param  {} a2 is an array\r\n */\r\nexport function areArraysEqualSets(a1: number[], a2: number[]) {\r\n    const superSet: Record<number, number> = {};\r\n    for (const i of a1) {\r\n        superSet[i] = 1;\r\n    }\r\n\r\n    for (const i of a2) {\r\n        if (!superSet[i]) {\r\n            return false;\r\n        }\r\n        superSet[i] = 2;\r\n    }\r\n\r\n    for (let i in superSet) {\r\n        if (superSet[i] === 1) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n","import * as ko from 'knockout';\r\nimport {Model, ModelJson, ModelStore} from \"./model\";\r\nimport {capitalize, TwoWayReadonlyMap} from \"../components/plugins\";\r\nimport {ajax_get} from \"../components/server\";\r\n\r\nexport interface RoleJson extends ModelJson {\r\n    id: number;\r\n    name: string;\r\n    user_id: number;\r\n    course_id: number;\r\n}\r\n\r\nexport class Role extends Model<RoleJson> {\r\n    id: number;\r\n    userId: KnockoutObservable<number>;\r\n    courseId: KnockoutObservable<number>;\r\n    name: KnockoutObservable<string>;\r\n    FIELDS: TwoWayReadonlyMap = new TwoWayReadonlyMap({\r\n        \"user_id\": \"userId\",\r\n        \"course_id\": \"courseId\",\r\n        \"name\": \"name\"\r\n    });\r\n\r\n    constructor(data: RoleJson) {\r\n        super(data);\r\n        this.koFromJson(data);\r\n    }\r\n}\r\n\r\nexport interface UserJson extends ModelJson {\r\n    id: number;\r\n    email: string;\r\n    first_name: string;\r\n    last_name: string;\r\n    roles?: RoleJson[];\r\n}\r\n\r\nexport class User extends Model<UserJson> {\r\n    id: number;\r\n    email: KnockoutObservable<string>;\r\n    firstName: KnockoutObservable<string>;\r\n    lastName: KnockoutObservable<string>;\r\n    roles: KnockoutObservableArray<Role>;\r\n    FIELDS: TwoWayReadonlyMap = new TwoWayReadonlyMap({\r\n        \"email\": \"email\",\r\n        \"first_name\": \"firstName\",\r\n        \"last_name\": \"lastName\"\r\n    });\r\n    name: KnockoutReadonlyComputed<string>;\r\n\r\n    primaryRole: KnockoutReadonlyComputed<string>;\r\n\r\n    constructor(data: UserJson) {\r\n        super(data);\r\n        this.koFromJson(data);\r\n        this.name = ko.pureComputed(() => {\r\n            return this.firstName() + \" \" + this.lastName();\r\n        }, this);\r\n        this.primaryRole = ko.pureComputed(() => {\r\n            if (!this.roles().length) {\r\n                return \"User\";\r\n            } else {\r\n                return this.roles().map((role: Role) =>\r\n                    capitalize(role.name()\r\n                        .replace(\"urn:lti:role:ims/lis/\", \"\"))\r\n                    ).join(\"/\");\r\n            }\r\n        }, this);\r\n    }\r\n\r\n    koFromJson(data: UserJson) {\r\n        super.koFromJson(data);\r\n        let roles: Role[] = [];\r\n        if (data.roles) {\r\n            roles = data.roles.map((role: RoleJson) => new Role(role));\r\n        }\r\n        this.roles = ko.observableArray(roles);\r\n    }\r\n\r\n    fromJson(data: UserJson) {\r\n        super.fromJson(data);\r\n        this.roles.removeAll();\r\n        if (data.roles) {\r\n            data.roles.forEach((role: RoleJson) => this.roles.push(new Role(role)));\r\n        }\r\n    }\r\n\r\n    toJson(): UserJson {\r\n        let result: UserJson = super.toJson();\r\n        result.roles = this.roles().map((role: Role) => role.toJson());\r\n        return result;\r\n    }\r\n}\r\n\r\nexport class UserStore extends ModelStore<UserJson, User> {\r\n    GET_FIELD: string = \"users\";\r\n\r\n    getPayload(): any {\r\n        return {\r\n            user_ids: this.getDelayedIds().join(\",\"),\r\n            course_id: this.courseId\r\n        };\r\n    }\r\n\r\n    getUrl(): string {\r\n        return \"courses/users\";\r\n    }\r\n\r\n    getLocalStorageKey(): string {\r\n        return `BLOCKPY_COURSE_${this.courseId}_USERS`;\r\n    }\r\n\r\n    makeEmptyInstance(id: number): User {\r\n        return new User({\r\n            id: id,\r\n            email: \"\",\r\n            date_created: null,\r\n            date_modified: null,\r\n            first_name: \"\",\r\n            last_name: \"Unknown\"\r\n        });\r\n    }\r\n}\r\n\r\nexport const UserTemplate = `\r\n    <div>User: <span data-bind=\"text: name\"></span></div>\r\n`;\r\n\r\nexport const UserShortTemplate = `\r\n    <div><span data-bind=\"text: primaryRole\"></span>: <span data-bind=\"text: name\"></span> (<span data-bind=\"text: email\"></span>)</div>\r\n`;\r\n\r\nko.components.register(\"user\", {\r\n    viewModel: User,\r\n    template: UserTemplate\r\n});\r\n\r\nko.components.register(\"user-short\", {\r\n    template: UserShortTemplate\r\n})","import * as ko from 'knockout';\r\nimport {Model, ModelJson, ModelStore} from \"./model\";\r\nimport {capitalize, TwoWayReadonlyMap} from \"../components/plugins\";\r\nimport {ajax_get} from \"../components/server\";\r\n\r\nexport interface AssignmentJson extends ModelJson {\r\n    id: number;\r\n    name: string;\r\n    url: string;\r\n\r\n    type: string;\r\n    instructions: string;\r\n    reviewed: boolean;\r\n    hidden: boolean;\r\n    public: boolean;\r\n    ip_ranges: string;\r\n    settings: string;\r\n\r\n    on_run: string;\r\n    on_change: string;\r\n    on_eval: string;\r\n    starting_code: string;\r\n    extra_instructor_files: string;\r\n    extra_starting_files: string;\r\n\r\n    forked_id: number;\r\n    forked_version: number;\r\n    owner_id: number;\r\n    course_id: number;\r\n    version: number;\r\n}\r\n\r\nexport class Assignment extends Model<AssignmentJson> {\r\n    id: number;\r\n    name: KnockoutObservable<string>;\r\n    url: KnockoutObservable<string>;\r\n    type: KnockoutObservable<string>;\r\n    instructions: KnockoutObservable<string>;\r\n    reviewed: KnockoutObservable<boolean>;\r\n    hidden: KnockoutObservable<boolean>;\r\n    public: KnockoutObservable<boolean>;\r\n    ipRanges: KnockoutObservable<string>;\r\n    settings: KnockoutObservable<string>;\r\n    onRun: KnockoutObservable<string>;\r\n    onChange: KnockoutObservable<string>;\r\n    onEval: KnockoutObservable<string>;\r\n    startingCode: KnockoutObservable<string>;\r\n    extraInstructorFiles: KnockoutObservable<string>;\r\n    extraStartingFiles: KnockoutObservable<string>;\r\n    forkedId: KnockoutObservable<number>;\r\n    forkedVersion: KnockoutObservable<number>;\r\n    ownerId: KnockoutObservable<number>;\r\n    courseId: KnockoutObservable<number>;\r\n    version: KnockoutObservable<number>;\r\n\r\n    FIELDS: TwoWayReadonlyMap = new TwoWayReadonlyMap({\r\n        \"name\": \"name\",\r\n        \"url\": \"url\",\r\n        \"type\": \"type\",\r\n        \"instructions\": \"instructions\",\r\n        \"reviewed\": \"reviewed\",\r\n        \"hidden\": \"hidden\",\r\n        \"public\": \"public\",\r\n        \"ip_ranges\": \"ipRanges\",\r\n        \"settings\": \"settings\",\r\n        \"on_run\": \"onRun\",\r\n        \"on_change\": \"onChange\",\r\n        \"on_eval\": \"onEval\",\r\n        \"starting_code\": \"startingCode\",\r\n        \"extra_instructor_files\": \"extraInstructorFiles\",\r\n        \"extra_starting_files\": \"extraStartingFiles\",\r\n        \"forked_id\": \"forkedId\",\r\n        \"forked_version\": \"forkedVersion\",\r\n        \"owner_id\": \"ownerId\",\r\n        \"course_id\": \"courseId\",\r\n        \"version\": \"version\"\r\n    });\r\n\r\n    constructor(data: AssignmentJson) {\r\n        super(data);\r\n        this.koFromJson(data);\r\n    }\r\n}\r\n\r\nexport class AssignmentStore extends ModelStore<AssignmentJson, Assignment> {\r\n    GET_FIELD: string = \"assignments\";\r\n\r\n    getPayload(): any {\r\n        return {\r\n            assignment_ids: this.getDelayedIds().join(\",\"),\r\n            course_id: this.courseId\r\n        };\r\n    }\r\n\r\n    getUrl(): string {\r\n        return \"assignments/get_ids\";\r\n    }\r\n\r\n    makeEmptyInstance(id: number): Assignment {\r\n        return new Assignment({\r\n            id: id,\r\n            date_created: null,\r\n            date_modified: null,\r\n            name: \"Unknown\",\r\n            url: \"\",\r\n            type: \"unknown\",\r\n            instructions: \"\",\r\n            reviewed: false,\r\n            hidden: false,\r\n            public: false,\r\n            ip_ranges: \"\",\r\n            settings: \"\",\r\n            on_run: \"\",\r\n            on_change: \"\",\r\n            on_eval: \"\",\r\n            starting_code: \"\",\r\n            extra_instructor_files: \"\",\r\n            extra_starting_files: \"\",\r\n            forked_id: 0,\r\n            forked_version: 0,\r\n            owner_id: 0,\r\n            course_id: 0,\r\n            version: 0\r\n        });\r\n    }\r\n\r\n    getLocalStorageKey(): string {\r\n        return `BLOCKPY_COURSE_${this.courseId}_ASSIGNMENTS`;\r\n    }\r\n}\r\n\r\nexport const AssignmentTemplate = `\r\n    <div>Assignment: <span data-bind=\"text: name\"></span></div>\r\n`;\r\n\r\nexport const AssignmentShortTemplate = `\r\n    <div>Assignment: <span data-bind=\"text: name\"></span> (<span data-bind=\"text: url\"></span>)</div>\r\n`;\r\n\r\nko.components.register(\"assignment\", {\r\n    viewModel: Assignment,\r\n    template: AssignmentTemplate\r\n});\r\n\r\nko.components.register(\"assignment-short\", {\r\n    template: AssignmentShortTemplate\r\n})","import * as ko from 'knockout';\r\nimport {Model, ModelJson, ModelStore} from \"./model\";\r\nimport {capitalize, TwoWayReadonlyMap} from \"../components/plugins\";\r\nimport {ajax_get} from \"../components/server\";\r\n\r\nexport enum ServiceType {\r\n    NATIVE= \"native\",\r\n    LTI = \"lti\"\r\n}\r\n\r\nexport enum CourseVisibility {\r\n    PRIVATE=\"private\",\r\n    PUBLIC=\"public\"\r\n}\r\n\r\nexport interface CourseJson extends ModelJson {\r\n    id: number;\r\n    name: string;\r\n    url: string;\r\n    owner_id: number;\r\n    service: ServiceType;\r\n    external_id: string;\r\n    endpoint: string;\r\n    visibility: CourseVisibility;\r\n    term: string;\r\n    settings: string;\r\n}\r\n\r\nexport class Course extends Model<CourseJson> {\r\n    id: number;\r\n    name: KnockoutObservable<string>;\r\n    url: KnockoutObservable<string>;\r\n    ownerId: KnockoutObservable<number>;\r\n    service: KnockoutObservable<ServiceType>;\r\n    externalId: KnockoutObservable<string>;\r\n    endpoint: KnockoutObservable<string>;\r\n    visibility: KnockoutObservable<CourseVisibility>;\r\n    term: KnockoutObservable<string>;\r\n    settings: KnockoutObservable<string>;\r\n\r\n    FIELDS: TwoWayReadonlyMap = new TwoWayReadonlyMap({\r\n        \"name\": \"name\",\r\n        \"url\": \"url\",\r\n        \"owner_id\": \"ownerId\",\r\n        \"service\": \"service\",\r\n        \"external_id\": \"externalId\",\r\n        \"endpoint\": \"endpoint\",\r\n        \"visibility\": \"visibility\",\r\n        \"term\": \"term\",\r\n        \"settings\": \"settings\"\r\n    });\r\n\r\n    constructor(data: CourseJson) {\r\n        super(data);\r\n        this.koFromJson(data);\r\n    }\r\n}\r\n\r\nexport class CourseStore extends ModelStore<CourseJson, Course> {\r\n    GET_FIELD: string = \"courses\";\r\n\r\n    getPayload(): any {\r\n        return {\r\n            course_id: this.courseId\r\n        };\r\n    }\r\n\r\n    getUrl(): string {\r\n        return \"courses\";\r\n    }\r\n\r\n    getLocalStorageKey(): string {\r\n        return `BLOCKPY_COURSE_${this.courseId}_COURSES`;\r\n    }\r\n\r\n    makeEmptyInstance(id: number): Course {\r\n        return new Course({\r\n            id: id,\r\n            date_created: null,\r\n            date_modified: null,\r\n            endpoint: \"\",\r\n            external_id: \"\",\r\n            name: \"Unknown Course\",\r\n            owner_id: null,\r\n            service: null,\r\n            settings: \"\",\r\n            term: \"Unknown term\",\r\n            url: \"\",\r\n            visibility: null\r\n        });\r\n    }\r\n}\r\n\r\nexport const CourseTemplate = `\r\n    <div>Course: <span data-bind=\"text: name\"></span></div>\r\n`;\r\n\r\nko.components.register(\"course\", {\r\n    viewModel: Course,\r\n    template: CourseTemplate\r\n});\r\n","import * as ko from 'knockout';\r\nimport {Model, ModelJson, ModelStore} from \"./model\";\r\nimport {TwoWayReadonlyMap} from \"../components/plugins\";\r\n\r\nexport enum SubmissionStatus {\r\n    // Not yet begun - the value if the submission does not exist\r\n    INITIALIZED = \"Initialized\",\r\n    // Started -> not yet run\r\n    STARTED = \"Started\",\r\n    // inProgress -> Run, but not yet marked formally as \"submitted\"\r\n    IN_PROGRESS = \"inProgress\",\r\n    // Submitted -> formally marked\r\n    SUBMITTED = \"Submitted\",\r\n    // Completed -> Either formally Submitted and FullyGraded, or auto graded as \"correct\"\r\n    COMPLETED = \"Completed\"\r\n}\r\n\r\nexport enum GradingStatus {\r\n    FULLY_GRADED = 'FullyGraded',\r\n    PENDING = 'Pending',\r\n    PENDING_MANUAL = 'PendingManual',\r\n    FAILED = 'Failed',\r\n    NOT_READY = 'NotReady',\r\n}\r\n\r\nexport interface SubmissionJson extends ModelJson {\r\n    code: string;\r\n    extra_files: string;\r\n    url: string;\r\n    endpoint: string;\r\n    score: number;\r\n    correct: boolean;\r\n    submission_status: SubmissionStatus;\r\n    grading_status: GradingStatus;\r\n    assignment_id: number | null;\r\n    assignment_group_id: number | null;\r\n    assignment_version: number;\r\n    course_id: number | null;\r\n    user_id: number | null;\r\n    version: number;\r\n}\r\n\r\nexport class Submission extends Model<SubmissionJson> {\r\n    code: KnockoutObservable<string>;\r\n    extraFiles: KnockoutObservable<string>;\r\n    url: KnockoutObservable<string>;\r\n    endpoint: KnockoutObservable<string>;\r\n    score: KnockoutObservable<number>;\r\n    correct: KnockoutObservable<boolean>;\r\n    submissionStatus: KnockoutObservable<SubmissionStatus>;\r\n    gradingStatus: KnockoutObservable<GradingStatus>;\r\n    assignmentId: ko.Observable<number | null>;\r\n    assignmentGroupId: KnockoutObservable<number | null>;\r\n    assignmentVersion: ko.Observable<number>;\r\n    courseId: ko.Observable<number | null>;\r\n    userId: ko.Observable<number | null>;\r\n    version: KnockoutObservable<number>;\r\n\r\n    FIELDS: TwoWayReadonlyMap = new TwoWayReadonlyMap({\r\n        \"date_modified\": \"dateModified\",\r\n        \"date_created\": \"dateCreated\",\r\n        \"code\": \"code\",\r\n        \"extra_files\": \"extraFiles\",\r\n        \"url\": \"url\",\r\n        \"endpoint\": \"endpoint\",\r\n        \"score\": \"score\",\r\n        \"correct\": \"correct\",\r\n        \"submission_status\": \"submissionStatus\",\r\n        \"grading_status\": \"gradingStatus\",\r\n        \"assignment_id\": \"assignmentId\",\r\n        \"assignment_group_id\": \"assignmentGroupId\",\r\n        \"assignment_version\": \"assignmentVersion\",\r\n        \"course_id\": \"courseId\",\r\n        \"user_id\": \"userId\",\r\n        \"version\": \"version\"\r\n    });\r\n\r\n    constructor(data: SubmissionJson) {\r\n        super(data);\r\n        this.koFromJson(data);\r\n    }\r\n\r\n    getAsSubmissionKey(): string {\r\n        return [this.courseId(), this.userId(), this.assignmentId()].join(\",\");\r\n    }\r\n\r\n    checkGrading(expected: GradingStatus) {\r\n        return this.gradingStatus().toLowerCase() === expected.toLowerCase();\r\n    }\r\n\r\n    checkSubmission(expected: SubmissionStatus) {\r\n        return this.submissionStatus().toLowerCase() === expected.toLowerCase();\r\n    }\r\n\r\n}\r\n\r\n\r\nexport class SubmissionStore extends ModelStore<SubmissionJson, Submission> {\r\n    GET_FIELD: string = \"submissions\";\r\n\r\n    getPayload(): any {\r\n        return {\r\n            submission_ids: this.getDelayedIds().join(\",\"),\r\n            course_id: this.courseId\r\n        };\r\n    }\r\n\r\n    getUrl(): string {\r\n        return \"submission/get_ids\";\r\n    }\r\n\r\n    makeEmptyInstance(id: number): Submission {\r\n        return new Submission({\r\n            assignment_group_id: null,\r\n            assignment_id: null,\r\n            assignment_version: 0,\r\n            code: \"\",\r\n            correct: false,\r\n            course_id: null,\r\n            endpoint: \"\",\r\n            extra_files: \"\",\r\n            grading_status: GradingStatus.NOT_READY,\r\n            score: 0,\r\n            submission_status: SubmissionStatus.INITIALIZED,\r\n            url: \"\",\r\n            user_id: undefined,\r\n            version: 0,\r\n            id: id,\r\n            date_created: null,\r\n            date_modified: null\r\n        });\r\n    }\r\n\r\n    getLocalStorageKey(): string {\r\n        return `BLOCKPY_COURSE_${this.courseId}_SUBMISSIONS`;\r\n    }\r\n}\r\n","import * as ko from 'knockout';\r\nimport {Model, ModelJson, ModelStore} from \"./model\";\r\nimport {TwoWayReadonlyMap} from \"../components/plugins\";\r\n\r\nexport interface ReviewJson extends ModelJson {\r\n    comment: string;\r\n    location: string;\r\n    generic: boolean;\r\n    tag_id: number | null;\r\n    score: number | null;\r\n    submission_id: number | null;\r\n    author_id: number;\r\n    assignment_version: number;\r\n    submission_version: number;\r\n    version: number;\r\n    forked_id: number | null;\r\n    forked_version: number | null;\r\n}\r\n\r\nexport class Review extends Model<ReviewJson> {\r\n    comment: KnockoutObservable<string>;\r\n    location: KnockoutObservable<string>;\r\n    generic: KnockoutObservable<boolean>;\r\n    tagId: KnockoutObservable<number | null>;\r\n    score: KnockoutObservable<number|null>;\r\n    submissionId: KnockoutObservable<number | null>;\r\n    authorId: KnockoutObservable<number>;\r\n    assignmentVersion: KnockoutObservable<number>;\r\n    submissionVersion: KnockoutObservable<number>;\r\n    version: KnockoutObservable<number>;\r\n    forkedId: KnockoutObservable<number | null>;\r\n    forkedVersion: KnockoutObservable<number | null>;\r\n\r\n\r\n    FIELDS: TwoWayReadonlyMap = new TwoWayReadonlyMap({\r\n        \"date_modified\": \"dateModified\",\r\n        \"date_created\": \"dateCreated\",\r\n        \"comment\": \"comment\",\r\n        \"location\": \"location\",\r\n        \"generic\": \"generic\",\r\n        \"tag_id\": \"tagId\",\r\n        \"score\": \"score\",\r\n        \"submission_id\": \"submissionId\",\r\n        \"author_id\": \"authorId\",\r\n        \"assignment_version\": \"assignmentVersion\",\r\n        \"submission_version\": \"submissionVersion\",\r\n        \"version\": \"version\",\r\n        \"forked_id\": \"forkedId\",\r\n        \"forked_version\": \"forkedVersion\",\r\n    });\r\n\r\n    constructor(data: ReviewJson) {\r\n        super(data);\r\n        this.koFromJson(data);\r\n    }\r\n}\r\n\r\n\r\nexport class ReviewStore extends ModelStore<ReviewJson, Review> {\r\n    GET_FIELD: string = \"submissions\";\r\n\r\n    getPayload(): any {\r\n        return {\r\n            submission_ids: this.getDelayedIds().join(\",\"),\r\n            course_id: this.courseId\r\n        };\r\n    }\r\n\r\n    getUrl(): string {\r\n        return \"submission/get_ids\";\r\n    }\r\n\r\n    makeEmptyInstance(id: number): Review {\r\n        return new Review({\r\n            assignment_version: 0,\r\n            author_id: 0,\r\n            comment: \"\",\r\n            forked_id: null,\r\n            forked_version: null,\r\n            generic: false,\r\n            location: \"\",\r\n            score: 0,\r\n            submission_id: null,\r\n            submission_version: 0,\r\n            tag_id: null,\r\n            version: 0,\r\n            id: id,\r\n            date_created: null,\r\n            date_modified: null\r\n        });\r\n    }\r\n\r\n    getLocalStorageKey(): string {\r\n        return `BLOCKPY_COURSE_${this.courseId}_REVIEWS`;\r\n    }\r\n}\r\n","import {UserJson, UserStore} from \"../models/user\";\r\nimport {AssignmentJson, AssignmentStore} from \"../models/assignment\";\r\nimport {AssignmentGroupJson, AssignmentGroupStore} from \"../models/assignment_group\";\r\nimport {CourseJson, CourseStore} from \"../models/course\";\r\nimport {ReviewJson, ReviewStore} from \"../models/review\";\r\nimport {SubmissionJson, SubmissionStore} from \"../models/submission\";\r\n\r\ndeclare global {\r\n    var $URL_ROOT: string;\r\n}\r\n\r\nexport function ajax_get(url: string, data: any) {\r\n    return $.get(window[\"$URL_ROOT\"]+url, data);\r\n}\r\n\r\nexport function hideOverlay() {\r\n    $('.overlay').hide();\r\n}\r\nexport function showOverlay() {\r\n    $('.overlay').show();\r\n}\r\n\r\nexport interface ServerIds {\r\n    userIds?: number[];\r\n    courseIds?: number[];\r\n    assignmentIds?: number[];\r\n    assignmentGroupIds?: number[];\r\n    reviewIds?: number[];\r\n    submissionIds?: number[];\r\n}\r\n\r\nexport interface ServerData {\r\n    users?: UserJson[];\r\n    courses?: CourseJson[];\r\n    assignments?: AssignmentJson[];\r\n    assignmentGroups?: AssignmentGroupJson[];\r\n    reviews?: ReviewJson[];\r\n    submissions: SubmissionJson[];\r\n}\r\n\r\n/**\r\n * Principle: None of the UI models hold the canonical lists. They all have references to this Server,\r\n * who holds the unique Stores, each of which has their own canonical lists.\r\n */\r\nexport class Server {\r\n    courseId: number;\r\n\r\n    userStore: UserStore;\r\n    courseStore: CourseStore;\r\n    assignmentStore: AssignmentStore;\r\n    assignmentGroupStore: AssignmentGroupStore;\r\n    reviewStore: ReviewStore;\r\n    submissionStore: SubmissionStore;\r\n\r\n    constructor(courseId: number, initialIds: ServerIds, initialData: ServerData) {\r\n        this.courseId = courseId;\r\n        this.userStore = new UserStore(courseId, initialIds.userIds, initialData.users);\r\n        this.courseStore = new CourseStore(courseId, initialIds.courseIds, initialData.courses);\r\n        this.assignmentStore = new AssignmentStore(courseId, initialIds.assignmentIds, initialData.assignments);\r\n        this.assignmentGroupStore = new AssignmentGroupStore(courseId, initialIds.assignmentGroupIds, initialData.assignmentGroups);\r\n        this.reviewStore = new ReviewStore(courseId, initialIds.reviewIds, initialData.reviews);\r\n        this.submissionStore = new SubmissionStore(courseId, initialIds.submissionIds, initialData.submissions);\r\n    }\r\n\r\n\r\n}\r\n","import * as ko from 'knockout';\r\nimport {TwoWayReadonlyMap} from \"../components/plugins\";\r\nimport {ajax_get} from \"../components/server\";\r\nimport {User, UserJson} from \"./user\";\r\n\r\nexport interface ModelJson {\r\n    id: number;\r\n    date_modified: Date;\r\n    date_created: Date;\r\n}\r\n\r\nexport abstract class Model<T extends ModelJson> {\r\n    id: number;\r\n    dateModified: ko.Observable<Date>;\r\n    dateCreated: ko.Observable<Date>;\r\n    FIELDS: TwoWayReadonlyMap = new TwoWayReadonlyMap({\r\n        \"date_modified\": \"dateModified\",\r\n        \"date_created\": \"dateCreated\"\r\n    });\r\n\r\n    protected constructor(data: T) {\r\n        this.id = data.id;\r\n        this.dateModified = ko.observable(data.date_modified);\r\n        this.dateCreated = ko.observable(data.date_created);\r\n    }\r\n\r\n    fromJson(data: T) {\r\n        this.FIELDS.lefts.forEach((left) => {\r\n            // @ts-ignore\r\n            this[this.FIELDS.get(left)](data[left]);\r\n        });\r\n    }\r\n\r\n    koFromJson(data: T) {\r\n        this.FIELDS.lefts.forEach((left) => {\r\n            // @ts-ignore\r\n            this[this.FIELDS.get(left)] = ko.observable(data[left]);\r\n        });\r\n    }\r\n\r\n    toJson(): T {\r\n        let data = {id: this.id};\r\n        // @ts-ignore\r\n        this.FIELDS.rights.forEach((right) => data[this.FIELDS.get(right)]=this[right]());\r\n        return <T>data;\r\n    }\r\n\r\n}\r\n\r\nexport abstract class ModelStore<J extends ModelJson, T extends Model<J>> {\r\n    private readonly data: Record<number, T>;\r\n    protected courseId: number|null;\r\n\r\n    private timer: number;\r\n    private delayedData: T[];\r\n\r\n    constructor(courseId: number|null, initialIds: number[], initialData: J[]) {\r\n        this.data = {};\r\n        this.courseId = courseId;\r\n        this.delayedData = [];\r\n        this.timer = null;\r\n        if (initialData !== undefined) {\r\n            initialData.map((instance: J) => this.newInstance(instance));\r\n        }\r\n        if (initialIds !== undefined) {\r\n            initialIds.map((id: number) => this.getInstance(id));\r\n        }\r\n    }\r\n\r\n    getInstance(id: number): T {\r\n        if (this.data[id] !== undefined) {\r\n            return this.data[id];\r\n        } else {\r\n            let delayedInstance = this.makeEmptyInstance(id);\r\n            this.delayLoadInstance(delayedInstance);\r\n            this.data[id] = delayedInstance;\r\n            return delayedInstance;\r\n        }\r\n    }\r\n\r\n    delayLoadInstance(instance: T) {\r\n        clearTimeout(this.timer);\r\n        this.delayedData.push(instance);\r\n        this.queueFinishDelay();\r\n    }\r\n\r\n    queueFinishDelay() {\r\n        if (this.delayedData.length > 25) {\r\n            this.finishDelayedLoads();\r\n        } else if (this.delayedData.length > 0) {\r\n            this.timer = window.setTimeout(this.finishDelayedLoads.bind(this), 1000);\r\n        }\r\n    }\r\n\r\n    getInstances(ids: number[]): T[] {\r\n        return ids.map(this.getInstance.bind(this));\r\n    }\r\n\r\n    getAllAvailable() {\r\n        let payload = this.getPayload();\r\n        let url = this.getUrl();\r\n        return new Promise((resolve, reject) => {\r\n            ajax_get(url, payload).then((data) => {\r\n                if (data.success) {\r\n                    let results = data[this.GET_FIELD];\r\n                    let created = results.map( (modelJson: J) => {\r\n                        return this.newInstance(modelJson);\r\n                    });\r\n                    resolve(created);\r\n                } else {\r\n                    reject(data);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Start keeping track of the given instance\r\n     * @param instance\r\n     */\r\n    trackInstance(instance: T): T {\r\n        this.data[instance.id] = instance;\r\n        return instance;\r\n    }\r\n\r\n    /**\r\n     * Create a new instance from the model and track it\r\n     * @param modelJson\r\n     */\r\n    newInstance(modelJson: J): T {\r\n        this.data[modelJson.id] = this.makeEmptyInstance(modelJson.id);\r\n        this.data[modelJson.id].fromJson(modelJson);\r\n        return this.data[modelJson.id];\r\n    }\r\n\r\n    abstract getUrl(): string;\r\n    abstract getLocalStorageKey(): string;\r\n    abstract getPayload(): any;\r\n    abstract makeEmptyInstance(id: number): T;\r\n    abstract GET_FIELD: string;\r\n\r\n    finishDelayedLoads() {\r\n        let payload = this.getPayload();\r\n        let url = this.getUrl();\r\n        this.delayedData.length= 0;\r\n        return ajax_get(url, payload).then((data) => {\r\n           if (data.success) {\r\n               let results = data[this.GET_FIELD];\r\n               let created = results.map( (modelJson: J) => {\r\n                   this.data[modelJson.id].fromJson(modelJson);\r\n                   return modelJson.id;\r\n               });\r\n               this.removeDelayedInstances(created);\r\n           } else {\r\n               console.error(data);\r\n           }\r\n        });\r\n    }\r\n\r\n    protected getDelayedIds(): number[] {\r\n        return this.delayedData.map((instance: T) => instance.id);\r\n    }\r\n\r\n    removeDelayedInstances(ids: number[]) {\r\n        this.delayedData = this.delayedData.filter((delayedInstance: T) => !ids.includes(delayedInstance.id));\r\n        this.queueFinishDelay();\r\n    }\r\n}","import * as ko from 'knockout';\r\nimport {Model, ModelJson, ModelStore} from \"./model\";\r\nimport {capitalize, TwoWayReadonlyMap} from \"../components/plugins\";\r\nimport {ajax_get} from \"../components/server\";\r\n\r\nexport interface AssignmentGroupJson extends ModelJson {\r\n    id: number;\r\n    name: string;\r\n    url: string;\r\n\r\n    position: number;\r\n\r\n    forked_id: number;\r\n    forked_version: number;\r\n    owner_id: number;\r\n    course_id: number;\r\n    version: number;\r\n}\r\n\r\nexport class AssignmentGroup extends Model<AssignmentGroupJson> {\r\n    id: number;\r\n    name: KnockoutObservable<string>;\r\n    url: KnockoutObservable<string>;\r\n    position: KnockoutObservable<number>;\r\n    forkedId: KnockoutObservable<number>;\r\n    forkedVersion: KnockoutObservable<number>;\r\n    ownerId: KnockoutObservable<number>;\r\n    courseId: KnockoutObservable<number>;\r\n    version: KnockoutObservable<number>;\r\n\r\n    FIELDS: TwoWayReadonlyMap = new TwoWayReadonlyMap({\r\n        \"name\": \"name\",\r\n        \"url\": \"url\",\r\n        \"position\": \"position\",\r\n        \"forked_id\": \"forkedId\",\r\n        \"forked_version\": \"forkedVersion\",\r\n        \"owner_id\": \"ownerId\",\r\n        \"course_id\": \"courseId\",\r\n        \"version\": \"version\"\r\n    });\r\n\r\n    constructor(data: AssignmentGroupJson) {\r\n        super(data);\r\n        this.koFromJson(data);\r\n    }\r\n}\r\n\r\nexport class AssignmentGroupStore extends ModelStore<AssignmentGroupJson, AssignmentGroup> {\r\n    GET_FIELD: string = \"assignment_groups\";\r\n\r\n    getPayload(): any {\r\n        return {\r\n            assignment_group_ids: this.getDelayedIds().join(\",\"),\r\n            course_id: this.courseId\r\n        };\r\n    }\r\n\r\n    getUrl(): string {\r\n        return \"assignment_groups/get_ids\";\r\n    }\r\n\r\n    makeEmptyInstance(id: number): AssignmentGroup {\r\n        return new AssignmentGroup({\r\n            id: id,\r\n            date_created: null,\r\n            date_modified: null,\r\n            name: \"Unknown\",\r\n            url: \"\",\r\n            position: 0,\r\n            forked_id: 0,\r\n            forked_version: 0,\r\n            owner_id: 0,\r\n            course_id: 0,\r\n            version: 0\r\n        });\r\n    }\r\n\r\n    getLocalStorageKey(): string {\r\n        return `BLOCKPY_COURSE_${this.courseId}_ASSIGNMENT_GROUPS`;\r\n    }\r\n}\r\n\r\nexport const AssignmentGroupTemplate = `\r\n    <div>Assignment Group: <span data-bind=\"text: name\"></span></div>\r\n`;\r\n\r\n\r\nko.components.register(\"assignment-group\", {\r\n    viewModel: AssignmentGroup,\r\n    template: AssignmentGroupTemplate\r\n});","import * as ko from 'knockout';\r\nimport {AssignmentGroup, AssignmentGroupJson} from \"../models/assignment_group\";\r\nimport {ajax_get} from \"./server\";\r\n\r\nexport class GroupList {\r\n    groups: KnockoutObservableArray<AssignmentGroup>;\r\n\r\n    constructor() {\r\n        this.groups = ko.observableArray<AssignmentGroup>([]);\r\n        $().ready(() => this.load());\r\n    }\r\n\r\n    load() {\r\n        ajax_get(\"get/\", {course_id: 3}).then((data) => {\r\n            this.groups(data.groups.map( (g: AssignmentGroupJson) => new AssignmentGroup(g)));\r\n        });\r\n    }\r\n}\r\n\r\nexport const GroupListTemplate = `\r\n    <div>Groups:\r\n        <div data-bind=\"foreach: groups\">\r\n            <div data-bind=\"component: {name: 'assignment-group', params: $data}\"></assignment-group>\r\n        </div>\r\n    </div>\r\n`;\r\n\r\nko.components.register(\"group-list\", {\r\n    viewModel: GroupList,\r\n    template: GroupListTemplate\r\n});","import * as ko from 'knockout';\r\nimport {Model, ModelJson} from \"./model\";\r\nimport {TwoWayReadonlyMap} from \"../components/plugins\";\r\n\r\nexport interface LogJson extends ModelJson {\r\n    assignment_id: number | null;\r\n    assignment_version: number;\r\n    course_id: number | null;\r\n    subject_id: number | null;\r\n    event_type: string;\r\n    file_path: string;\r\n    category: string;\r\n    label: string;\r\n    message: string;\r\n    client_timestamp: string;\r\n    client_timezone: string;\r\n}\r\n\r\nexport class Log extends Model<LogJson> {\r\n    assignmentId: ko.Observable<number | null>;\r\n    assignmentVersion: ko.Observable<number>;\r\n    courseId: ko.Observable<number | null>;\r\n    subjectId: ko.Observable<number | null>;\r\n    eventType: ko.Observable<string>;\r\n    filePath: ko.Observable<string>;\r\n    category: ko.Observable<string>;\r\n    label: ko.Observable<string>;\r\n    message: ko.Observable<string>;\r\n    clientTimestamp: ko.Observable<string>;\r\n    clientTimezone: ko.Observable<string>;\r\n\r\n    FIELDS: TwoWayReadonlyMap = new TwoWayReadonlyMap({\r\n        \"date_modified\": \"dateModified\",\r\n        \"date_created\": \"dateCreated\",\r\n        \"assignment_id\": \"assignmentId\",\r\n        \"assignment_version\": \"assignmentVersion\",\r\n        \"course_id\": \"courseId\",\r\n        \"subject_id\": \"subjectId\",\r\n        \"event_type\": \"eventType\",\r\n        \"file_path\": \"filePath\",\r\n        \"category\": \"category\",\r\n        \"label\": \"label\",\r\n        \"message\": \"message\",\r\n        \"client_timestamp\": \"clientTimestamp\",\r\n        \"client_timezone\": \"clientTimezone\"\r\n    });\r\n\r\n    constructor(data: LogJson) {\r\n        super(data);\r\n        this.koFromJson(data);\r\n    }\r\n\r\n\r\n\r\n    getAsSubmissionKey() {\r\n        return [this.courseId(), this.subjectId(), this.assignmentId()].join(\",\");\r\n    }\r\n\r\n    isEditEvent() {\r\n        return (this.eventType() === \"File.Edit\" || this.eventType() === \"File.Create\");\r\n    }\r\n}\r\n\r\nexport const REMAP_EVENT_TYPES: Record<string, string> = {\r\n    \"Session.Start\": \"Began session\",\r\n    \"X-IP.Change\": \"Changed IP address\",\r\n    \"File.Edit\": \"Edited code\",\r\n    \"File.Create\": \"Started assignment\",\r\n    \"Run.Program\": \"Ran program\",\r\n    \"Compile.Error\": \"Syntax error\",\r\n    \"X-Submission.LMS\": \"Updated grade\"\r\n};","const monthNames = [\r\n    \"Jan\", \"Feb\", \"Mar\",\r\n    \"Apr\", \"May\", \"June\", \"July\",\r\n    \"Aug\", \"Sept\", \"Oct\",\r\n    \"Nov\", \"Dec\"\r\n];\r\nconst weekDays = [\r\n    \"Sun\", \"Mon\", \"Tue\",\r\n    \"Wed\", \"Thu\", \"Fri\",\r\n    \"Sat\"\r\n];\r\n\r\nexport function isSameDay(first: Date, second: Date) {\r\n    return first.getDate() === second.getDate() &&\r\n        first.getMonth() === second.getMonth() &&\r\n        first.getFullYear() === second.getFullYear();\r\n}\r\n\r\n/**\r\n * Helper function to parse a date/time string and rewrite it as something\r\n * more human readable.\r\n * @param {String} timeString - the string representation of time (\"YYYYMMDD HHMMSS\")\r\n * @returns {String} - A human-readable time string.\r\n */\r\nexport function prettyPrintDateTime(timeString: string): string {\r\n    /*let year = timeString.slice(0, 4),\r\n        month = parseInt(timeString.slice(4, 6), 10)-1,\r\n        day = timeString.slice(6, 8),\r\n        hour = timeString.slice(9, 11),\r\n        minutes = timeString.slice(11, 13),\r\n        seconds = timeString.slice(13, 15);*/\r\n    // TODO: Handle timezones correctly\r\n    if (timeString === undefined) {\r\n        return \"Undefined Time\";\r\n    }\r\n    let now = new Date();\r\n    let past = new Date(parseInt(timeString, 10));\r\n    if (isSameDay(now, past)) {\r\n        return \"Today at \"+past.toLocaleTimeString();\r\n    } else {\r\n        let dayStr = weekDays[past.getDay()];\r\n        let monthStr = monthNames[past.getMonth()];\r\n        let date = dayStr + \", \" + monthStr + \" \" + past.getDate();\r\n        if (now.getFullYear() === past.getFullYear()) {\r\n            return date + \" at \"+past.toLocaleTimeString();\r\n        } else {\r\n            return date + \", \"+past.getFullYear() + \" at \"+past.toLocaleTimeString();\r\n        }\r\n    }\r\n}\r\n\r\nexport function prettyPrintDate(timeString: string): string {\r\n    if (timeString === undefined) {\r\n        return \"Undefined Time\";\r\n    }\r\n    let now = new Date();\r\n    let past = new Date(parseInt(timeString, 10));\r\n    if (isSameDay(now, past)) {\r\n        return \"Today\";\r\n    } else {\r\n        let dayStr = weekDays[past.getDay()];\r\n        let monthStr = monthNames[past.getMonth()];\r\n        let date = dayStr + \", \" + monthStr + \" \" + past.getDate();\r\n        if (now.getFullYear() === past.getFullYear()) {\r\n            return date;\r\n        } else {\r\n            return date + \", \"+past.getFullYear();\r\n        }\r\n    }\r\n}\r\n\r\nexport function prettyPrintTime(timeString: string): string {\r\n    if (timeString === undefined) {\r\n        return \"Undefined Time\";\r\n    }\r\n    let past = new Date(parseInt(timeString, 10));\r\n    return past.toLocaleTimeString();\r\n}\r\n\r\nexport function formatDuration(earlier: string, later: string) {\r\n    if (earlier === null) {\r\n        return \"Never\";\r\n    }\r\n    let timeEarlier = new Date(parseInt(earlier, 10));\r\n    let timeLater = later === null ? new Date() : new Date(parseInt(later, 10));\r\n    let delta = Math.abs(timeLater.getTime() - timeEarlier.getTime())/1000;\r\n    let sign = timeLater.getTime() > timeEarlier.getTime() ? ' earlier' : ' later';\r\n\r\n    let years = Math.floor(delta / (365*3600*24));\r\n    let days = Math.floor(delta % (365*3600*24) / (3600*24));\r\n    let hours = Math.floor(delta % (3600*24) / 3600);\r\n    let minutes = Math.floor(delta % 3600 / 60);\r\n    let seconds = Math.floor(delta % 60);\r\n\r\n    let yearsDisplay = `${years} year${years!==1? 's': ''}`;\r\n    let daysDisplay = `${days} day${days!==1? 's': ''}`;\r\n    let hoursDisplay = `${hours} hour${hours!==1? 's': ''}`;\r\n    let minutesDisplay = `${minutes} minute${minutes!==1? 's': ''}`;\r\n    let secondsDisplay = `${seconds} second${seconds!==1? 's': ''}`;\r\n\r\n    if (delta < 1) {\r\n        return \"At this time\";\r\n    } else if (delta < 60) {\r\n        return secondsDisplay+sign;\r\n    } else if (delta < 60*10) {\r\n        return minutesDisplay+\", \"+secondsDisplay+sign;\r\n    } else if (delta < 60*60) {\r\n        return minutesDisplay+sign;\r\n    } else if (delta < 24*60*60) {\r\n        return hoursDisplay+\", \"+minutesDisplay+sign;\r\n    } else if (delta < 365*24*60*60) {\r\n        return daysDisplay+\", \"+hoursDisplay+sign;\r\n    } else {\r\n        return yearsDisplay+\", \"+daysDisplay+sign;\r\n    }\r\n}","import * as ko from 'knockout';\r\nimport {Model, ModelJson, ModelStore} from \"../models/model\";\r\nimport {User, UserJson} from \"../models/user\";\r\nimport {areArraysEqualSets, pushObservableArray} from \"./plugins\";\r\nimport {Assignment, AssignmentJson} from \"../models/assignment\";\r\n\r\ninterface ModelSetJson {\r\n    name: string;\r\n    ids: number[];\r\n    default: boolean;\r\n}\r\n\r\nexport class ModelSet {\r\n    name: KnockoutObservable<string>;\r\n    ids: KnockoutObservableArray<number>;\r\n    default: KnockoutObservable<boolean>;\r\n\r\n    constructor(params: ModelSetJson) {\r\n        this.name = ko.observable(params.name);\r\n        this.ids = ko.observableArray<number>(params.ids);\r\n        this.default = ko.observable(params.default);\r\n    }\r\n\r\n    getIds(): string {\r\n        return this.ids().join(\",\");\r\n    }\r\n\r\n    toJson(): ModelSetJson {\r\n        return {\r\n            name: this.name(),\r\n            ids: this.ids(),\r\n            default: this.default()\r\n        }\r\n    }\r\n\r\n    getStored() {\r\n        if (this.default()) {\r\n            return \"\";\r\n        } else {\r\n            return this.getIds();\r\n        }\r\n    }\r\n}\r\n\r\ninterface ModelSetSelectorJson<J extends ModelJson, T extends Model<J>> {\r\n    store: ModelStore<J, T>;\r\n    modelSet: KnockoutObservable<ModelSet>;\r\n    default: string;\r\n}\r\n\r\nexport enum SelectMode {\r\n    ALL=\"ALL\", SINGLE=\"SINGLE\", SET=\"SET\"\r\n}\r\n\r\n\r\nexport class ModelSetSelector<J extends ModelJson, T extends Model<J>> {\r\n    protected store: ModelStore<J, T>;\r\n    sets: KnockoutObservableArray<ModelSet>;\r\n    currentSet: KnockoutObservable<ModelSet>;\r\n\r\n    private readonly editorVisible: KnockoutObservable<boolean>;\r\n    private readonly selectMode: KnockoutObservable<SelectMode>;\r\n    private readonly available: KnockoutObservableArray<T>;\r\n    private readonly selectedOptions: KnockoutObservableArray<number>;\r\n    private readonly singleSet: KnockoutObservable<ModelSet>;\r\n    private readonly singleOption: KnockoutObservable<number>;\r\n    private bulkEditor: KnockoutObservable<string>;\r\n    protected prettyResult: KnockoutReadonlyComputed<T[]>;\r\n    private readonly isLoading: KnockoutObservable<boolean>;\r\n\r\n    constructor(params: ModelSetSelectorJson<J, T>) {\r\n        // Create the complete list of users\r\n        this.store = params.store;\r\n        this.available = ko.observableArray<T>([]);\r\n        this.isLoading = ko.observable(true);\r\n        this.store.getAllAvailable().then((models: T[]) => {\r\n            pushObservableArray(this.available, models);\r\n            this.sets()[0].ids(models.map((u: T) => u.id));\r\n            this.loadDefault(params.default);\r\n            this.isLoading(false);\r\n        });\r\n\r\n        // Create single person model\r\n        this.selectMode = ko.observable<SelectMode>(SelectMode.ALL);\r\n        this.singleSet = ko.observable<ModelSet>(new ModelSet({default: false, ids: [], name: \"Just this one\"}))\r\n        this.singleOption = ko.observable<number>(null);\r\n        // Load in existing user sets, or create default one\r\n        let sets = this.loadFromLocalStorage().map((item:ModelSetJson)=> new ModelSet(item));\r\n        this.sets = ko.observableArray<ModelSet>(sets);\r\n        // Set the current user set to be the default user set\r\n        this.currentSet = params.modelSet;\r\n        this.currentSet(this.sets()[0]);\r\n        // Hide the editor\r\n        this.editorVisible = ko.observable(false);\r\n\r\n        // MultiSelect of selectable users\r\n        this.selectedOptions = ko.observableArray<number>([]);\r\n        // Bulk add emails/IDs\r\n        this.bulkEditor = ko.observable<string>(\"\");\r\n\r\n        this.currentSet.subscribe(() => {\r\n            if (this.editorVisible()) {\r\n                this.selectedOptions(this.currentSet().ids());\r\n            }\r\n        });\r\n\r\n        this.singleOption.subscribe(() => {\r\n            this.singleSet().ids([this.singleOption()]);\r\n            this.currentSet(this.singleSet());\r\n        });\r\n\r\n        this.selectMode.subscribe(() => {\r\n            switch (this.selectMode()) {\r\n                case SelectMode.ALL: case SelectMode.SET:\r\n                    this.currentSet(this.sets()[0]);\r\n                    break;\r\n                case SelectMode.SINGLE:\r\n                    this.currentSet(this.singleSet());\r\n            }\r\n        }, this);\r\n\r\n        this.selectedOptions.subscribe((changes) => {\r\n            if (this.currentSet().default()) {\r\n                let anyDeletions = changes.some((change) => change.status === \"deleted\");\r\n                if (anyDeletions) {\r\n                    let newOptions = this.selectedOptions();\r\n                    this.startAdding(newOptions);\r\n                }\r\n            }\r\n        }, this, \"arrayChange\");\r\n\r\n        this.prettyResult = ko.pureComputed<T[]>( () => {\r\n            return this.currentSet().ids().map((id: number) => this.store.getInstance(id));\r\n        }, this);\r\n    }\r\n\r\n    getDefaultGroupSetName(): string {\r\n        return \"Everything\";\r\n    }\r\n\r\n    getNewGroupSetName(): string {\r\n        return \"New set\";\r\n    }\r\n\r\n    loadFromLocalStorage(): ModelSetJson[] {\r\n        // Need CourseID for this too\r\n        let sets = localStorage.getItem(this.store.getLocalStorageKey());\r\n        if (sets === null) {\r\n            return [{name: this.getDefaultGroupSetName(), default: true, ids: []}];\r\n        } else {\r\n            return JSON.parse(sets);\r\n        }\r\n    }\r\n\r\n    startEditing() {\r\n        this.editorVisible(true);\r\n        this.selectedOptions(this.currentSet().ids());\r\n    }\r\n\r\n    startAdding(ids?: number[]): ModelSet {\r\n        let newSet = new ModelSet({name: this.getNewGroupSetName(), default: false, ids: ids || []});\r\n        this.sets.push(newSet);\r\n        this.currentSet(newSet);\r\n        this.editorVisible(true);\r\n        return newSet;\r\n    }\r\n\r\n    addAsEmails() {\r\n        // Parse the bulkEditor for emails\r\n        // Add them to the currently selectedOptions\r\n        // Clear the bulkEditor for any identified people\r\n    }\r\n\r\n    loadDefault(value: string) {\r\n        console.log(value);\r\n        if (value === \"first\") {\r\n            this.selectMode(SelectMode.SINGLE);\r\n            this.singleOption(this.available()[0].id);\r\n        } else if (value === \"all\" || value.trim() === \"\") {\r\n            this.selectMode(SelectMode.ALL);\r\n            this.currentSet(this.sets()[0]);\r\n        } else {\r\n            let ids = value.split(\",\").map((id: string) => parseInt(id, 10));\r\n            switch (ids.length) {\r\n                case 0: case this.available().length:\r\n                    this.selectMode(SelectMode.ALL);\r\n                    this.currentSet(this.sets()[0]);\r\n                    break;\r\n                case 1:\r\n                    if (this.available().some((model: T) => model.id === ids[0])) {\r\n                        this.selectMode(SelectMode.SINGLE);\r\n                        this.singleOption(ids[0]);\r\n                    }\r\n                    break;\r\n                default:\r\n                    this.sets().forEach((modelSet: ModelSet) => {\r\n                        if (areArraysEqualSets(modelSet.ids(), ids)) {\r\n                            this.selectMode(SelectMode.SET);\r\n                            this.currentSet(modelSet);\r\n                        }\r\n                    });\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    deleteSet(): boolean {\r\n        if (this.currentSet().default()) {\r\n            this.editorVisible(false);\r\n            return false;\r\n        }\r\n        if (confirm(\"Are you sure you want to delete this set?\")) {\r\n            let deleted = this.currentSet();\r\n            this.currentSet(this.sets()[0]);\r\n            this.sets.remove(deleted);\r\n            this.saveToLocalStorage();\r\n            this.editorVisible(false);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    saveSet() {\r\n        this.currentSet().ids(this.selectedOptions());\r\n        this.saveToLocalStorage();\r\n        this.editorVisible(false);\r\n    }\r\n\r\n    cancelEdit() {\r\n        this.editorVisible(false);\r\n    }\r\n\r\n    private saveToLocalStorage() {\r\n        let modelSetJson = JSON.stringify(this.sets().map((m: ModelSet) => m.toJson()));\r\n        localStorage.setItem(this.store.getLocalStorageKey(), modelSetJson);\r\n    }\r\n}\r\n\r\nexport const MODEL_SET_SELECTOR_HTML = (setName: string) => `\r\n    <div>\r\n        <!-- Mode Select -->\r\n        <div class=\"form-check form-check-inline\">\r\n            <input class=\"form-check-input\"\r\n                   data-bind=\"checked: selectMode, disable: isLoading\"\r\n                   type=\"radio\" name=\"${setName}\" id=\"${setName}1\" value=\"ALL\">\r\n            <label class=\"form-check-label\" for=\"${setName}1\">\r\n                All\r\n            </label>\r\n        </div>\r\n        <div class=\"form-check form-check-inline\">\r\n            <input class=\"form-check-input\"\r\n                   data-bind=\"checked: selectMode, disable: isLoading\"\r\n                   type=\"radio\" name=\"${setName}\" id=\"${setName}2\" value=\"SINGLE\">\r\n            <label class=\"form-check-label\" for=\"${setName}2\">\r\n                Only\r\n            </label>\r\n        </div>\r\n        <div class=\"form-check form-check-inline\">\r\n            <input class=\"form-check-input\"\r\n                   data-bind=\"checked: selectMode, disable: isLoading\"\r\n                   type=\"radio\" name=\"${setName}\" id=\"${setName}3\" value=\"SET\">\r\n            <label class=\"form-check-label\" for=\"${setName}3\">\r\n                ${setName} set\r\n            </label>\r\n        </div>\r\n        \r\n        <!-- Single Person -->\r\n        <div data-bind=\"if: selectMode()==='SINGLE'\">\r\n        <form class=\"form-inline\">\r\n        <select data-bind=\"options: available, value: singleOption, optionsText: 'name', optionsValue: 'id'\"\r\n                class=\"form-control custom-select ml-2 custom-select-sm\"\r\n        ></select>\r\n        </form>\r\n        </div>\r\n        \r\n        <!-- Subset -->\r\n        <div data-bind=\"if: selectMode()==='SET'\">\r\n        <form class=\"form-inline\">\r\n            Show ${setName} set:\r\n            <select data-bind=\"options: sets,\r\n                               optionsText: 'name',\r\n                               valueAllowUnset: true,\r\n                               value: currentSet\"\r\n                    class=\"form-control custom-select ml-2 custom-select-sm\">\r\n            </select>\r\n            <button type=\"button\" class=\"btn btn-sm btn-outline-secondary ml-2\"\r\n                    data-bind=\"click: startEditing, visible: !editorVisible()\">\r\n                    <span class=\"fas fa-edit\"></span>\r\n                    Edit this ${setName} set</button>\r\n            <button type=\"button\" class=\"btn btn-sm btn-outline-secondary ml-2\"\r\n                    data-bind=\"click: startAdding, visible: !editorVisible()\">\r\n                    <span class=\"fas fa-plus\"></span>\r\n                    Add new ${setName} set</button>\r\n                                             \r\n        </form>\r\n        <div data-bind=\"if: editorVisible\">\r\n            <label>Current ${setName} set name:\r\n                <input type=\"text\" data-bind=\"value: currentSet().name, disable: currentSet().default\">\r\n            </label><br>\r\n           <select multiple=multiple style=\"width: 100%\"\r\n                 data-bind=\"selectedOptions: selectedOptions, valueAllowUnset: true,\r\n                              options: available, optionsText: 'name', optionsValue: 'id', \r\n                              select2: { placeholder: '${setName}', allowClear: true }\"></select>\r\n\r\n            <!-- Incomplete\r\n            <label style=\"min-width: 100%\">Bulk Editor (separated by commas):\r\n                <button type=\"button\" class=\"btn btn-outline-secondary btn-sm\"\r\n                    data-bind=\"click: addAsEmails\">Add as Emails</button>\r\n                <br>\r\n                <textarea data-bind=\"value: currentSet().emails,\r\n                                     disable: currentSet().default\"\r\n                 style=\"min-width: 100%\"></textarea></label><br>\r\n             -->\r\n            <button type=\"button\" class=\"btn btn-danger btn-sm float-right mt-2\"\r\n                    data-bind=\"click: deleteSet\">Delete current ${setName} set</button>\r\n            <button type=\"button\" class=\"btn btn-success btn-sm mt-2\"\r\n                    data-bind=\"click: saveSet\">Save ${setName} set</button>\r\n            <button type=\"button\" class=\"btn btn-outline-secondary btn-sm mt-2 ml-4\"\r\n                    data-bind=\"click: cancelEdit\">Cancel changes</button>\r\n        </div>\r\n        </div>\r\n        <div data-bind=\"ifnot: editorVisible\">\r\n            <div data-bind=\"if: isLoading\">\r\n                <div class=\"spinner-loader\" role=\"status\">\r\n                    <span class=\"sr-only\">Loading...</span>\r\n                </div>\r\n            </div>\r\n            <div data-bind=\"ifnot: isLoading\">\r\n                Included ${setName}(s): \r\n                <span data-bind=\"foreach: prettyResult\">\r\n                    <span data-bind=\"text: name\"></span>, \r\n                </span>\r\n            </div>\r\n        </div>\r\n    </div>`\r\n\r\nexport class UserSetSelector extends ModelSetSelector<UserJson, User> {\r\n\r\n    constructor(params: ModelSetSelectorJson<UserJson, User>) {\r\n        super(params);\r\n    }\r\n\r\n    getDefaultGroupSetName(): string {\r\n        return \"All students\";\r\n    }\r\n\r\n    getNewGroupSetName(): string {\r\n        return \"New user set\";\r\n    }\r\n}\r\n\r\nexport class AssignmentSetSelector extends ModelSetSelector<AssignmentJson, Assignment> {\r\n    constructor(params: ModelSetSelectorJson<AssignmentJson, Assignment>) {\r\n        super(params);\r\n    }\r\n\r\n    getDefaultGroupSetName(): string {\r\n        return \"All assignments\";\r\n    }\r\n\r\n    getNewGroupSetName(): string {\r\n        return \"New assignment set\";\r\n    }\r\n}\r\n\r\nko.components.register(\"user-set-selector\", {\r\n    viewModel: UserSetSelector,\r\n    template: MODEL_SET_SELECTOR_HTML(\"User\")\r\n});\r\nko.components.register(\"assignment-set-selector\", {\r\n    viewModel: AssignmentSetSelector,\r\n    template: MODEL_SET_SELECTOR_HTML(\"Assignment\")\r\n});","import {Assignment} from \"../models/assignment\";\r\nimport {GradingStatus, Submission, SubmissionStatus} from \"../models/submission\";\r\n\r\n\r\nexport function launchEditor(assignment: Assignment, submission: Submission) {\r\n    var form = document.createElement(\"form\");\r\n    form.setAttribute(\"method\", \"post\");\r\n    form.setAttribute(\"action\", window[\"$URL_ROOT\"]+\"blockpy/load_readonly\");\r\n    form.setAttribute(\"target\", \"_blank\");\r\n\r\n    let formData = {\r\n        user: {\r\n            role: \"instructor\"\r\n        },\r\n        assignment: assignment ? assignment.toJson(): null,\r\n        submission: submission ? submission.toJson(): null\r\n    };\r\n\r\n    formData.assignment.forked_id = assignment.id;\r\n    formData.assignment.forked_version = assignment.version();\r\n    formData.assignment.id = null;\r\n    formData.assignment.url = \"\";\r\n    formData.assignment.course_id = null;\r\n    formData.submission.id = null;\r\n    formData.submission.endpoint = \"\";\r\n    formData.submission.url = \"\";\r\n    formData.submission.user_id = null;\r\n    formData.submission.course_id = null;\r\n    formData.submission.assignment_id = null;\r\n    formData.submission.grading_status = GradingStatus.NOT_READY;\r\n    formData.submission.submission_status = SubmissionStatus.IN_PROGRESS;\r\n\r\n    var hiddenField = document.createElement(\"input\");\r\n    hiddenField.setAttribute(\"type\", \"hidden\");\r\n    hiddenField.setAttribute(\"name\", \"assignment_data\");\r\n    hiddenField.setAttribute(\"value\", JSON.stringify(formData, null, 2));\r\n    form.appendChild(hiddenField);\r\n    document.body.appendChild(form);\r\n\r\n    //window.open('', '_blank');\r\n\r\n    form.submit();\r\n}","/**\r\n * Watch grouping mode to combine assignments xor users\r\n * Live polling mode\r\n * Show recent events\r\n */\r\n\r\nimport * as ko from 'knockout';\r\nimport {Log, LogJson, REMAP_EVENT_TYPES} from \"../models/log\";\r\nimport {ajax_get} from \"./server\";\r\nimport {User, UserStore} from \"../models/user\";\r\nimport {formatDuration, prettyPrintDate, prettyPrintDateTime, prettyPrintTime} from \"./dates\";\r\nimport {Assignment, AssignmentStore} from \"../models/assignment\";\r\nimport {last, pushObservableArray} from \"./plugins\";\r\nimport './model_selector';\r\nimport {ModelSet} from \"./model_selector\";\r\nimport {launchEditor} from \"./editor\";\r\nimport {Submission, SubmissionJson} from \"../models/submission\";\r\n\r\nexport enum WatchMode {\r\n    FROZEN_LATEST, POLL, REVIEW\r\n}\r\n\r\nexport class SubmissionState {\r\n    loaded: boolean;\r\n    friendly: string;\r\n    code: string;\r\n    lastRan: string;\r\n    lastEdit: string;\r\n    lastOpened: string;\r\n    completed: boolean;\r\n    score: number;\r\n    mode: string;\r\n    fullscreen: boolean;\r\n    log: Log;\r\n\r\n    constructor(current: SubmissionState, log: Log) {\r\n        this.makeNextState(current, log);\r\n    }\r\n\r\n    getPrettyTime(): string {\r\n        return prettyPrintDateTime(this.log.clientTimestamp());\r\n    }\r\n\r\n    getPrettyLastEdit(watchMode?: WatchMode): string {\r\n        let current = watchMode === WatchMode.REVIEW ? this.log.clientTimestamp() : null;\r\n        return formatDuration(this.lastEdit, current);\r\n    }\r\n\r\n    getPrettyLastRan(watchMode?: WatchMode): string {\r\n        let current = watchMode === WatchMode.REVIEW ? this.log.clientTimestamp() : null;\r\n        return formatDuration(this.lastRan, current);\r\n    }\r\n\r\n    getPrettyLastOpened(watchMode?: WatchMode): string {\r\n        let current = watchMode === WatchMode.REVIEW ? this.log.clientTimestamp() : null;\r\n        return formatDuration(this.lastOpened, current);\r\n    }\r\n\r\n    copyState(other: SubmissionState) {\r\n        if (other === null) {\r\n            this.code = \"\";\r\n            this.friendly = \"Not Loaded\";\r\n            this.lastRan = null;\r\n            this.lastEdit = null;\r\n            this.lastOpened = null;\r\n            this.completed = false;\r\n            this.score = 0;\r\n            this.mode = \"unknown\";\r\n            this.fullscreen = false;\r\n            this.log = null;\r\n        } else {\r\n            this.code = other.code;\r\n            this.lastRan = other.lastRan;\r\n            this.lastEdit = other.lastEdit;\r\n            this.lastOpened = other.lastOpened;\r\n            this.completed = other.completed;\r\n            this.score = other.score;\r\n            this.mode = other.mode;\r\n            this.fullscreen = other.fullscreen;\r\n            this.log = null;\r\n        }\r\n    }\r\n\r\n    makeNextState(current: SubmissionState, log: Log) {\r\n        this.copyState(current);\r\n        this.log = log;\r\n        this.friendly = REMAP_EVENT_TYPES[log.eventType()];\r\n        switch (log.eventType()) {\r\n            case \"File.Create\":\r\n                this.code = log.message();\r\n                this.lastEdit = log.clientTimestamp();\r\n                break;\r\n            case \"File.Edit\":\r\n                this.code = log.message();\r\n                this.lastEdit = log.clientTimestamp();\r\n                break;\r\n            case \"Session.Start\":\r\n                this.lastOpened = log.clientTimestamp();\r\n                break;\r\n            case \"Run.Program\":\r\n                this.lastRan = log.clientTimestamp();\r\n                break;\r\n            case \"Intervention\":\r\n                this.completed = log.category() === \"Complete\";\r\n                break;\r\n            case \"X-View.Change\":\r\n                this.mode = log.message();\r\n                break;\r\n            case \"X-Submission.LMS\":\r\n                this.score = parseInt(log.message(), 10);\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\nexport class SubmissionHistory {\r\n    // Past history of all submission states, timed on logs\r\n    states: KnockoutObservableArray<SubmissionState>;\r\n    // Identity information\r\n    user: User;\r\n    assignment: Assignment;\r\n    submission: Submission;\r\n\r\n    // Current viewing state\r\n    watchMode: KnockoutObservable<WatchMode>;\r\n    currentStateIndex: KnockoutObservable<string|number>;\r\n\r\n    // Cosmetic functions\r\n    private currentState: KnockoutReadonlyComputed<SubmissionState>;\r\n    private isVcrActive: KnockoutReadonlyComputed<boolean>;\r\n    private getWatchModeClass: KnockoutReadonlyComputed<string>;\r\n\r\n    constructor(initialLog: Log, user: User, assignment: Assignment) {\r\n        this.states = ko.observableArray<SubmissionState>([]);\r\n        this.currentStateIndex = ko.observable(0);\r\n        this.user = user;\r\n        this.assignment = assignment;\r\n        this.watchMode = ko.observable(WatchMode.FROZEN_LATEST);\r\n        this.isVcrActive = ko.pureComputed(() => {\r\n            return this.watchMode() === WatchMode.REVIEW;\r\n        }, this);\r\n        this.getWatchModeClass = ko.pureComputed(() => {\r\n            switch (this.watchMode()) {\r\n                case WatchMode.FROZEN_LATEST:\r\n                    return \"fa-pause-circle\";\r\n                case WatchMode.POLL:\r\n                    return \"fa-eye\";\r\n                case WatchMode.REVIEW:\r\n                    return \"fa-history\";\r\n            }\r\n        }, this);\r\n        this.currentState = ko.pureComputed(() => {\r\n            if (this.states().length > 0) {\r\n                if (this.watchMode() === WatchMode.REVIEW) {\r\n                    return this.states()[this.getCurrentStateIndex()];\r\n                } else {\r\n                    return last(this.states());\r\n                }\r\n            } else {\r\n                console.error(\"No states are currently loaded!\");\r\n            }\r\n        }, this);\r\n    }\r\n\r\n    private getCurrentStateIndex(): number {\r\n        return parseInt(<string>this.currentStateIndex(), 10);\r\n    }\r\n\r\n    addLogs(logs: Log[]) {\r\n        let states: SubmissionState[] = [];\r\n        let latestState: SubmissionState = this.states().length ? last(this.states()) : null;\r\n        for (let i=0; i< logs.length; i+=1) {\r\n            let nextState = new SubmissionState(latestState, logs[i]);\r\n            states.push(nextState);\r\n            latestState = nextState;\r\n        }\r\n        pushObservableArray(this.states, states);\r\n        //console.log(states);\r\n    }\r\n\r\n    // Map CodeStates to event IDs so we can quickly get code? Or playback history to status at each step...\r\n\r\n    loadHistorySelector(event: Event) {\r\n        let selector = this.getSelector(event);\r\n        selector.empty();\r\n        let i;\r\n        let optGroup: JQuery<JQuery.Node> = null;\r\n        for (i=0; i <this.states().length; i+= 1) {\r\n            let entry: Log = this.states()[i].log;\r\n            let formattedDate = prettyPrintDate(entry.clientTimestamp());\r\n            if (optGroup === null || optGroup.attr(\"label\") != formattedDate) {\r\n                optGroup = $(\"<optgroup></optgroup>\");\r\n                optGroup.attr(\"label\", formattedDate);\r\n                selector.append(optGroup);\r\n            }\r\n            let eventType = REMAP_EVENT_TYPES[entry.eventType()] || entry.eventType();\r\n            let displayed = prettyPrintTime(entry.clientTimestamp()) +\" - \"+eventType;\r\n            let option = $(\"<option></option>\", {text: displayed});\r\n            option.attr(\"value\", i);\r\n            optGroup.append(option);\r\n        }\r\n        this.currentStateIndex(i-1);\r\n        //selector.val(Math.max(0, i-1));\r\n    }\r\n\r\n    switchWatchMode(data: any, event: Event) {\r\n        switch (this.watchMode()) {\r\n            case WatchMode.FROZEN_LATEST:\r\n                this.watchMode(WatchMode.POLL);\r\n                break;\r\n            case WatchMode.POLL:\r\n                this.loadHistorySelector(event);\r\n                this.watchMode(WatchMode.REVIEW);\r\n                break;\r\n            case WatchMode.REVIEW:\r\n                this.watchMode(WatchMode.FROZEN_LATEST);\r\n                break;\r\n        }\r\n    }\r\n\r\n    getSelector(event: Event) {\r\n        return $(event.target).closest(\"div\").find(\".history-select\");\r\n    }\r\n\r\n    moveToMostRecent(data: any, event: Event) {\r\n        this.currentStateIndex(this.states().length-1);\r\n    }\r\n\r\n    moveToBack(data: any, event: Event) {\r\n        this.currentStateIndex(Math.max(0, this.getCurrentStateIndex()-1));\r\n    }\r\n\r\n    seekToBack(data: any, event: Event) {\r\n        let currentId = this.getCurrentStateIndex();\r\n        let currentState: SubmissionState;\r\n        do {\r\n            currentId -= 1;\r\n            currentState = this.states()[currentId];\r\n        } while (currentId>0 && !currentState.log.isEditEvent());\r\n        this.currentStateIndex(currentId);\r\n    }\r\n\r\n    moveToNext(data: any, event: Event) {\r\n        this.currentStateIndex(Math.min(this.states().length-1, this.getCurrentStateIndex()+1));\r\n    }\r\n\r\n    seekToNext(data: any, event: Event) {\r\n        let currentId = this.getCurrentStateIndex();\r\n        let currentState: SubmissionState;\r\n        do {\r\n            currentId += 1;\r\n            currentState = this.states()[currentId];\r\n        } while (currentId<this.states().length-1 && !currentState.log.isEditEvent());\r\n        this.currentStateIndex(currentId);\r\n    }\r\n\r\n    moveToStart(data: any, event: Event) {\r\n        /*this.getSelector(event).val(0);\r\n        this.viewLog(event);*/\r\n        this.currentStateIndex(0);\r\n    }\r\n\r\n    launchEditor() {\r\n        launchEditor(this.assignment, this.submission);\r\n    }\r\n}\r\n\r\nexport const SubmissionHistoryCard = `\r\n<div class=\"\">\r\n    <div data-bind=\"component: {name: 'user-short', params: user}\"></div>\r\n    <div data-bind=\"component: {name: 'assignment-short', params: assignment}\"></div>\r\n    <div>Logged Time: <span data-bind=\"text: currentState().getPrettyTime()\"></span></div>\r\n    <div>Last Edited: <span data-bind=\"text: currentState().getPrettyLastEdit(watchMode())\"></span></div>\r\n    <div>Last Ran: <span data-bind=\"text: currentState().getPrettyLastRan(watchMode())\"></span></div>\r\n    <div>Last Opened: <span data-bind=\"text: currentState().getPrettyLastOpened(watchMode())\"></span></div>\r\n    <div>Score: <span data-bind=\"text: currentState().completed ? 'Correct' : 'Incomplete'\"></span> (<span data-bind=\"text: currentState().score\"></span>)</div>\r\n</div>\r\n    <div>Open in <a href=\"#\" data-bind=\"click: $parent.launchEditor.bind($parent)\">Readonly Editor</a></div>\r\n    <pre class=\"python-code-block\"><code data-bind=\"highlightedCode: currentState().code\" class=\"python\" style=\"height: 200px\"></code></pre>\r\n`;\r\n\r\nko.components.register(\"submission-history-card\", {\r\n    template: SubmissionHistoryCard\r\n});\r\n\r\nexport const SubmissionHistoryVCR = `\r\n<div class=\"col-md-12\" data-bind=\"visible: $parent.isVcrActive()\">\r\n    <form class=\"form-inline\">\r\n        <button class=\"btn btn-outline-secondary mr-2 btn-sm\" type=\"button\"\r\n            data-bind=\"click: $parent.moveToStart.bind($parent)\">\r\n            <span class='fas fa-step-backward'></span> Start\r\n        </button>\r\n        <button class=\"btn btn-outline-secondary mr-2 btn-sm\" type=\"button\"\r\n            data-bind=\"click: $parent.seekToBack.bind($parent)\">\r\n            <span class='fas fa-fast-backward'></span>\r\n        </button>\r\n        <button class=\"btn btn-outline-secondary mr-2 btn-sm\" type=\"button\"\r\n            data-bind=\"click: $parent.moveToBack.bind($parent)\">\r\n            <span class='fas fa-backward'></span> Back\r\n        </button>\r\n        <select class=\"history-select form-control custom-select mr-2 custom-select-sm\"\r\n            data-bind=\"value: $parent.currentStateIndex\"\r\n            aria-title=\"History Selector\">\r\n        </select>\r\n        <button class=\"btn btn-outline-secondary mr-2 btn-sm\" type=\"button\"\r\n            data-bind=\"click: $parent.moveToNext.bind($parent)\">\r\n            <span class='fas fa-forward'></span> Next\r\n        </button>\r\n        <button class=\"btn btn-outline-secondary mr-2 btn-sm\" type=\"button\"\r\n            data-bind=\"click: $parent.seekToNext.bind($parent)\">\r\n            <span class='fas fa-fast-forward'></span>\r\n        </button>\r\n        <button class=\"btn btn-outline-secondary btn-sm\" type=\"button\"\r\n            data-bind=\"click: $parent.moveToMostRecent.bind($parent)\">\r\n            <span class='fas fa-step-forward'></span> Most Recent\r\n        </button>\r\n    </form>\r\n</div>\r\n`;\r\n\r\nko.components.register(\"submission-history-vcr\", {\r\n    template: SubmissionHistoryVCR\r\n});\r\n\r\nexport enum WatchGroupingMode {\r\n    NONE, ASSIGNMENT, USER\r\n}\r\n\r\n\r\nexport class Watcher {\r\n    // Search options\r\n    courseId: KnockoutObservable<number>;\r\n    assignmentIds: string;\r\n    userIds: string;\r\n    userSet: KnockoutObservable<ModelSet>;\r\n    assignmentSet: KnockoutObservable<ModelSet>;\r\n\r\n    // Stores\r\n    userStore: UserStore;\r\n    assignmentStore: AssignmentStore;\r\n\r\n    // Actual data\r\n    submissions: KnockoutObservableArray<SubmissionHistory>;\r\n    cauToSubmission: { [cau: string]: SubmissionHistory};\r\n\r\n    // Cosmetics\r\n    grouping: KnockoutObservable<WatchGroupingMode>;\r\n\r\n\r\n    constructor(data: any) {\r\n        // TODO: Handle userIds to default load some students in a new set\r\n        this.courseId = ko.observable<number>(data.courseId);\r\n        this.userIds = data.userIds;\r\n        this.assignmentIds = data.assignmentIds;\r\n        this.userSet = ko.observable<ModelSet>(null);\r\n        this.assignmentSet = ko.observable<ModelSet>(null);\r\n        this.grouping = ko.observable<WatchGroupingMode>(WatchGroupingMode.NONE);\r\n        this.submissions = ko.observableArray<SubmissionHistory>([]);\r\n        this.cauToSubmission = {};\r\n        this.userStore = new UserStore(data.courseId, [], []);\r\n        this.assignmentStore = new AssignmentStore(data.courseId, [], []);\r\n        //$(this.getLatest.bind(this));\r\n    }\r\n\r\n    addLogs(logJsons: LogJson[]) {\r\n        let sortedLogs: Record<string, Log[]> = {};\r\n        for (let i=0; i<logJsons.length; i+=1) {\r\n            let log: Log = new Log(logJsons[i]);\r\n            let submissionId = log.getAsSubmissionKey();\r\n            if (!(submissionId in this.cauToSubmission)) {\r\n                let user = this.userStore.getInstance(log.subjectId());\r\n                let assignment = this.assignmentStore.getInstance(log.assignmentId());\r\n                this.cauToSubmission[submissionId] = new SubmissionHistory(log, user, assignment);\r\n                this.submissions.push(this.cauToSubmission[submissionId]);\r\n            }\r\n            if (!(submissionId in sortedLogs)) {\r\n                sortedLogs[submissionId] = [];\r\n            }\r\n            sortedLogs[submissionId].push(log);\r\n        }\r\n        for (let submissionId in sortedLogs) {\r\n            this.cauToSubmission[submissionId].addLogs(sortedLogs[submissionId]);\r\n        }\r\n    }\r\n\r\n    addSubmissions(submissionJsons: SubmissionJson[]) {\r\n        for (let i=0; i<submissionJsons.length; i+=1) {\r\n            let submission: Submission = new Submission(submissionJsons[i]);\r\n            let submissionId = submission.getAsSubmissionKey();\r\n            console.log(this.cauToSubmission[submissionId]);\r\n            this.cauToSubmission[submissionId].submission = submission;\r\n        }\r\n    }\r\n\r\n    getLatest() {\r\n        localStorage.setItem(\"BLOCKPY_SERVER_USERIDS\", this.userSet().getStored());\r\n        localStorage.setItem(\"BLOCKPY_SERVER_ASSIGNMENTIDS\", this.assignmentSet().getStored());\r\n        ajax_get(\"blockpy/load_history\", {\r\n            assignment_id: this.assignmentSet().getIds(),\r\n            course_id: this.courseId(),\r\n            user_id: this.userSet().getIds(),\r\n            with_submission: true\r\n        }).then((data) => {\r\n            if (data.success) {\r\n                this.addLogs(data.history);\r\n                this.addSubmissions(data.submissions);\r\n            } else {\r\n                console.error(data);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport const WatcherTemplate = `\r\n    <div>\r\n    User(s):\r\n        <user-set-selector params=\"store: userStore, modelSet: userSet, default: userIds\"></user-set-selector>\r\n    </div>\r\n    <div class=\"mt-4 mb-4\">\r\n    Assignment(s):\r\n        <assignment-set-selector params=\"store: assignmentStore, modelSet: assignmentSet, default: assignmentIds\"></assignment-set-selector>\r\n    </div>\r\n    <div class=\"mb-4 mt-4\">\r\n        <button class=\"btn btn-primary\" data-bind=\"click: getLatest\">Load Events</button>\r\n    </div>\r\n    <div>\r\n        <div data-bind=\"foreach: submissions\" class=\"row\">\r\n            <div class=\"col-sm-6 mb-4\">\r\n            <div class=\"\">\r\n                <button class=\"btn btn-outline-secondary mr-2 btn-sm\" type=\"button\"\r\n                    data-bind=\"click: switchWatchMode\">\r\n                    <span class='fas' data-bind=\"class: getWatchModeClass\"></span>\r\n                </button>\r\n                <!-- ko if: states().length>0 -->\r\n                    <submission-history-vcr></submission-history-vcr>\r\n                    <submission-history-card params=\"currentState: currentState, watchMode: watchMode, user: user, assignment: assignment\"></submission-history-card>\r\n                <!-- /ko -->\r\n            </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n`;\r\n\r\nko.components.register(\"watcher\", {\r\n    viewModel: Watcher,\r\n    template: WatcherTemplate\r\n});\r\n\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(951);\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};"],"sourceRoot":""}