{"version":3,"sources":["webpack://frontend/external \"ko\"","webpack://frontend/external \"CodeMirror\"","webpack://frontend/external \"hljs\"","webpack://frontend/./components/plugins.ts","webpack://frontend/./components/ajax.ts","webpack://frontend/./components/dates.ts","webpack://frontend/./models/model.ts","webpack://frontend/./models/assignment_group.ts","webpack://frontend/./components/group_list.ts","webpack://frontend/./models/user.ts","webpack://frontend/./models/assignment.ts","webpack://frontend/./models/log.ts","webpack://frontend/./components/model_selector.ts","webpack://frontend/./models/submission.ts","webpack://frontend/./components/watcher.ts","webpack://frontend/./models/course.ts","webpack://frontend/./components/editor.ts","webpack://frontend/./models/review.ts","webpack://frontend/./components/server.ts","webpack://frontend/./components/course_list.ts","webpack://frontend/webpack/bootstrap","webpack://frontend/webpack/startup","webpack://frontend/webpack/runtime/define property getters","webpack://frontend/webpack/runtime/hasOwnProperty shorthand","webpack://frontend/webpack/runtime/make namespace object"],"names":["ko","CodeMirror","hljs","pushObservableArray","array","values","underlyingArray","valueWillMutate","valueHasMutated","init","element","valueAccessor","options","editor","on","cm","readOnly","value","getValue","wrapper","getWrapperElement","parentNode","removeChild","update","cur","getCursor","setValue","setCursor","refresh","languages","code","innerHTML","trim","TwoWayReadonlyMap","map","this","Map","lefts","rights","member","push","set","key","get","last","length","ajax_get","url","data","$","window","allBindingAccessors","selectedOptions","multiSelect","config","afterSelect","i","afterDeselect","remove","console","log","forEach","option","id","text","optionsText","monthNames","weekDays","isSameDay","first","second","getDate","getMonth","getFullYear","prettyPrintDateTime","timeString","undefined","now","Date","past","toLocaleTimeString","date","getDay","prettyPrintDate","parseInt","formatDuration","earlier","later","timeEarlier","timeLater","delta","Math","abs","getTime","sign","years","floor","days","hours","minutes","seconds","daysDisplay","hoursDisplay","minutesDisplay","secondsDisplay","Model","FIELDS","dateModified","date_modified","dateCreated","date_created","prettyDateCreated","prettyDateModified","left","right","dateCreatedSorter","ModelStore","server","courseId","initialIds","initialData","delayedData","timer","instance","newInstance","getInstance","delayedInstance","makeEmptyInstance","delayLoadInstance","clearTimeout","queueFinishDelay","finishDelayedLoads","setTimeout","bind","ids","Object","keys","payload","getPayload","getUrl","Promise","resolve","reject","then","success","created","GET_FIELD","modelJson","cleanData","models","fromJson","removeDelayedInstances","error","filter","includes","AssignmentGroup","super","koFromJson","AssignmentGroupStore","assignment_group_ids","getDelayedIds","join","course_id","name","position","forked_id","forked_version","owner_id","version","viewModel","template","GroupList","groups","ready","load","g","Role","User","firstName","lastName","primaryRole","roles","role","components","split","str","charAt","toUpperCase","slice","cleanRole","title","displayMode","UserDisplayMode","LAST_FIRST","EMAIL","email","BLOCKPY_ID","FIRST_LAST","removeAll","result","toJson","UserStore","sortMode","localStorage","getItem","subscribe","setItem","displayOptions","localeCompare","sort","sortMethod","user_ids","u","first_name","last_name","Assignment","group","type","toLowerCase","AssignmentStore","assignment_ids","instructions","reviewed","hidden","public","ip_ranges","settings","on_run","on_change","on_eval","starting_code","extra_instructor_files","extra_starting_files","assignments","assignment","assignmentGroupStore","Log","subjectId","assignmentId","eventType","clientTimestamp","REMAP_EVENT_TYPES","ModelSet","params","default","getIds","SelectMode","ModelSetSelector","showAllThreshold","nameAttr","store","available","isLoading","getAllAvailable","sets","loadDefault","loadGroups","selectMode","ALL","singleSet","singleOption","loadFromLocalStorage","item","currentSet","modelSet","editorVisible","bulkEditor","showAll","SET","SINGLE","changes","some","change","status","newOptions","startAdding","prettyResult","getLocalStorageKey","getDefaultGroupSetName","JSON","parse","newSet","getNewGroupSetName","model","a1","a2","superSet","areArraysEqualSets","getItemGroups","children","confirm","deleted","saveToLocalStorage","modelSetJson","stringify","m","MODEL_SET_SELECTOR_HTML","setName","ModelSelectorItemGroup","SubmissionStatus","GradingStatus","WatchMode","FeedbackMode","WatchGroupingMode","ServiceType","CourseVisibility","a","Submission","userId","expected","gradingStatus","submissionStatus","SubmissionStore","submission_ids","assignment_group_id","assignment_id","assignment_version","correct","endpoint","extra_files","grading_status","NOT_READY","score","submission_status","INITIALIZED","user_id","launchEditor","submission","form","document","createElement","setAttribute","formData","user","IN_PROGRESS","hiddenField","appendChild","body","submit","SubmissionState","current","makeNextState","when","watchMode","SUMMARY","lastEdit","lastRan","lastOpened","other","friendly","feedback","system","completed","mode","fullscreen","copyState","message","category","label","SubmissionHistory","states","currentStateIndex","feedbackMode","FEEDBACK","isVcrActive","getWatchModeClass","FULL","currentState","getCurrentStateIndex","isSummary","isFull","logs","latestState","nextState","with_submission","latestLogId","addLogs","history","submissions","event","selector","getSelector","empty","optGroup","entry","formattedDate","attr","append","displayed","loadHistorySelector","SYSTEM","BOTH","HIDE","target","closest","find","max","currentId","isEditEvent","min","Watcher","userIds","assignmentIds","userSet","assignmentSet","grouping","NONE","cauToSubmission","hasFailed","userStore","logJsons","sortedLogs","submissionId","getAsSubmissionKey","assignmentStore","submissionJsons","getStored","setGroupingMode","clearData","addSubmissions","fail","arguments","assignmentCount","userCount","USER","ASSIGNMENT","Course","CourseStore","external_id","service","term","visibility","Review","ReviewStore","author_id","comment","generic","location","submission_id","submission_version","tag_id","Server","users","courseStore","courseIds","courses","assignmentGroupIds","assignmentGroups","reviewStore","reviewIds","reviews","submissionStore","submissionIds","__webpack_module_cache__","__webpack_require__","moduleId","exports","module","__webpack_modules__","d","definition","o","defineProperty","enumerable","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag"],"mappings":"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","file":"frontend.js","sourcesContent":["const __WEBPACK_NAMESPACE_OBJECT__ = ko;","const __WEBPACK_NAMESPACE_OBJECT__ = CodeMirror;","const __WEBPACK_NAMESPACE_OBJECT__ = hljs;","import * as ko from 'knockout';\r\nimport * as CodeMirror from 'codemirror';\r\nimport * as hljs from 'highlight.js';\r\nimport * as select2 from 'select2';\r\n//import 'select2';\r\n\r\n// Knockout codemirror binding handler\r\nko.bindingHandlers.codemirror = {\r\n    init: function (element, valueAccessor) {\r\n        let options = ko.unwrap(valueAccessor());\r\n        element.editor = CodeMirror(element, ko.toJS(options));\r\n        element.editor.on('change', function (cm: any) {\r\n            if (!options.readOnly) {\r\n                options.value(cm.getValue());\r\n            }\r\n        });\r\n\r\n        ko.utils.domNodeDisposal.addDisposeCallback(element, function () {\r\n            let wrapper = element.editor.getWrapperElement();\r\n            wrapper.parentNode.removeChild(wrapper);\r\n        });\r\n    },\r\n    update: function (element, valueAccessor) {\r\n        let value = ko.toJS(valueAccessor()).value;\r\n        if (element.editor) {\r\n            let cur = element.editor.getCursor();\r\n            element.editor.setValue(value);\r\n            element.editor.setCursor(cur);\r\n            element.editor.refresh();\r\n        }\r\n    }\r\n};\r\n\r\n// Highlighted Code Area\r\nhljs.configure({\r\n    languages: [\"python\"]\r\n})\r\nko.bindingHandlers.highlightedCode = {\r\n    update: function (element, valueAccessor) {\r\n        let code = ko.unwrap(valueAccessor());\r\n        element.innerHTML = code;\r\n        hljs.highlightBlock(element);\r\n        if (code.trim()) {\r\n            // @ts-ignore\r\n            hljs.lineNumbersBlock(element);\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * https://github.com/knockout/knockout/issues/416#issuecomment-4877853\r\n * Adds a new function to the ObservableArray class to efficiently push multiple values\r\n * @param valuesToPush\r\n */\r\nexport function pushObservableArray<T>(array: KnockoutObservableArray<T>, values: T[]): KnockoutObservableArray<T> {\r\n    let underlyingArray = array();\r\n    array.valueWillMutate();\r\n    ko.utils.arrayPushAll(underlyingArray, values);\r\n    array.valueHasMutated();\r\n    return array;\r\n}\r\n\r\n// https://stackoverflow.com/a/60766129\r\nexport class TwoWayReadonlyMap {\r\n    map: Map<string, string>;\r\n    lefts: string[];\r\n    rights: string[];\r\n\r\n    constructor(map: Record<string, string>) {\r\n        this.map = new Map<string, string>();\r\n        this.lefts = [];\r\n        this.rights = [];\r\n        for (let member in map) {\r\n            this.lefts.push(member);\r\n            this.rights.push(map[member]);\r\n            this.map.set(member, map[member]);\r\n            this.map.set(map[member], member);\r\n        }\r\n    }\r\n\r\n    get(key: string) {\r\n        return this.map.get(key);\r\n    }\r\n}\r\n\r\nexport function capitalize(str: string): string {\r\n    if (typeof str !== 'string') {\r\n        return '';\r\n    }\r\n    return str.charAt(0).toUpperCase() + str.slice(1);\r\n}\r\n\r\nexport function last<T>(array: T[]): T {\r\n    return array[array.length - 1];\r\n}\r\n\r\n/*\r\nko.bindingHandlers.select2 = {\r\n    after: [\"options\", \"value\"],\r\n    init: function (el, valueAccessor, allBindingsAccessor, viewModel) {\r\n        $(el).select2(ko.unwrap(valueAccessor()));\r\n        ko.utils.domNodeDisposal.addDisposeCallback(el, function () {\r\n            $(el).select2('destroy');\r\n        });\r\n    },\r\n    update: function (el, valueAccessor, allBindingsAccessor, viewModel) {\r\n        var allBindings = allBindingsAccessor();\r\n        var select2 = $(el).data(\"select2\");\r\n        if (\"value\" in allBindings) {\r\n            var newValue = \"\" + ko.unwrap(allBindings.value);\r\n            if ((allBindings.select2.multiple || el.multiple) && newValue.constructor !== Array) {\r\n                // @ts-ignore\r\n                select2.val([newValue.split(\",\")]);\r\n            }\r\n            else {\r\n                // @ts-ignore\r\n                select2.val([newValue]);\r\n            }\r\n        }\r\n    }\r\n};*/\r\n\r\n\r\nko.bindingHandlers.multiselect = {\r\n    init: function (element, valueAccessor, allBindingAccessors) {\r\n        let options = valueAccessor();\r\n\r\n        // Pay attention to model updates\r\n        ko.bindingHandlers['options'].update(element, () => options.options, allBindingAccessors);\r\n        // TypeScript thinks that this bindingHandler has a smaller number of args for some reason\r\n        // @ts-ignore\r\n        ko.bindingHandlers['selectedOptions'].init(element, () => options.selectedOptions, allBindingAccessors);\r\n        // @ts-ignore\r\n        ko.bindingHandlers['selectedOptions'].update(element, () => options.selectedOptions, allBindingAccessors);\r\n\r\n        // @ts-ignore\r\n        $(element).multiSelect(options.config);\r\n\r\n\r\n        //make view model know about select/deselect changes\r\n        // @ts-ignore\r\n        $(element).multiSelect({\r\n            afterSelect: function (values: any) {\r\n                for (let i = 0; i < values.length; i += 1) {\r\n                    options.selectedOptions.push(values[i]);\r\n                }\r\n            }, afterDeselect: function (values: any) {\r\n                for (let i = 0; i < values.length; i += 1) {\r\n                    options.selectedOptions.remove(values[i]);\r\n                }\r\n            }\r\n        });\r\n    },\r\n    update: function (element, valueAccessor, allBindingAccessors) {\r\n        let options = valueAccessor();\r\n        console.log(options.options(), options.selectedOptions());\r\n        //update html if items set through code\r\n        // @ts-ignore\r\n        ko.bindingHandlers.selectedOptions.update(element, () => options.selectedOptions, allBindingAccessors);\r\n        options.options().forEach((option: any) => {\r\n            // @ts-ignore\r\n            $(element).multiSelect(\"addOption\", {value: option.id, text: option[options.optionsText]()})\r\n        });\r\n\r\n        // @ts-ignore\r\n        $(element).multiSelect(\"refresh\");\r\n    }\r\n};\r\n\r\n/** assumes array elements are primitive types\r\n * check whether 2 arrays are equal sets.\r\n * @param  {} a1 is an array\r\n * @param  {} a2 is an array\r\n */\r\nexport function areArraysEqualSets(a1: number[], a2: number[]) {\r\n    const superSet: Record<number, number> = {};\r\n    for (const i of a1) {\r\n        superSet[i] = 1;\r\n    }\r\n\r\n    for (const i of a2) {\r\n        if (!superSet[i]) {\r\n            return false;\r\n        }\r\n        superSet[i] = 2;\r\n    }\r\n\r\n    for (let i in superSet) {\r\n        if (superSet[i] === 1) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\n/** Simple binding for handling optgroups **/\r\nko.bindingHandlers.option = {\r\n    update: function(element, valueAccessor) {\r\n       let value = ko.utils.unwrapObservable(valueAccessor());\r\n       ko.selectExtensions.writeValue(element, value);\r\n    }\r\n};","\r\ndeclare global {\r\n    var $URL_ROOT: string;\r\n}\r\n\r\nexport function ajax_get(url: string, data: any) {\r\n    return $.get(window[\"$URL_ROOT\"]+url, data);\r\n}\r\n\r\nexport function hideOverlay() {\r\n    $('.overlay').hide();\r\n}\r\nexport function showOverlay() {\r\n    $('.overlay').show();\r\n}","const monthNames = [\r\n    \"Jan\", \"Feb\", \"Mar\",\r\n    \"Apr\", \"May\", \"June\", \"July\",\r\n    \"Aug\", \"Sept\", \"Oct\",\r\n    \"Nov\", \"Dec\"\r\n];\r\nconst weekDays = [\r\n    \"Sun\", \"Mon\", \"Tue\",\r\n    \"Wed\", \"Thu\", \"Fri\",\r\n    \"Sat\"\r\n];\r\n\r\nexport function isSameDay(first: Date, second: Date) {\r\n    return first.getDate() === second.getDate() &&\r\n        first.getMonth() === second.getMonth() &&\r\n        first.getFullYear() === second.getFullYear();\r\n}\r\n\r\n/**\r\n * Helper function to parse a date/time string and rewrite it as something\r\n * more human readable.\r\n * @param {String} timeString - the string representation of time (\"YYYYMMDD HHMMSS\")\r\n * @returns {String} - A human-readable time string.\r\n */\r\nexport function prettyPrintDateTime(timeString: string|number): string {\r\n    /*let year = timeString.slice(0, 4),\r\n        month = parseInt(timeString.slice(4, 6), 10)-1,\r\n        day = timeString.slice(6, 8),\r\n        hour = timeString.slice(9, 11),\r\n        minutes = timeString.slice(11, 13),\r\n        seconds = timeString.slice(13, 15);*/\r\n    // TODO: Handle timezones correctly\r\n    if (timeString === undefined) {\r\n        return \"Undefined Time\";\r\n    }\r\n    let now = new Date();\r\n    let past = new Date(timeString);\r\n    if (isSameDay(now, past)) {\r\n        return \"Today at \"+past.toLocaleTimeString();\r\n    } else {\r\n        let dayStr = weekDays[past.getDay()];\r\n        let monthStr = monthNames[past.getMonth()];\r\n        let date = dayStr + \", \" + monthStr + \" \" + past.getDate();\r\n        if (now.getFullYear() === past.getFullYear()) {\r\n            return date + \" at \"+past.toLocaleTimeString();\r\n        } else {\r\n            return date + \", \"+past.getFullYear() + \" at \"+past.toLocaleTimeString();\r\n        }\r\n    }\r\n}\r\n\r\nexport function prettyPrintDateTimeString(timeString: string): string {\r\n    /*let year = timeString.slice(0, 4),\r\n        month = parseInt(timeString.slice(4, 6), 10)-1,\r\n        day = timeString.slice(6, 8),\r\n        hour = timeString.slice(9, 11),\r\n        minutes = timeString.slice(11, 13),\r\n        seconds = timeString.slice(13, 15);*/\r\n    // TODO: Handle timezones correctly\r\n    return prettyPrintDateTime(parseInt(timeString, 10));\r\n}\r\n\r\nexport function prettyPrintDate(timeString: string): string {\r\n    if (timeString === undefined) {\r\n        return \"Undefined Time\";\r\n    }\r\n    let now = new Date();\r\n    let past = new Date(parseInt(timeString, 10));\r\n    if (isSameDay(now, past)) {\r\n        return \"Today\";\r\n    } else {\r\n        let dayStr = weekDays[past.getDay()];\r\n        let monthStr = monthNames[past.getMonth()];\r\n        let date = dayStr + \", \" + monthStr + \" \" + past.getDate();\r\n        if (now.getFullYear() === past.getFullYear()) {\r\n            return date;\r\n        } else {\r\n            return date + \", \"+past.getFullYear();\r\n        }\r\n    }\r\n}\r\n\r\nexport function prettyPrintTime(timeString: string): string {\r\n    if (timeString === undefined) {\r\n        return \"Undefined Time\";\r\n    }\r\n    let past = new Date(parseInt(timeString, 10));\r\n    return past.toLocaleTimeString();\r\n}\r\n\r\nexport function formatDuration(earlier: string, later: string) {\r\n    if (earlier === null) {\r\n        return \"Never\";\r\n    }\r\n    let timeEarlier = new Date(parseInt(earlier, 10));\r\n    let timeLater = later === null ? new Date() : new Date(parseInt(later, 10));\r\n    let delta = Math.abs(timeLater.getTime() - timeEarlier.getTime())/1000;\r\n    let sign = timeLater.getTime() > timeEarlier.getTime() ? ' earlier' : ' later';\r\n\r\n    let years = Math.floor(delta / (365*3600*24));\r\n    let days = Math.floor(delta % (365*3600*24) / (3600*24));\r\n    let hours = Math.floor(delta % (3600*24) / 3600);\r\n    let minutes = Math.floor(delta % 3600 / 60);\r\n    let seconds = Math.floor(delta % 60);\r\n\r\n    let yearsDisplay = `${years} year${years!==1? 's': ''}`;\r\n    let daysDisplay = `${days} day${days!==1? 's': ''}`;\r\n    let hoursDisplay = `${hours} hour${hours!==1? 's': ''}`;\r\n    let minutesDisplay = `${minutes} minute${minutes!==1? 's': ''}`;\r\n    let secondsDisplay = `${seconds} second${seconds!==1? 's': ''}`;\r\n\r\n    if (delta < 1) {\r\n        return \"At this time\";\r\n    } else if (delta < 60) {\r\n        return secondsDisplay+sign;\r\n    } else if (delta < 60*10) {\r\n        return minutesDisplay+\", \"+secondsDisplay+sign;\r\n    } else if (delta < 60*60) {\r\n        return minutesDisplay+sign;\r\n    } else if (delta < 24*60*60) {\r\n        return hoursDisplay+\", \"+minutesDisplay+sign;\r\n    } else if (delta < 365*24*60*60) {\r\n        return daysDisplay+\", \"+hoursDisplay+sign;\r\n    } else {\r\n        return yearsDisplay+\", \"+daysDisplay+sign;\r\n    }\r\n}","import * as ko from 'knockout';\r\nimport {TwoWayReadonlyMap} from \"../components/plugins\";\r\nimport {ajax_get} from \"../components/ajax\";\r\nimport {prettyPrintDateTime} from \"../components/dates\";\r\nimport {Server} from \"../components/server\";\r\n\r\nexport interface ModelJson {\r\n    id: number;\r\n    date_modified: string;\r\n    date_created: string;\r\n}\r\n\r\n\r\nexport abstract class Model<T extends ModelJson> {\r\n    id: number;\r\n    dateCreated: ko.Observable<string>;\r\n    dateModified: ko.Observable<string>;\r\n    private readonly prettyDateCreated: KnockoutReadonlyComputed<string>;\r\n    private readonly prettyDateModified: KnockoutReadonlyComputed<string>;\r\n\r\n    FIELDS: TwoWayReadonlyMap = new TwoWayReadonlyMap({\r\n        \"date_modified\": \"dateModified\",\r\n        \"date_created\": \"dateCreated\"\r\n    });\r\n\r\n    protected constructor(data: T) {\r\n        this.id = data.id;\r\n        this.dateModified = ko.observable(data.date_modified);\r\n        this.dateCreated = ko.observable(data.date_created);\r\n        this.prettyDateCreated = ko.pureComputed(() => prettyPrintDateTime(this.dateCreated()));\r\n        this.prettyDateModified = ko.pureComputed(() => prettyPrintDateTime(this.dateModified()));\r\n    }\r\n\r\n    fromJson(data: T) {\r\n        this.FIELDS.lefts.forEach((left) => {\r\n            // @ts-ignore\r\n            this[this.FIELDS.get(left)](data[left]);\r\n        });\r\n    }\r\n\r\n    koFromJson(data: T) {\r\n        this.FIELDS.lefts.forEach((left) => {\r\n            // @ts-ignore\r\n            this[this.FIELDS.get(left)] = ko.observable(data[left]);\r\n        });\r\n    }\r\n\r\n    toJson(): T {\r\n        let data = {id: this.id};\r\n        // @ts-ignore\r\n        this.FIELDS.rights.forEach((right) => data[this.FIELDS.get(right)]=this[right]());\r\n        return <T>data;\r\n    }\r\n\r\n}\r\n\r\n\r\nexport function dateCreatedSorter<J extends ModelJson, L extends Model<J>>(left: L, right: L): number {\r\n    return left.dateCreated() === right.dateCreated() ? 0\r\n         : left.dateCreated() < right.dateCreated() ? -1\r\n         : 1;\r\n}\r\n\r\n\r\nexport abstract class ModelStore<J extends ModelJson, T extends Model<J>> {\r\n    protected readonly data: Record<number, T>;\r\n    protected courseId: number|null;\r\n\r\n    private timer: number;\r\n    private delayedData: T[];\r\n\r\n    protected readonly server: Server;\r\n\r\n    constructor(server: Server, courseId: number|null, initialIds: number[], initialData: J[]) {\r\n        this.data = {};\r\n        this.server = server;\r\n        this.courseId = courseId;\r\n        this.delayedData = [];\r\n        this.timer = null;\r\n        if (initialData !== undefined) {\r\n            initialData.map((instance: J) => this.newInstance(instance));\r\n        }\r\n        if (initialIds !== undefined) {\r\n            initialIds.map((id: number) => this.getInstance(id));\r\n        }\r\n    }\r\n\r\n    getInstance(id: number): T {\r\n        if (this.data[id] !== undefined) {\r\n            return this.data[id];\r\n        } else {\r\n            let delayedInstance = this.makeEmptyInstance(id);\r\n            this.delayLoadInstance(delayedInstance);\r\n            this.data[id] = delayedInstance;\r\n            return delayedInstance;\r\n        }\r\n    }\r\n\r\n    delayLoadInstance(instance: T) {\r\n        clearTimeout(this.timer);\r\n        this.delayedData.push(instance);\r\n        this.queueFinishDelay();\r\n    }\r\n\r\n    queueFinishDelay() {\r\n        if (this.delayedData.length > 25) {\r\n            this.finishDelayedLoads();\r\n        } else if (this.delayedData.length > 0) {\r\n            this.timer = window.setTimeout(this.finishDelayedLoads.bind(this), 1000);\r\n        }\r\n    }\r\n\r\n    getInstances(ids: number[]): T[] {\r\n        return ids.map(this.getInstance.bind(this));\r\n    }\r\n\r\n    getLoaded(): T[] {\r\n        // @ts-ignore\r\n        return Object.keys(this.data).map((key: number) => this.data[key]);\r\n    }\r\n\r\n    getAllAvailable() {\r\n        let payload = this.getPayload();\r\n        let url = this.getUrl();\r\n        return new Promise((resolve, reject) => {\r\n            ajax_get(url, payload).then((data) => {\r\n                if (data.success) {\r\n                    let results = data[this.GET_FIELD];\r\n                    let created = results.map( (modelJson: J) => {\r\n                        return this.newInstance(modelJson);\r\n                    });\r\n                    resolve(this.cleanData(created));\r\n                } else {\r\n                    reject(data);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    cleanData(models: T[]): T[] {\r\n        return models;\r\n    }\r\n\r\n    /**\r\n     * Start keeping track of the given instance\r\n     * @param instance\r\n     */\r\n    trackInstance(instance: T): T {\r\n        this.data[instance.id] = instance;\r\n        return instance;\r\n    }\r\n\r\n    /**\r\n     * Create a new instance from the model and track it\r\n     * @param modelJson\r\n     */\r\n    newInstance(modelJson: J): T {\r\n        this.data[modelJson.id] = this.makeEmptyInstance(modelJson.id);\r\n        this.data[modelJson.id].fromJson(modelJson);\r\n        return this.data[modelJson.id];\r\n    }\r\n\r\n    abstract getUrl(): string;\r\n    abstract getLocalStorageKey(): string;\r\n    abstract getPayload(): any;\r\n    abstract makeEmptyInstance(id: number): T;\r\n    abstract GET_FIELD: string;\r\n\r\n    sortMethod(left: T, right: T): number {\r\n        return 0;\r\n    }\r\n\r\n    finishDelayedLoads() {\r\n        let payload = this.getPayload();\r\n        let url = this.getUrl();\r\n        this.delayedData.length= 0;\r\n        return ajax_get(url, payload).then((data) => {\r\n           if (data.success) {\r\n               let results = data[this.GET_FIELD];\r\n               let created = results.map( (modelJson: J) => {\r\n                   this.data[modelJson.id].fromJson(modelJson);\r\n                   return modelJson.id;\r\n               });\r\n               this.removeDelayedInstances(created);\r\n           } else {\r\n               console.error(data);\r\n           }\r\n        });\r\n    }\r\n\r\n    protected getDelayedIds(): number[] {\r\n        return this.delayedData.map((instance: T) => instance.id);\r\n    }\r\n\r\n    removeDelayedInstances(ids: number[]) {\r\n        this.delayedData = this.delayedData.filter((delayedInstance: T) => !ids.includes(delayedInstance.id));\r\n        this.queueFinishDelay();\r\n    }\r\n}","import * as ko from 'knockout';\r\nimport {Model, ModelJson, ModelStore} from \"./model\";\r\nimport {capitalize, TwoWayReadonlyMap} from \"../components/plugins\";\r\nimport {ajax_get} from \"../components/ajax\";\r\n\r\nexport interface AssignmentGroupJson extends ModelJson {\r\n    id: number;\r\n    name: string;\r\n    url: string;\r\n\r\n    position: number;\r\n\r\n    forked_id: number;\r\n    forked_version: number;\r\n    owner_id: number;\r\n    course_id: number;\r\n    version: number;\r\n}\r\n\r\nexport class AssignmentGroup extends Model<AssignmentGroupJson> {\r\n    id: number;\r\n    name: KnockoutObservable<string>;\r\n    url: KnockoutObservable<string>;\r\n    position: KnockoutObservable<number>;\r\n    forkedId: KnockoutObservable<number>;\r\n    forkedVersion: KnockoutObservable<number>;\r\n    ownerId: KnockoutObservable<number>;\r\n    courseId: KnockoutObservable<number>;\r\n    version: KnockoutObservable<number>;\r\n\r\n    FIELDS: TwoWayReadonlyMap = new TwoWayReadonlyMap({\r\n        \"name\": \"name\",\r\n        \"url\": \"url\",\r\n        \"position\": \"position\",\r\n        \"forked_id\": \"forkedId\",\r\n        \"forked_version\": \"forkedVersion\",\r\n        \"owner_id\": \"ownerId\",\r\n        \"course_id\": \"courseId\",\r\n        \"version\": \"version\",\r\n        \"date_modified\": \"dateModified\",\r\n        \"date_created\": \"dateCreated\"\r\n    });\r\n\r\n    constructor(data: AssignmentGroupJson) {\r\n        super(data);\r\n        this.koFromJson(data);\r\n    }\r\n}\r\n\r\nexport class AssignmentGroupStore extends ModelStore<AssignmentGroupJson, AssignmentGroup> {\r\n    GET_FIELD: string = \"assignment_groups\";\r\n\r\n    getPayload(): any {\r\n        return {\r\n            assignment_group_ids: this.getDelayedIds().join(\",\"),\r\n            course_id: this.courseId\r\n        };\r\n    }\r\n\r\n    getUrl(): string {\r\n        return \"assignment_groups/get_ids\";\r\n    }\r\n\r\n    makeEmptyInstance(id: number): AssignmentGroup {\r\n        return new AssignmentGroup({\r\n            id: id,\r\n            date_created: null,\r\n            date_modified: null,\r\n            name: \"Unknown\",\r\n            url: \"\",\r\n            position: 0,\r\n            forked_id: 0,\r\n            forked_version: 0,\r\n            owner_id: 0,\r\n            course_id: 0,\r\n            version: 0\r\n        });\r\n    }\r\n\r\n    getLocalStorageKey(): string {\r\n        return `BLOCKPY_COURSE_${this.courseId}_ASSIGNMENT_GROUPS`;\r\n    }\r\n}\r\n\r\nexport const AssignmentGroupTemplate = `\r\n    <div>Assignment Group: <span data-bind=\"text: name\"></span></div>\r\n`;\r\n\r\n\r\nko.components.register(\"assignment-group\", {\r\n    viewModel: AssignmentGroup,\r\n    template: AssignmentGroupTemplate\r\n});","import * as ko from 'knockout';\r\nimport {AssignmentGroup, AssignmentGroupJson} from \"../models/assignment_group\";\r\nimport {ajax_get} from \"./ajax\";\r\n\r\nexport class GroupList {\r\n    groups: KnockoutObservableArray<AssignmentGroup>;\r\n\r\n    constructor() {\r\n        this.groups = ko.observableArray<AssignmentGroup>([]);\r\n        $().ready(() => this.load());\r\n    }\r\n\r\n    load() {\r\n        ajax_get(\"get/\", {course_id: 3}).then((data) => {\r\n            this.groups(data.groups.map( (g: AssignmentGroupJson) => new AssignmentGroup(g)));\r\n        });\r\n    }\r\n}\r\n\r\nexport const GroupListTemplate = `\r\n    <div>Groups:\r\n        <div data-bind=\"foreach: groups\">\r\n            <div data-bind=\"component: {name: 'assignment-group', params: $data}\"></assignment-group>\r\n        </div>\r\n    </div>\r\n`;\r\n\r\nko.components.register(\"group-list\", {\r\n    viewModel: GroupList,\r\n    template: GroupListTemplate\r\n});","import * as ko from 'knockout';\r\nimport {Model, ModelJson, ModelStore} from \"./model\";\r\nimport {capitalize, TwoWayReadonlyMap} from \"../components/plugins\";\r\nimport {ajax_get} from \"../components/ajax\";\r\nimport {Server} from \"../components/server\";\r\n\r\nexport interface RoleJson extends ModelJson {\r\n    id: number;\r\n    name: string;\r\n    user_id: number;\r\n    course_id: number;\r\n}\r\n\r\nexport class Role extends Model<RoleJson> {\r\n    id: number;\r\n    userId: KnockoutObservable<number>;\r\n    courseId: KnockoutObservable<number>;\r\n    name: KnockoutObservable<string>;\r\n    FIELDS: TwoWayReadonlyMap = new TwoWayReadonlyMap({\r\n        \"user_id\": \"userId\",\r\n        \"course_id\": \"courseId\",\r\n        \"name\": \"name\",\r\n        \"date_modified\": \"dateModified\",\r\n        \"date_created\": \"dateCreated\"\r\n    });\r\n\r\n    constructor(data: RoleJson) {\r\n        super(data);\r\n        this.koFromJson(data);\r\n    }\r\n}\r\n\r\nexport interface UserJson extends ModelJson {\r\n    id: number;\r\n    email: string;\r\n    first_name: string;\r\n    last_name: string;\r\n    roles?: RoleJson[];\r\n}\r\n\r\nexport function cleanRole(role: string) {\r\n    let components = role.split(\"/\");\r\n    role = components[components.length-1];\r\n    return capitalize(role);\r\n}\r\n\r\nexport class User extends Model<UserJson> {\r\n    id: number;\r\n    email: KnockoutObservable<string>;\r\n    firstName: KnockoutObservable<string>;\r\n    lastName: KnockoutObservable<string>;\r\n    roles: KnockoutObservableArray<Role>;\r\n    FIELDS: TwoWayReadonlyMap = new TwoWayReadonlyMap({\r\n        \"email\": \"email\",\r\n        \"first_name\": \"firstName\",\r\n        \"last_name\": \"lastName\"\r\n    });\r\n\r\n    // Computed fields\r\n    name: KnockoutReadonlyComputed<string>;\r\n    primaryRole: KnockoutReadonlyComputed<string>;\r\n    title: KnockoutReadonlyComputed<string>;\r\n    displayMode: KnockoutObservable<UserDisplayMode>;\r\n\r\n    constructor(data: UserJson) {\r\n        super(data);\r\n        this.koFromJson(data);\r\n        this.name = ko.pureComputed(() => {\r\n            return this.firstName() + \" \" + this.lastName();\r\n        }, this);\r\n        this.primaryRole = ko.pureComputed(() => {\r\n            if (!this.roles().length) {\r\n                return \"User\";\r\n            } else {\r\n                return this.roles().map((role: Role) => cleanRole(role.name())).join(\"/\");\r\n            }\r\n        }, this);\r\n        this.title = ko.pureComputed(() => {\r\n            if (!this.displayMode) {\r\n                return this.name();\r\n            }\r\n            switch (this.displayMode()) {\r\n                case UserDisplayMode.LAST_FIRST:\r\n                    return this.lastName() + \", \" + this.firstName();\r\n                case UserDisplayMode.EMAIL:\r\n                    return this.email();\r\n                case UserDisplayMode.BLOCKPY_ID:\r\n                    return \"\"+this.id;\r\n                default:\r\n                case UserDisplayMode.FIRST_LAST:\r\n                    return this.name();\r\n            }\r\n        }, this);\r\n    }\r\n\r\n    koFromJson(data: UserJson) {\r\n        super.koFromJson(data);\r\n        let roles: Role[] = [];\r\n        if (data.roles) {\r\n            roles = data.roles.map((role: RoleJson) => new Role(role));\r\n        }\r\n        this.roles = ko.observableArray(roles);\r\n    }\r\n\r\n    fromJson(data: UserJson) {\r\n        super.fromJson(data);\r\n        this.roles.removeAll();\r\n        if (data.roles) {\r\n            data.roles.forEach((role: RoleJson) => this.roles.push(new Role(role)));\r\n        }\r\n    }\r\n\r\n    toJson(): UserJson {\r\n        let result: UserJson = super.toJson();\r\n        result.roles = this.roles().map((role: Role) => role.toJson());\r\n        return result;\r\n    }\r\n}\r\n\r\nexport enum UserDisplayMode {\r\n    FIRST_LAST=\"First name last name\",\r\n    LAST_FIRST=\"Last name, first name\",\r\n    EMAIL=\"Email\",\r\n    BLOCKPY_ID=\"Internal BlockPy ID\",\r\n    //DATE_CREATED=\"Date created\"\r\n}\r\n\r\nexport class UserStore extends ModelStore<UserJson, User> {\r\n    GET_FIELD: string = \"users\";\r\n    private readonly displayOptions: UserDisplayMode[];\r\n    sortMode: KnockoutObservable<UserDisplayMode>;\r\n    private displayMode: KnockoutObservable<UserDisplayMode>;\r\n\r\n    constructor(server: Server, courseId: number|null, initialIds: number[], initialData: UserJson[]) {\r\n        super(server, courseId, initialIds, initialData);\r\n        this.sortMode = ko.observable(<UserDisplayMode>localStorage.getItem(`BLOCKPY_COURSE_USER_SORT_MODE`) || UserDisplayMode.FIRST_LAST);\r\n        this.displayMode = ko.observable(<UserDisplayMode>localStorage.getItem(`BLOCKPY_COURSE_USER_DISPLAY_MODE`) || UserDisplayMode.FIRST_LAST);\r\n\r\n        this.sortMode.subscribe(() => {\r\n            localStorage.setItem(`BLOCKPY_COURSE_USER_SORT_MODE`, this.sortMode());\r\n            // Notify the user set selector?\r\n        });\r\n        this.displayMode.subscribe(() => {\r\n            localStorage.setItem(`BLOCKPY_COURSE_USER_DISPLAY_MODE`, this.displayMode());\r\n        });\r\n        this.displayOptions = Object.values(UserDisplayMode);\r\n    }\r\n\r\n    sortMethod(left: User, right: User): number {\r\n        switch (this.sortMode()) {\r\n            case UserDisplayMode.FIRST_LAST:\r\n                return (left.firstName() === right.firstName()) ?\r\n                    left.lastName().localeCompare(right.lastName()) :\r\n                    left.firstName().localeCompare(right.firstName());\r\n            case UserDisplayMode.LAST_FIRST:\r\n                return (left.lastName() === right.lastName()) ?\r\n                    left.firstName().localeCompare(right.firstName()) :\r\n                    left.lastName().localeCompare(right.lastName());\r\n            case UserDisplayMode.BLOCKPY_ID:\r\n                return (left.id - right.id);\r\n            default:\r\n            case UserDisplayMode.EMAIL:\r\n                return (left.email().localeCompare(right.email()));\r\n            /*case UserDisplayMode.DATE_CREATED:\r\n                return left.dateCreated() === null ? 1 : right.dateCreated() === null ? -1 :\r\n                    (left.dateCreated().localeCompare(right.dateCreated()));*/\r\n        }\r\n    }\r\n\r\n    cleanData(models: User[]): User[] {\r\n        return models.sort(this.sortMethod.bind(this));\r\n    }\r\n\r\n    getPayload(): any {\r\n        return {\r\n            user_ids: this.getDelayedIds().join(\",\"),\r\n            course_id: this.courseId\r\n        };\r\n    }\r\n\r\n    getUrl(): string {\r\n        return \"courses/users\";\r\n    }\r\n\r\n    getLocalStorageKey(): string {\r\n        return `BLOCKPY_COURSE_${this.courseId}_USERS`;\r\n    }\r\n\r\n    makeEmptyInstance(id: number): User {\r\n        let u = new User({\r\n            id: id,\r\n            email: \"\",\r\n            date_created: null,\r\n            date_modified: null,\r\n            first_name: \"\",\r\n            last_name: \"Unknown\"\r\n        });\r\n        u.displayMode = this.displayMode;\r\n        return u;\r\n    }\r\n}\r\n\r\nexport const UserTemplate = `\r\n    <div>User: <span data-bind=\"text: title\"></span></div>\r\n`;\r\n\r\nexport const UserShortTemplate = `\r\n    <div><span data-bind=\"text: primaryRole\"></span>: <span data-bind=\"text: title\"></span></div>\r\n`;\r\n\r\nexport const UserDisplaySettingsEditor = `\r\n<div>\r\n    <button class=\"btn btn-outline-secondary btn-sm float-right\" type=\"button\"\r\n            data-toggle=\"collapse\" data-target=\"#user-display-settings\"\r\n            aria-expanded=\"false\" aria-controls=\"collapseExample\">\r\n        User Settings <span class=\"fas fa-expand-arrows-alt\"></span>\r\n    </button>\r\n    <div id=\"user-display-settings\" class=\"collapse\">\r\n    <form>\r\n        <div class=\"card card-body\">\r\n        <div class=\"form-group row\">\r\n            <label class=\"col-sm-4 col-form-label\" for=\"display-mode-select\">\r\n                Render user names as: \r\n            </label>\r\n            <div class=\"col-sm-8\">\r\n                <select id=\"display-mode-select\" class=\"custom-select\" data-bind=\"options: options, value: displayMode\"></select>\r\n            </div>\r\n        </div>\r\n        <div class=\"form-group row\">\r\n            <label class=\"col-sm-4 col-form-label\" for=\"sort-mode-select\">\r\n                Sort user names as: \r\n            </label>\r\n            <div class=\"col-md-8\">\r\n                <select id=\"sort-mode-select\" class=\"custom-select\" data-bind=\"options: options, value: sortMode\"></select>\r\n            </div>\r\n        </div>\r\n        </div>\r\n    </div>\r\n    </form>\r\n</div>\r\n`;\r\n\r\nko.components.register(\"user\", {\r\n    viewModel: User,\r\n    template: UserTemplate\r\n});\r\n\r\nko.components.register(\"user-short\", {\r\n    template: UserShortTemplate\r\n})\r\n\r\nko.components.register(\"user-display-settings-editor\", {\r\n    template: UserDisplaySettingsEditor\r\n})\r\n","import * as ko from 'knockout';\r\nimport {Model, ModelJson, ModelStore} from \"./model\";\r\nimport {capitalize, TwoWayReadonlyMap} from \"../components/plugins\";\r\nimport {ajax_get} from \"../components/ajax\";\r\nimport {AssignmentGroup, AssignmentGroupJson} from \"./assignment_group\";\r\n\r\nexport interface AssignmentJson extends ModelJson {\r\n    id: number;\r\n    name: string;\r\n    url: string;\r\n\r\n    type: string;\r\n    instructions: string;\r\n    reviewed: boolean;\r\n    hidden: boolean;\r\n    public: boolean;\r\n    ip_ranges: string;\r\n    settings: string;\r\n\r\n    on_run: string;\r\n    on_change: string;\r\n    on_eval: string;\r\n    starting_code: string;\r\n    extra_instructor_files: string;\r\n    extra_starting_files: string;\r\n\r\n    forked_id: number;\r\n    forked_version: number;\r\n    owner_id: number;\r\n    course_id: number;\r\n    version: number;\r\n}\r\n\r\nexport class Assignment extends Model<AssignmentJson> {\r\n    id: number;\r\n    name: KnockoutObservable<string>;\r\n    url: KnockoutObservable<string>;\r\n    type: KnockoutObservable<string>;\r\n    instructions: KnockoutObservable<string>;\r\n    reviewed: KnockoutObservable<boolean>;\r\n    hidden: KnockoutObservable<boolean>;\r\n    public: KnockoutObservable<boolean>;\r\n    ipRanges: KnockoutObservable<string>;\r\n    settings: KnockoutObservable<string>;\r\n    onRun: KnockoutObservable<string>;\r\n    onChange: KnockoutObservable<string>;\r\n    onEval: KnockoutObservable<string>;\r\n    startingCode: KnockoutObservable<string>;\r\n    extraInstructorFiles: KnockoutObservable<string>;\r\n    extraStartingFiles: KnockoutObservable<string>;\r\n    forkedId: KnockoutObservable<number>;\r\n    forkedVersion: KnockoutObservable<number>;\r\n    ownerId: KnockoutObservable<number>;\r\n    courseId: KnockoutObservable<number>;\r\n    version: KnockoutObservable<number>;\r\n\r\n    title: KnockoutReadonlyComputed<string>;\r\n    group: KnockoutObservable<AssignmentGroup|null>;\r\n\r\n    FIELDS: TwoWayReadonlyMap = new TwoWayReadonlyMap({\r\n        \"name\": \"name\",\r\n        \"url\": \"url\",\r\n        \"type\": \"type\",\r\n        \"instructions\": \"instructions\",\r\n        \"reviewed\": \"reviewed\",\r\n        \"hidden\": \"hidden\",\r\n        \"public\": \"public\",\r\n        \"ip_ranges\": \"ipRanges\",\r\n        \"settings\": \"settings\",\r\n        \"on_run\": \"onRun\",\r\n        \"on_change\": \"onChange\",\r\n        \"on_eval\": \"onEval\",\r\n        \"starting_code\": \"startingCode\",\r\n        \"extra_instructor_files\": \"extraInstructorFiles\",\r\n        \"extra_starting_files\": \"extraStartingFiles\",\r\n        \"forked_id\": \"forkedId\",\r\n        \"forked_version\": \"forkedVersion\",\r\n        \"owner_id\": \"ownerId\",\r\n        \"course_id\": \"courseId\",\r\n        \"version\": \"version\",\r\n        \"date_modified\": \"dateModified\",\r\n        \"date_created\": \"dateCreated\"\r\n    });\r\n\r\n    constructor(data: AssignmentJson) {\r\n        super(data);\r\n        this.group = ko.observable<AssignmentGroup>(null);\r\n        this.koFromJson(data);\r\n        this.title = ko.pureComputed<string>(() => {\r\n            if (this.type().toLowerCase() === \"maze\") {\r\n                return \"Maze \"+this.name();\r\n            } else {\r\n                return this.name();\r\n            }\r\n        }, this);\r\n    }\r\n}\r\n\r\nexport class AssignmentStore extends ModelStore<AssignmentJson, Assignment> {\r\n    GET_FIELD: string = \"assignments\";\r\n\r\n    getPayload(): any {\r\n        return {\r\n            assignment_ids: this.getDelayedIds().join(\",\"),\r\n            course_id: this.courseId\r\n        };\r\n    }\r\n\r\n    getUrl(): string {\r\n        return \"assignments/get_ids\";\r\n    }\r\n\r\n    makeEmptyInstance(id: number): Assignment {\r\n        return new Assignment({\r\n            id: id,\r\n            date_created: null,\r\n            date_modified: null,\r\n            name: \"Unknown\",\r\n            url: \"\",\r\n            type: \"unknown\",\r\n            instructions: \"\",\r\n            reviewed: false,\r\n            hidden: false,\r\n            public: false,\r\n            ip_ranges: \"\",\r\n            settings: \"\",\r\n            on_run: \"\",\r\n            on_change: \"\",\r\n            on_eval: \"\",\r\n            starting_code: \"\",\r\n            extra_instructor_files: \"\",\r\n            extra_starting_files: \"\",\r\n            forked_id: 0,\r\n            forked_version: 0,\r\n            owner_id: 0,\r\n            course_id: 0,\r\n            version: 0\r\n        });\r\n    }\r\n\r\n    getLocalStorageKey(): string {\r\n        return `BLOCKPY_COURSE_${this.courseId}_ASSIGNMENTS`;\r\n    }\r\n\r\n\r\n    getAllAvailable() {\r\n        let payload = this.getPayload();\r\n        let url = this.getUrl();\r\n        return new Promise((resolve, reject) => {\r\n            ajax_get(url, payload).then((data) => {\r\n                if (data.success) {\r\n                    let assignments: AssignmentJson[] = data.assignments;\r\n                    let groups: AssignmentGroupJson[] = data.groups;\r\n                    let created: Assignment[] = [];\r\n                    for (let i=0; i<assignments.length; i+= 1) {\r\n                        let assignment = this.newInstance(assignments[i]);\r\n                        if (groups[i] !== null) {\r\n                            let group = this.server.assignmentGroupStore.newInstance(groups[i]);\r\n                            assignment.group(group);\r\n                        }\r\n                        created.push(assignment);\r\n                    }\r\n                    resolve(created);\r\n                } else {\r\n                    reject(data);\r\n                }\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\nexport const AssignmentTemplate = `\r\n    <div>Assignment: <span data-bind=\"text: name\"></span></div>\r\n`;\r\n\r\nexport const AssignmentShortTemplate = `\r\n    <div>Assignment: <span data-bind=\"text: name\"></span> (<span data-bind=\"text: url\"></span>)</div>\r\n`;\r\n\r\nko.components.register(\"assignment\", {\r\n    viewModel: Assignment,\r\n    template: AssignmentTemplate\r\n});\r\n\r\nko.components.register(\"assignment-short\", {\r\n    template: AssignmentShortTemplate\r\n})","import * as ko from 'knockout';\r\nimport {Model, ModelJson} from \"./model\";\r\nimport {TwoWayReadonlyMap} from \"../components/plugins\";\r\n\r\nexport interface LogJson extends ModelJson {\r\n    assignment_id: number | null;\r\n    assignment_version: number;\r\n    course_id: number | null;\r\n    subject_id: number | null;\r\n    event_type: string;\r\n    file_path: string;\r\n    category: string;\r\n    label: string;\r\n    message: string;\r\n    client_timestamp: string;\r\n    client_timezone: string;\r\n}\r\n\r\nexport class Log extends Model<LogJson> {\r\n    assignmentId: ko.Observable<number | null>;\r\n    assignmentVersion: ko.Observable<number>;\r\n    courseId: ko.Observable<number | null>;\r\n    subjectId: ko.Observable<number | null>;\r\n    eventType: ko.Observable<string>;\r\n    filePath: ko.Observable<string>;\r\n    category: ko.Observable<string>;\r\n    label: ko.Observable<string>;\r\n    message: ko.Observable<string>;\r\n    clientTimestamp: ko.Observable<string>;\r\n    clientTimezone: ko.Observable<string>;\r\n\r\n    FIELDS: TwoWayReadonlyMap = new TwoWayReadonlyMap({\r\n        \"date_modified\": \"dateModified\",\r\n        \"date_created\": \"dateCreated\",\r\n        \"assignment_id\": \"assignmentId\",\r\n        \"assignment_version\": \"assignmentVersion\",\r\n        \"course_id\": \"courseId\",\r\n        \"subject_id\": \"subjectId\",\r\n        \"event_type\": \"eventType\",\r\n        \"file_path\": \"filePath\",\r\n        \"category\": \"category\",\r\n        \"label\": \"label\",\r\n        \"message\": \"message\",\r\n        \"client_timestamp\": \"clientTimestamp\",\r\n        \"client_timezone\": \"clientTimezone\"\r\n    });\r\n\r\n    constructor(data: LogJson) {\r\n        super(data);\r\n        this.koFromJson(data);\r\n    }\r\n\r\n    getAsSubmissionKey() {\r\n        return [this.courseId(), this.subjectId(), this.assignmentId()].join(\",\");\r\n    }\r\n\r\n    isEditEvent() {\r\n        return (this.eventType() === \"File.Edit\" || this.eventType() === \"File.Create\");\r\n    }\r\n\r\n    when() {\r\n        return this.clientTimestamp() || this.dateCreated();\r\n    }\r\n}\r\n\r\n// TODO: Finish processing all event types\r\nexport const REMAP_EVENT_TYPES: Record<string, string> = {\r\n    \"Session.Start\": \"Began session\",\r\n    \"X-IP.Change\": \"Changed IP address\",\r\n    \"File.Edit\": \"Edited code\",\r\n    \"File.Create\": \"Started assignment\",\r\n    \"Run.Program\": \"Ran program\",\r\n    \"Compile.Error\": \"Syntax error\",\r\n    \"X-Submission.LMS\": \"Updated grade\"\r\n};","import * as ko from 'knockout';\r\nimport {Model, ModelJson, ModelStore} from \"../models/model\";\r\nimport {User, UserJson, UserStore} from \"../models/user\";\r\nimport {areArraysEqualSets, pushObservableArray} from \"./plugins\";\r\nimport {Assignment, AssignmentJson} from \"../models/assignment\";\r\n\r\n// TODO: \"Add all\" and \"Remove all\" buttons for Set menu\r\n// TODO: If only one available, then collapse everything to just the one\r\n// TODO: Preload all groups/roles as default groups\r\n\r\ninterface ModelSetJson {\r\n    name: string;\r\n    ids: number[];\r\n    default: boolean;\r\n}\r\n\r\nexport class ModelSet {\r\n    name: KnockoutObservable<string>;\r\n    ids: KnockoutObservableArray<number>;\r\n    default: KnockoutObservable<boolean>;\r\n\r\n    constructor(params: ModelSetJson) {\r\n        this.name = ko.observable(params.name);\r\n        this.ids = ko.observableArray<number>(params.ids);\r\n        this.default = ko.observable(params.default);\r\n    }\r\n\r\n    getIds(): string {\r\n        return this.ids().join(\",\");\r\n    }\r\n\r\n    toJson(): ModelSetJson {\r\n        return {\r\n            name: this.name(),\r\n            ids: this.ids(),\r\n            default: this.default()\r\n        }\r\n    }\r\n\r\n    getStored() {\r\n        if (this.default()) {\r\n            return \"\";\r\n        } else {\r\n            return this.getIds();\r\n        }\r\n    }\r\n}\r\n\r\ninterface ModelSetSelectorJson<J extends ModelJson, T extends Model<J>> {\r\n    store: ModelStore<J, T>;\r\n    modelSet: KnockoutObservable<ModelSet>;\r\n    default: string;\r\n}\r\n\r\nexport enum SelectMode {\r\n    ALL=\"ALL\", SINGLE=\"SINGLE\", SET=\"SET\"\r\n}\r\n\r\n\r\nexport class ModelSetSelector<J extends ModelJson, T extends Model<J>> {\r\n    protected store: ModelStore<J, T>;\r\n    sets: KnockoutObservableArray<ModelSet>;\r\n    currentSet: KnockoutObservable<ModelSet>;\r\n\r\n    private readonly editorVisible: KnockoutObservable<boolean>;\r\n    private readonly selectMode: KnockoutObservable<SelectMode>;\r\n    protected readonly available: KnockoutObservableArray<T>;\r\n    private readonly selectedOptions: KnockoutObservableArray<number>;\r\n    private readonly singleSet: KnockoutObservable<ModelSet>;\r\n    private readonly singleOption: KnockoutObservable<number>;\r\n    private readonly showAll: KnockoutObservable<boolean>;\r\n    private readonly showAllThreshold: number = 7;\r\n    private bulkEditor: KnockoutObservable<string>;\r\n    protected prettyResult: KnockoutReadonlyComputed<T[]>;\r\n    private readonly isLoading: KnockoutObservable<boolean>;\r\n    protected nameAttr: string = \"name\";\r\n    protected getItemGroups: KnockoutReadonlyComputed<ModelSelectorItemGroup<J, T>[]>;\r\n\r\n    constructor(params: ModelSetSelectorJson<J, T>) {\r\n        // Create the complete list of users\r\n        this.store = params.store;\r\n        this.available = ko.observableArray<T>([]);\r\n        this.isLoading = ko.observable(true);\r\n        this.store.getAllAvailable().then((models: T[]) => {\r\n            pushObservableArray(this.available, models);\r\n            // Set first set to be ALL models\r\n            this.sets()[0].ids(models.map((u: T) => u.id));\r\n            // Load any custom user sets\r\n            this.loadDefault(params.default);\r\n            // Load in any grouped sets from the DB\r\n            this.loadGroups();\r\n            this.isLoading(false);\r\n        });\r\n\r\n        // Create single person model\r\n        this.selectMode = ko.observable<SelectMode>(SelectMode.ALL);\r\n        this.singleSet = ko.observable<ModelSet>(new ModelSet({default: false, ids: [], name: \"Just this one\"}))\r\n        this.singleOption = ko.observable<number>(null);\r\n        // Load in existing user sets, or create default one\r\n        let sets = this.loadFromLocalStorage().map((item:ModelSetJson)=> new ModelSet(item));\r\n        this.sets = ko.observableArray<ModelSet>(sets);\r\n        // Set the current user set to be the default user set\r\n        this.currentSet = params.modelSet;\r\n        this.currentSet(this.sets()[0]);\r\n        // Hide the editor\r\n        this.editorVisible = ko.observable(false);\r\n\r\n        // MultiSelect of selectable users\r\n        this.selectedOptions = ko.observableArray<number>([]);\r\n        // Bulk add emails/IDs\r\n        this.bulkEditor = ko.observable<string>(\"\");\r\n        // Default to not show all names\r\n        this.showAll = ko.observable(false);\r\n\r\n        this.currentSet.subscribe(() => {\r\n            if (this.editorVisible()) {\r\n                this.selectedOptions(this.currentSet().ids());\r\n            }\r\n        });\r\n\r\n        this.singleOption.subscribe(() => {\r\n            this.singleSet().ids([this.singleOption()]);\r\n            this.currentSet(this.singleSet());\r\n        });\r\n\r\n        this.selectMode.subscribe(() => {\r\n            switch (this.selectMode()) {\r\n                case SelectMode.ALL: case SelectMode.SET:\r\n                    this.currentSet(this.sets()[0]);\r\n                    break;\r\n                case SelectMode.SINGLE:\r\n                    this.currentSet(this.singleSet());\r\n            }\r\n        }, this);\r\n\r\n        this.selectedOptions.subscribe((changes) => {\r\n            if (this.currentSet().default()) {\r\n                let anyDeletions = changes.some((change) => change.status === \"deleted\");\r\n                if (anyDeletions) {\r\n                    let newOptions = this.selectedOptions();\r\n                    this.startAdding(newOptions);\r\n                }\r\n            }\r\n        }, this, \"arrayChange\");\r\n\r\n        this.prettyResult = ko.pureComputed<T[]>( () => {\r\n            let ids = this.currentSet().ids();\r\n            if (!this.showAll()) {\r\n                ids = ids.slice(0, this.showAllThreshold);\r\n            }\r\n            return ids.map((id: number) => this.store.getInstance(id));\r\n        }, this);\r\n    }\r\n\r\n    getDefaultGroupSetName(): string {\r\n        return \"Everything\";\r\n    }\r\n\r\n    getNewGroupSetName(): string {\r\n        return \"New set\";\r\n    }\r\n\r\n    loadFromLocalStorage(): ModelSetJson[] {\r\n        // Need CourseID for this too\r\n        let sets = localStorage.getItem(this.store.getLocalStorageKey());\r\n        if (sets === null) {\r\n            return [{name: this.getDefaultGroupSetName(), default: true, ids: []}];\r\n        } else {\r\n            return JSON.parse(sets);\r\n        }\r\n    }\r\n\r\n    startEditing() {\r\n        this.editorVisible(true);\r\n        this.selectedOptions(this.currentSet().ids());\r\n    }\r\n\r\n    startAdding(ids?: number[]): ModelSet {\r\n        let newSet = new ModelSet({name: this.getNewGroupSetName(), default: false, ids: ids || []});\r\n        this.sets.push(newSet);\r\n        this.currentSet(newSet);\r\n        this.editorVisible(true);\r\n        return newSet;\r\n    }\r\n\r\n    addAsEmails() {\r\n        // Parse the bulkEditor for emails\r\n        // Add them to the currently selectedOptions\r\n        // Clear the bulkEditor for any identified people\r\n    }\r\n\r\n    loadDefault(value: string) {\r\n        if (value === \"first\") {\r\n            this.selectMode(SelectMode.SINGLE);\r\n            this.singleOption(this.available()[0].id);\r\n        } else if (value === \"all\" || value.trim() === \"\") {\r\n            this.selectMode(SelectMode.ALL);\r\n            this.currentSet(this.sets()[0]);\r\n        } else {\r\n            let ids = value.split(\",\").map((id: string) => parseInt(id, 10));\r\n            switch (ids.length) {\r\n                case 0: case this.available().length:\r\n                    this.selectMode(SelectMode.ALL);\r\n                    this.currentSet(this.sets()[0]);\r\n                    break;\r\n                case 1:\r\n                    if (this.available().some((model: T) => model.id === ids[0])) {\r\n                        this.selectMode(SelectMode.SINGLE);\r\n                        this.singleOption(ids[0]);\r\n                    }\r\n                    break;\r\n                default:\r\n                    this.sets().forEach((modelSet: ModelSet) => {\r\n                        if (areArraysEqualSets(modelSet.ids(), ids)) {\r\n                            this.selectMode(SelectMode.SET);\r\n                            this.currentSet(modelSet);\r\n                        }\r\n                    });\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    loadGroups() {\r\n        this.getItemGroups().forEach((group: ModelSelectorItemGroup<J, T>) => {\r\n            this.sets().push(new ModelSet({\r\n                name: group.name,\r\n                default: true,\r\n                ids: group.children.map((model: T) => model.id)\r\n            }));\r\n        });\r\n    }\r\n\r\n    deleteSet(): boolean {\r\n        if (this.currentSet().default()) {\r\n            this.editorVisible(false);\r\n            return false;\r\n        }\r\n        if (confirm(\"Are you sure you want to delete this set?\")) {\r\n            let deleted = this.currentSet();\r\n            this.currentSet(this.sets()[0]);\r\n            this.sets.remove(deleted);\r\n            this.saveToLocalStorage();\r\n            this.editorVisible(false);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    saveSet() {\r\n        this.currentSet().ids(this.selectedOptions());\r\n        this.saveToLocalStorage();\r\n        this.editorVisible(false);\r\n    }\r\n\r\n    cancelEdit() {\r\n        this.editorVisible(false);\r\n    }\r\n\r\n    private saveToLocalStorage() {\r\n        let modelSetJson = JSON.stringify(this.sets().map((m: ModelSet) => m.toJson()));\r\n        localStorage.setItem(this.store.getLocalStorageKey(), modelSetJson);\r\n    }\r\n}\r\n\r\nexport const MODEL_SET_SELECTOR_HTML = (setName: string) => `\r\n    <div>\r\n        <!-- Mode Select -->\r\n        <div class=\"form-check form-check-inline\">\r\n            <input class=\"form-check-input\"\r\n                   data-bind=\"checked: selectMode, disable: isLoading\"\r\n                   type=\"radio\" name=\"${setName}\" id=\"${setName}1\" value=\"ALL\">\r\n            <label class=\"form-check-label\" for=\"${setName}1\">\r\n                All\r\n            </label>\r\n        </div>\r\n        <div class=\"form-check form-check-inline\">\r\n            <input class=\"form-check-input\"\r\n                   data-bind=\"checked: selectMode, disable: isLoading\"\r\n                   type=\"radio\" name=\"${setName}\" id=\"${setName}2\" value=\"SINGLE\">\r\n            <label class=\"form-check-label\" for=\"${setName}2\">\r\n                Only\r\n            </label>\r\n        </div>\r\n        <div class=\"form-check form-check-inline\">\r\n            <input class=\"form-check-input\"\r\n                   data-bind=\"checked: selectMode, disable: isLoading\"\r\n                   type=\"radio\" name=\"${setName}\" id=\"${setName}3\" value=\"SET\">\r\n            <label class=\"form-check-label\" for=\"${setName}3\">\r\n                ${setName} set\r\n            </label>\r\n        </div>\r\n        \r\n        <!-- Single Person -->\r\n        <div data-bind=\"if: selectMode()==='SINGLE'\">\r\n        <form class=\"form-inline\">\r\n        <select data-bind=\"foreach: getItemGroups(), value: singleOption, optionsText: 'title', optionsValue: 'id'\"\r\n                class=\"form-control custom-select ml-2 custom-select-sm\">\r\n            <optgroup data-bind=\"attr: {label: name}, foreach: children\">\r\n                <option data-bind=\"text: $data.title(), option: $data.id\"></option>\r\n            </optgroup>\r\n        </select>\r\n        </form>\r\n        </div>\r\n        \r\n        <!-- Subset -->\r\n        <div data-bind=\"if: selectMode()==='SET'\">\r\n        <form class=\"form-inline\">\r\n            Show ${setName} set:\r\n            <select data-bind=\"options: sets,\r\n                               optionsText: 'name',\r\n                               valueAllowUnset: true,\r\n                               value: currentSet\"\r\n                    class=\"form-control custom-select ml-2 custom-select-sm\">\r\n            </select>\r\n            <button type=\"button\" class=\"btn btn-sm btn-outline-secondary ml-2\"\r\n                    data-bind=\"click: startEditing, visible: !editorVisible()\">\r\n                    <span class=\"fas fa-edit\"></span>\r\n                    Edit this ${setName} set</button>\r\n            <button type=\"button\" class=\"btn btn-sm btn-outline-secondary ml-2\"\r\n                    data-bind=\"click: () => startAdding(), visible: !editorVisible()\">\r\n                    <span class=\"fas fa-plus\"></span>\r\n                    Add new ${setName} set</button>\r\n                                             \r\n        </form>\r\n        <div data-bind=\"if: editorVisible\">\r\n            <label>Current ${setName} set name:\r\n                <input type=\"text\" data-bind=\"value: currentSet().name, disable: currentSet().default\">\r\n            </label><br>\r\n           <select multiple=multiple style=\"width: 100%\"\r\n                 data-bind=\"selectedOptions: selectedOptions, valueAllowUnset: true,\r\n                              options: available, optionsText: 'title', optionsValue: 'id', \r\n                              select2: { placeholder: '${setName}', allowClear: true }\"></select>\r\n\r\n            <!-- Incomplete\r\n            <label style=\"min-width: 100%\">Bulk Editor (separated by commas):\r\n                <button type=\"button\" class=\"btn btn-outline-secondary btn-sm\"\r\n                    data-bind=\"click: addAsEmails\">Add as Emails</button>\r\n                <br>\r\n                <textarea data-bind=\"value: currentSet().emails,\r\n                                     disable: currentSet().default\"\r\n                 style=\"min-width: 100%\"></textarea></label><br>\r\n             -->\r\n            <button type=\"button\" class=\"btn btn-danger btn-sm float-right mt-2\"\r\n                    data-bind=\"click: deleteSet\">Delete current ${setName} set</button>\r\n            <button type=\"button\" class=\"btn btn-success btn-sm mt-2\"\r\n                    data-bind=\"click: saveSet\">Save ${setName} set</button>\r\n            <button type=\"button\" class=\"btn btn-outline-secondary btn-sm mt-2 ml-4\"\r\n                    data-bind=\"click: cancelEdit\">Cancel changes</button>\r\n        </div>\r\n        </div>\r\n        <div data-bind=\"ifnot: editorVisible\">\r\n            <div data-bind=\"if: isLoading\">\r\n                <div class=\"spinner-loader\" role=\"status\">\r\n                    <span class=\"sr-only\">Loading...</span>\r\n                </div>\r\n            </div>\r\n            <div data-bind=\"ifnot: isLoading\">\r\n                Included ${setName}(s): \r\n                <span data-bind=\"foreach: prettyResult\">\r\n                    <span data-bind=\"text: title\"></span>, \r\n                </span>\r\n                <!-- ko if: currentSet().ids().length > showAllThreshold -->\r\n                <button type=\"button\" class=\"btn btn-primary btn-sm\" data-bind=\"click: () => showAll(!showAll())\">\r\n                    <span data-bind=\"if: showAll\">\r\n                        Hide all\r\n                    </span>\r\n                    <span data-bind=\"ifnot: showAll\">\r\n                        Show more <span class=\"badge badge-light\" data-bind=\"text: currentSet().ids().length - showAllThreshold\"></span>\r\n                    </span>\r\n                </button>\r\n                <!-- /ko -->\r\n            </div>\r\n        </div>\r\n    </div>`\r\n\r\nexport class UserSetSelector extends ModelSetSelector<UserJson, User> {\r\n\r\n    constructor(params: ModelSetSelectorJson<UserJson, User>) {\r\n        super(params);\r\n\r\n        this.getItemGroups = ko.pureComputed(()=> {\r\n            let groups: Record<string, ModelSelectorItemGroup<UserJson, User>> = {};\r\n            this.available().forEach((u: User) => {\r\n                if (!(u.primaryRole() in groups)) {\r\n                    groups[u.primaryRole()] = new ModelSelectorItemGroup<UserJson, User>(u.primaryRole(), u.roles);\r\n                }\r\n                groups[u.primaryRole()].children.push(u);\r\n            });\r\n            return Object.values(groups);\r\n        }, this);\r\n\r\n        (<UserStore>this.store).sortMode.subscribe(() => {\r\n            this.available.sort(this.store.sortMethod.bind(this.store));\r\n        });\r\n    }\r\n\r\n    getDefaultGroupSetName(): string {\r\n        return \"All students\";\r\n    }\r\n\r\n    getNewGroupSetName(): string {\r\n        return \"New user set\";\r\n    }\r\n}\r\n\r\nexport class ModelSelectorItemGroup<J extends ModelJson, T extends Model<J>> {\r\n    name: string;\r\n    model: any;\r\n    children: T[];\r\n\r\n    constructor(name: string, model: any) {\r\n        this.name = name;\r\n        this.model = model;\r\n        this.children = [];\r\n    }\r\n}\r\n\r\nexport class AssignmentSetSelector extends ModelSetSelector<AssignmentJson, Assignment> {\r\n    constructor(params: ModelSetSelectorJson<AssignmentJson, Assignment>) {\r\n        super(params);\r\n\r\n        this.getItemGroups = ko.pureComputed(()=> {\r\n            let groups: Record<number, ModelSelectorItemGroup<AssignmentJson, Assignment>> = {};\r\n            this.available().forEach((a: Assignment) => {\r\n                let id, name;\r\n                if (a.group() === null) {\r\n                    id = -2;\r\n                    name = \"Ungrouped Assignments\";\r\n                } else {\r\n                    id = a.group().id;\r\n                    name = a.group().name();\r\n                }\r\n                if (!(id in groups)) {\r\n                    groups[id] = new ModelSelectorItemGroup<AssignmentJson, Assignment>(name, a.group());\r\n                }\r\n                groups[id].children.push(a);\r\n            });\r\n            return Object.values(groups);\r\n        }, this);\r\n    }\r\n\r\n    protected nameAttr: string = \"title\";\r\n\r\n    getDefaultGroupSetName(): string {\r\n        return \"All assignments\";\r\n    }\r\n\r\n    getNewGroupSetName(): string {\r\n        return \"New assignment set\";\r\n    }\r\n}\r\n\r\nko.components.register(\"user-set-selector\", {\r\n    viewModel: UserSetSelector,\r\n    template: MODEL_SET_SELECTOR_HTML(\"User\")\r\n});\r\nko.components.register(\"assignment-set-selector\", {\r\n    viewModel: AssignmentSetSelector,\r\n    template: MODEL_SET_SELECTOR_HTML(\"Assignment\")\r\n});","import * as ko from 'knockout';\r\nimport {Model, ModelJson, ModelStore} from \"./model\";\r\nimport {TwoWayReadonlyMap} from \"../components/plugins\";\r\n\r\nexport enum SubmissionStatus {\r\n    // Not yet begun - the value if the submission does not exist\r\n    INITIALIZED = \"Initialized\",\r\n    // Started -> not yet run\r\n    STARTED = \"Started\",\r\n    // inProgress -> Run, but not yet marked formally as \"submitted\"\r\n    IN_PROGRESS = \"inProgress\",\r\n    // Submitted -> formally marked\r\n    SUBMITTED = \"Submitted\",\r\n    // Completed -> Either formally Submitted and FullyGraded, or auto graded as \"correct\"\r\n    COMPLETED = \"Completed\"\r\n}\r\n\r\nexport enum GradingStatus {\r\n    FULLY_GRADED = 'FullyGraded',\r\n    PENDING = 'Pending',\r\n    PENDING_MANUAL = 'PendingManual',\r\n    FAILED = 'Failed',\r\n    NOT_READY = 'NotReady',\r\n}\r\n\r\nexport interface SubmissionJson extends ModelJson {\r\n    code: string;\r\n    extra_files: string;\r\n    url: string;\r\n    endpoint: string;\r\n    score: number;\r\n    correct: boolean;\r\n    submission_status: SubmissionStatus;\r\n    grading_status: GradingStatus;\r\n    assignment_id: number | null;\r\n    assignment_group_id: number | null;\r\n    assignment_version: number;\r\n    course_id: number | null;\r\n    user_id: number | null;\r\n    version: number;\r\n}\r\n\r\nexport class Submission extends Model<SubmissionJson> {\r\n    code: KnockoutObservable<string>;\r\n    extraFiles: KnockoutObservable<string>;\r\n    url: KnockoutObservable<string>;\r\n    endpoint: KnockoutObservable<string>;\r\n    score: KnockoutObservable<number>;\r\n    correct: KnockoutObservable<boolean>;\r\n    submissionStatus: KnockoutObservable<SubmissionStatus>;\r\n    gradingStatus: KnockoutObservable<GradingStatus>;\r\n    assignmentId: ko.Observable<number | null>;\r\n    assignmentGroupId: KnockoutObservable<number | null>;\r\n    assignmentVersion: ko.Observable<number>;\r\n    courseId: ko.Observable<number | null>;\r\n    userId: ko.Observable<number | null>;\r\n    version: KnockoutObservable<number>;\r\n\r\n    FIELDS: TwoWayReadonlyMap = new TwoWayReadonlyMap({\r\n        \"date_modified\": \"dateModified\",\r\n        \"date_created\": \"dateCreated\",\r\n        \"code\": \"code\",\r\n        \"extra_files\": \"extraFiles\",\r\n        \"url\": \"url\",\r\n        \"endpoint\": \"endpoint\",\r\n        \"score\": \"score\",\r\n        \"correct\": \"correct\",\r\n        \"submission_status\": \"submissionStatus\",\r\n        \"grading_status\": \"gradingStatus\",\r\n        \"assignment_id\": \"assignmentId\",\r\n        \"assignment_group_id\": \"assignmentGroupId\",\r\n        \"assignment_version\": \"assignmentVersion\",\r\n        \"course_id\": \"courseId\",\r\n        \"user_id\": \"userId\",\r\n        \"version\": \"version\"\r\n    });\r\n\r\n    constructor(data: SubmissionJson) {\r\n        super(data);\r\n        this.koFromJson(data);\r\n    }\r\n\r\n    getAsSubmissionKey(): string {\r\n        return [this.courseId(), this.userId(), this.assignmentId()].join(\",\");\r\n    }\r\n\r\n    checkGrading(expected: GradingStatus) {\r\n        return this.gradingStatus().toLowerCase() === expected.toLowerCase();\r\n    }\r\n\r\n    checkSubmission(expected: SubmissionStatus) {\r\n        return this.submissionStatus().toLowerCase() === expected.toLowerCase();\r\n    }\r\n\r\n}\r\n\r\n\r\nexport class SubmissionStore extends ModelStore<SubmissionJson, Submission> {\r\n    GET_FIELD: string = \"submissions\";\r\n\r\n    getPayload(): any {\r\n        return {\r\n            submission_ids: this.getDelayedIds().join(\",\"),\r\n            course_id: this.courseId\r\n        };\r\n    }\r\n\r\n    getUrl(): string {\r\n        return \"submission/get_ids\";\r\n    }\r\n\r\n    makeEmptyInstance(id: number): Submission {\r\n        return new Submission({\r\n            assignment_group_id: null,\r\n            assignment_id: null,\r\n            assignment_version: 0,\r\n            code: \"\",\r\n            correct: false,\r\n            course_id: null,\r\n            endpoint: \"\",\r\n            extra_files: \"\",\r\n            grading_status: GradingStatus.NOT_READY,\r\n            score: 0,\r\n            submission_status: SubmissionStatus.INITIALIZED,\r\n            url: \"\",\r\n            user_id: undefined,\r\n            version: 0,\r\n            id: id,\r\n            date_created: null,\r\n            date_modified: null\r\n        });\r\n    }\r\n\r\n    getLocalStorageKey(): string {\r\n        return `BLOCKPY_COURSE_${this.courseId}_SUBMISSIONS`;\r\n    }\r\n}\r\n","/**\r\n * Watch grouping mode to combine assignments xor users\r\n * Live polling mode\r\n * Show recent events\r\n */\r\n\r\nimport * as ko from 'knockout';\r\nimport {Log, LogJson, REMAP_EVENT_TYPES} from \"../models/log\";\r\nimport {ajax_get} from \"./ajax\";\r\nimport {User, UserStore} from \"../models/user\";\r\nimport {\r\n    formatDuration,\r\n    prettyPrintDate,\r\n    prettyPrintDateTime,\r\n    prettyPrintDateTimeString,\r\n    prettyPrintTime\r\n} from \"./dates\";\r\nimport {Assignment, AssignmentStore} from \"../models/assignment\";\r\nimport {last, pushObservableArray} from \"./plugins\";\r\nimport './model_selector';\r\nimport {ModelSet} from \"./model_selector\";\r\nimport {launchEditor} from \"./editor\";\r\nimport {Submission, SubmissionJson} from \"../models/submission\";\r\nimport {Server} from \"./server\";\r\n\r\n// TODO: Load events on page load, mode or setting\r\n// TODO: Prevent both All from being loaded if SxA is too big?\r\n\r\n// TODO: Global Watch Mode buttons (tied to state of their respective set of buttons)\r\nexport enum WatchMode {\r\n    SUMMARY, FULL\r\n}\r\n\r\nexport enum FeedbackMode {\r\n    FEEDBACK=\"Feedback\",\r\n    SYSTEM=\"System\",\r\n    BOTH=\"Both\",\r\n    HIDE=\"Hidden\"\r\n}\r\n\r\n// TODO: Feedback | Last compile error | Hide\r\nexport class SubmissionState {\r\n    loaded: boolean;\r\n    friendly: string;\r\n    code: string;\r\n    feedback: string;\r\n    system: string;\r\n    lastRan: string;\r\n    lastEdit: string;\r\n    lastOpened: string;\r\n    completed: boolean;\r\n    score: number;\r\n    mode: string;\r\n    fullscreen: boolean;\r\n    log: Log;\r\n\r\n    constructor(current: SubmissionState, log: Log) {\r\n        this.makeNextState(current, log);\r\n    }\r\n\r\n    getPrettyTime(): string {\r\n        return prettyPrintDateTimeString(this.log.when());\r\n    }\r\n\r\n    getPrettyLastEdit(watchMode?: WatchMode): string {\r\n        let current = watchMode !== WatchMode.SUMMARY ? this.log.when() : null;\r\n        return formatDuration(this.lastEdit, current);\r\n    }\r\n\r\n    getPrettyLastRan(watchMode?: WatchMode): string {\r\n        let current = watchMode !== WatchMode.SUMMARY ? this.log.when() : null;\r\n        return formatDuration(this.lastRan, current);\r\n    }\r\n\r\n    getPrettyLastOpened(watchMode?: WatchMode): string {\r\n        let current = watchMode !== WatchMode.SUMMARY ? this.log.when() : null;\r\n        return formatDuration(this.lastOpened, current);\r\n    }\r\n\r\n    copyState(other: SubmissionState) {\r\n        if (other === null) {\r\n            this.code = \"\";\r\n            this.friendly = \"Not Loaded\";\r\n            this.feedback = \"Not yet executed\";\r\n            this.system = \"\";\r\n            this.lastRan = null;\r\n            this.lastEdit = null;\r\n            this.lastOpened = null;\r\n            this.completed = false;\r\n            this.score = 0;\r\n            this.mode = \"unknown\";\r\n            this.fullscreen = false;\r\n            this.log = null;\r\n        } else {\r\n            this.code = other.code;\r\n            this.feedback = other.feedback;\r\n            this.system = other.system;\r\n            this.lastRan = other.lastRan;\r\n            this.lastEdit = other.lastEdit;\r\n            this.lastOpened = other.lastOpened;\r\n            this.completed = other.completed;\r\n            this.score = other.score;\r\n            this.mode = other.mode;\r\n            this.fullscreen = other.fullscreen;\r\n            this.log = null;\r\n        }\r\n    }\r\n\r\n    makeNextState(current: SubmissionState, log: Log) {\r\n        this.copyState(current);\r\n        this.log = log;\r\n        this.friendly = REMAP_EVENT_TYPES[log.eventType()];\r\n        //this.system = `<strong>${this.friendly || log.eventType()}</strong><div>${log.message()}</div>`;\r\n        switch (log.eventType()) {\r\n            case \"File.Create\":\r\n                this.code = log.message();\r\n                this.lastEdit = log.when();\r\n                break;\r\n            case \"File.Edit\":\r\n                this.code = log.message();\r\n                this.lastEdit = log.when();\r\n                this.system = \"<strong>Edited code</strong>\";\r\n                break;\r\n            case \"Session.Start\":\r\n                this.lastOpened = log.when();\r\n                this.system = `<strong>New Session</strong>`;\r\n                break;\r\n            case \"Compile\":\r\n                this.system = `<strong>Compiling</strong>`;\r\n                break;\r\n            case \"Run.Program\":\r\n                this.lastRan = log.when();\r\n                this.system = `<strong>Run</strong><div>${log.message()}</div>`;\r\n                break;\r\n            case \"Compile.Error\":\r\n                this.system = `<strong>Compiler Error</strong><div>${log.message()}</div>`;\r\n                break;\r\n            case \"Intervention\":\r\n                this.completed = this.completed || log.category() === \"Complete\";\r\n                this.feedback = `<strong>${log.label()}</strong><div>${log.message()}</div>`;\r\n                break;\r\n            case \"X-View.Change\":\r\n                this.mode = log.message();\r\n                this.system = `<strong>Changed Editing Mode</strong><div>${this.mode}</div>`;\r\n                break;\r\n            case \"X-Submission.LMS\":\r\n                this.score = parseInt(log.message(), 10);\r\n                this.system = `<strong>Submitted Score</strong><div>${this.score}</div>`;\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\nexport class SubmissionHistory {\r\n    // Past history of all submission states, timed on logs\r\n    states: KnockoutObservableArray<SubmissionState>;\r\n    // Identity information\r\n    user: User;\r\n    assignment: Assignment;\r\n    submission: Submission;\r\n\r\n    // Current viewing state\r\n    watchMode: KnockoutObservable<WatchMode>;\r\n    feedbackMode: KnockoutObservable<FeedbackMode>;\r\n    currentStateIndex: KnockoutObservable<string|number>;\r\n\r\n    // Cosmetic functions\r\n    private currentState: KnockoutReadonlyComputed<SubmissionState>;\r\n    private isVcrActive: KnockoutReadonlyComputed<boolean>;\r\n    private getWatchModeClass: KnockoutReadonlyComputed<string>;\r\n    // Visuals\r\n    private isSummary: KnockoutReadonlyComputed<boolean>;\r\n    private isFull: KnockoutReadonlyComputed<boolean>;\r\n    private hideFeedback: KnockoutReadonlyComputed<boolean>;\r\n\r\n    constructor(user: User, assignment: Assignment) {\r\n        this.states = ko.observableArray<SubmissionState>([]);\r\n        this.currentStateIndex = ko.observable(0);\r\n        this.user = user;\r\n        this.assignment = assignment;\r\n        this.watchMode = ko.observable(WatchMode.SUMMARY);\r\n        this.feedbackMode = ko.observable(FeedbackMode.FEEDBACK);\r\n        this.isVcrActive = ko.pureComputed(() => {\r\n            return this.watchMode() !== WatchMode.SUMMARY;\r\n        }, this);\r\n        this.getWatchModeClass = ko.pureComputed(() => {\r\n            switch (this.watchMode()) {\r\n                case WatchMode.SUMMARY:\r\n                    return \"fa-eye\";\r\n                case WatchMode.FULL:\r\n                    return \"fa-eye-slash\";\r\n            }\r\n        }, this);\r\n        this.currentState = ko.pureComputed(() => {\r\n            if (this.states().length > 0) {\r\n                if (this.watchMode() !== WatchMode.SUMMARY) {\r\n                    return this.states()[this.getCurrentStateIndex()];\r\n                } else {\r\n                    return last(this.states());\r\n                }\r\n            } else {\r\n                console.error(\"No states are currently loaded!\");\r\n            }\r\n        }, this);\r\n        this.isSummary = ko.pureComputed(() => {\r\n            return this.watchMode() === WatchMode.SUMMARY;\r\n        }, this);\r\n        this.isFull = ko.pureComputed(() => {\r\n            return this.watchMode() === WatchMode.FULL;\r\n        }, this);\r\n    }\r\n\r\n    private getCurrentStateIndex(): number {\r\n        return parseInt(<string>this.currentStateIndex(), 10);\r\n    }\r\n\r\n    addLogs(logs: Log[]) {\r\n        let states: SubmissionState[] = [];\r\n        let latestState: SubmissionState = this.states().length ? last(this.states()) : null;\r\n        for (let i=0; i< logs.length; i+=1) {\r\n            let nextState = new SubmissionState(latestState, logs[i]);\r\n            states.push(nextState);\r\n            latestState = nextState;\r\n        }\r\n        pushObservableArray(this.states, states);\r\n        //console.log(states);\r\n    }\r\n\r\n    reload() {\r\n        ajax_get(\"blockpy/load_history\", {\r\n            assignment_id: this.submission.assignmentId(),\r\n            course_id: this.submission.courseId(),\r\n            user_id: this.submission.userId(),\r\n            with_submission: true\r\n        }).then((data) => {\r\n            if (data.success) {\r\n                let latestLogId = this.states.length>0 ? this.states()[this.states.length-1].log.id : -1;\r\n                this.addLogs(data.history.filter((log: LogJson) => latestLogId < log.id).map((log: LogJson) => new Log(log)));\r\n                this.submission.fromJson(data.submissions[0]);\r\n            } else {\r\n                console.error(data);\r\n            }\r\n        });\r\n        console.log(\"Need to update myself!\");\r\n    }\r\n\r\n    // Map CodeStates to event IDs so we can quickly get code? Or playback history to status at each step...\r\n\r\n    loadHistorySelector(event: Event) {\r\n        let selector = this.getSelector(event);\r\n        selector.empty();\r\n        let i;\r\n        let optGroup: JQuery<JQuery.Node> = null;\r\n        for (i=0; i <this.states().length; i+= 1) {\r\n            let entry: Log = this.states()[i].log;\r\n            let formattedDate = prettyPrintDate(entry.clientTimestamp());\r\n            if (optGroup === null || optGroup.attr(\"label\") != formattedDate) {\r\n                optGroup = $(\"<optgroup></optgroup>\");\r\n                optGroup.attr(\"label\", formattedDate);\r\n                selector.append(optGroup);\r\n            }\r\n            let eventType = REMAP_EVENT_TYPES[entry.eventType()] || entry.eventType();\r\n            let displayed = prettyPrintTime(entry.clientTimestamp()) +\" - \"+eventType;\r\n            let option = $(\"<option></option>\", {text: displayed});\r\n            option.attr(\"value\", i);\r\n            optGroup.append(option);\r\n        }\r\n        this.currentStateIndex(i-1);\r\n        //selector.val(Math.max(0, i-1));\r\n    }\r\n\r\n    switchWatchMode(data: any, event: Event) {\r\n        switch (this.watchMode()) {\r\n            case WatchMode.FULL:\r\n                this.watchMode(WatchMode.SUMMARY);\r\n                break;\r\n            case WatchMode.SUMMARY:\r\n                this.loadHistorySelector(event);\r\n                this.watchMode(WatchMode.FULL);\r\n                break;\r\n        }\r\n    }\r\n\r\n    switchFeedbackMode(data: any, event: Event) {\r\n        switch (this.feedbackMode()) {\r\n            case FeedbackMode.FEEDBACK:\r\n                this.feedbackMode(FeedbackMode.SYSTEM);\r\n                break;\r\n            case FeedbackMode.SYSTEM:\r\n                this.feedbackMode(FeedbackMode.BOTH);\r\n                break;\r\n            case FeedbackMode.BOTH:\r\n                this.feedbackMode(FeedbackMode.HIDE);\r\n                break;\r\n            case FeedbackMode.HIDE:\r\n                this.feedbackMode(FeedbackMode.FEEDBACK);\r\n                break;\r\n        }\r\n    }\r\n\r\n    getSelector(event: Event) {\r\n        return $(event.target).closest(\"div\").find(\".history-select\");\r\n    }\r\n\r\n    moveToMostRecent(data: any, event: Event) {\r\n        console.log(this.states().length-1);\r\n        this.currentStateIndex(this.states().length-1);\r\n    }\r\n\r\n    moveToBack(data: any, event: Event) {\r\n        this.currentStateIndex(Math.max(0, this.getCurrentStateIndex()-1));\r\n    }\r\n\r\n    seekToBack(data: any, event: Event) {\r\n        let currentId = this.getCurrentStateIndex();\r\n        let currentState: SubmissionState;\r\n        do {\r\n            currentId -= 1;\r\n            currentState = this.states()[currentId];\r\n        } while (currentId>0 && !currentState.log.isEditEvent());\r\n        this.currentStateIndex(currentId);\r\n    }\r\n\r\n    moveToNext(data: any, event: Event) {\r\n        this.currentStateIndex(Math.min(this.states().length-1, this.getCurrentStateIndex()+1));\r\n    }\r\n\r\n    seekToNext(data: any, event: Event) {\r\n        let currentId = this.getCurrentStateIndex();\r\n        let currentState: SubmissionState;\r\n        do {\r\n            currentId += 1;\r\n            currentState = this.states()[currentId];\r\n        } while (currentId<this.states().length-1 && !currentState.log.isEditEvent());\r\n        this.currentStateIndex(currentId);\r\n    }\r\n\r\n    moveToStart(data: any, event: Event) {\r\n        /*this.getSelector(event).val(0);\r\n        this.viewLog(event);*/\r\n        this.currentStateIndex(0);\r\n    }\r\n\r\n    launchEditor() {\r\n        launchEditor(this.assignment, this.submission);\r\n    }\r\n}\r\n\r\n// TODO: Open all of students' submissions\r\n// TODO: Open all of assignment's submissions\r\n// TODO: \"Last Logged Event\" -> \"This log event: \"\r\nexport const SubmissionHistoryCard = `\r\n<!-- ko if: grouping() !== 'None' -->\r\n<h4 data-bind=\"text: grouping() === 'User' ? user.title() : assignment.title()\"></h4>\r\n<!-- /ko -->\r\n<div class=\"\">\r\n    <!-- ko if: submissionHistory.states().length>0 -->\r\n    <div class=\"row\">\r\n        <div class=\"col-md-6\">\r\n            <div data-bind=\"component: {name: 'user-short', params: user}\"></div>\r\n            <div data-bind=\"component: {name: 'assignment-short', params: assignment}\"></div>\r\n            <div>Score: <span data-bind=\"text: currentState().completed ? 'Correct' : 'Incomplete'\"></span> (<span data-bind=\"text: currentState().score\"></span>)</div>\r\n            <div>Open submission in <a href=\"#\" data-bind=\"click: $parent.launchEditor.bind($parent)\">Readonly Editor</a></div>\r\n        </div>\r\n        <div class=\"col-md-6\">\r\n            <div>Last Logged Event: <span data-bind=\"text: currentState().getPrettyTime()\"></span></div>\r\n            <div>Last Edited: <span data-bind=\"text: currentState().getPrettyLastEdit(watchMode())\"></span></div>\r\n            <div>Last Ran: <span data-bind=\"text: currentState().getPrettyLastRan(watchMode())\"></span></div>\r\n            <div>Last Opened: <span data-bind=\"text: currentState().getPrettyLastOpened(watchMode())\"></span></div>    \r\n        </div>\r\n        <div class=\"col-md-12\">\r\n            <submission-history-vcr params=\"submissionHistory: submissionHistory\"></submission-history-vcr>\r\n        </div>\r\n        <div class=\"mt-2\" data-bind=\"css: { 'col-md-6': submissionHistory.feedbackMode() !== 'Hidden',\r\n                                            'col-md-11': submissionHistory.feedbackMode() === 'Hidden' },\r\n                                     ifnot: submissionHistory.isSummary()\">\r\n            <pre class=\"python-code-block\">\r\n                <code data-bind=\"highlightedCode: currentState().code\" class=\"python\" style=\"height: 200px; overflow: scroll\"></code>\r\n            </pre>\r\n        </div>\r\n        <div class=\"mt-2\" data-bind=\"css: { 'col-md-6': submissionHistory.feedbackMode() !== 'Hidden',\r\n                                            'col-md-1': submissionHistory.feedbackMode() === 'Hidden' },\r\n                                     if: submissionHistory.isFull()\">\r\n            <buton class=\"float-right btn btn-outline-secondary btn-sm\"\r\n                   data-bind=\"text: submissionHistory.feedbackMode(),\r\n                              click: submissionHistory.switchFeedbackMode.bind(submissionHistory)\"></buton>\r\n            <!-- ko if: submissionHistory.feedbackMode() === 'Feedback' || submissionHistory.feedbackMode() === 'Both' -->\r\n            <div data-bind=\"html: currentState().feedback\"></div>\r\n            <!-- /ko -->\r\n            <!-- ko if: submissionHistory.feedbackMode() === 'System' || submissionHistory.feedbackMode() === 'Both' -->\r\n            <div data-bind=\"html: currentState().system\"></div>\r\n            <!-- /ko -->\r\n        </div>\r\n    </div>\r\n    <!-- /ko -->\r\n    <!-- ko ifnot: submissionHistory.states().length>0 -->\r\n    <div class=\"row\">\r\n        <div class=\"col-md-6\">\r\n            <div data-bind=\"component: {name: 'user-short', params: user}\"></div>\r\n            <div data-bind=\"component: {name: 'assignment-short', params: assignment}\"></div>\r\n            <div>Not yet started!</div>\r\n        </div>\r\n    </div>\r\n    <!-- /ko -->\r\n</div>\r\n`;\r\n\r\nko.components.register(\"submission-history-card\", {\r\n    template: SubmissionHistoryCard\r\n});\r\n\r\nexport const SubmissionHistoryVCR = `\r\n    <form class=\"form-inline\">\r\n        <button class=\"btn btn-outline-secondary mr-2 btn-sm\" type=\"button\"\r\n            data-bind=\"click: submissionHistory.switchWatchMode.bind(submissionHistory)\">\r\n            <span class='fas' data-bind=\"class: submissionHistory.getWatchModeClass()\"></span>\r\n        </button>\r\n        <button class=\"btn btn-outline-secondary mr-2 btn-sm\"\r\n                data-bind=\"click: submissionHistory.reload.bind(submissionHistory)\">\r\n                <span class=\"fas fa-sync\"></span> Sync\r\n        </button>\r\n        <div data-bind=\"visible: submissionHistory.isVcrActive()\">\r\n            <button class=\"btn btn-outline-secondary mr-2 btn-sm\" type=\"button\"\r\n                data-bind=\"click: submissionHistory.moveToStart.bind(submissionHistory)\">\r\n                <span class='fas fa-step-backward'></span> Start\r\n            </button>\r\n            <button class=\"btn btn-outline-secondary mr-2 btn-sm\" type=\"button\"\r\n                data-bind=\"click: submissionHistory.seekToBack.bind(submissionHistory)\">\r\n                <span class='fas fa-fast-backward'></span>\r\n            </button>\r\n            <button class=\"btn btn-outline-secondary mr-2 btn-sm\" type=\"button\"\r\n                data-bind=\"click: submissionHistory.moveToBack.bind(submissionHistory)\">\r\n                <span class='fas fa-backward'></span> Back\r\n            </button>\r\n            <select class=\"history-select form-control custom-select mr-2 custom-select-sm\"\r\n                data-bind=\"value: submissionHistory.currentStateIndex\"\r\n                aria-title=\"History Selector\">\r\n            </select>\r\n            <button class=\"btn btn-outline-secondary mr-2 btn-sm\" type=\"button\"\r\n                data-bind=\"click: submissionHistory.moveToNext.bind(submissionHistory)\">\r\n                <span class='fas fa-forward'></span> Next\r\n            </button>\r\n            <button class=\"btn btn-outline-secondary mr-2 btn-sm\" type=\"button\"\r\n                data-bind=\"click: submissionHistory.seekToNext.bind(submissionHistory)\">\r\n                <span class='fas fa-fast-forward'></span>\r\n            </button>\r\n            <button class=\"btn btn-outline-secondary mr-2 btn-sm\" type=\"button\"\r\n                data-bind=\"click: submissionHistory.moveToMostRecent.bind(submissionHistory)\">\r\n                <span class='fas fa-step-forward'></span> Most Recent\r\n            </button>\r\n        </div>\r\n    </form>\r\n`;\r\n\r\nko.components.register(\"submission-history-vcr\", {\r\n    template: SubmissionHistoryVCR\r\n});\r\n\r\nexport enum WatchGroupingMode {\r\n    NONE=\"None\", ASSIGNMENT=\"Assignment\", USER=\"User\"\r\n}\r\n\r\n\r\nexport class Watcher {\r\n    // Search options\r\n    courseId: KnockoutObservable<number>;\r\n    assignmentIds: string;\r\n    userIds: string;\r\n    userSet: KnockoutObservable<ModelSet>;\r\n    assignmentSet: KnockoutObservable<ModelSet>;\r\n\r\n    // Stores\r\n    server: Server;\r\n\r\n    // Actual data\r\n    submissions: KnockoutObservableArray<SubmissionHistory>;\r\n    cauToSubmission: { [cau: string]: SubmissionHistory};\r\n\r\n    // Cosmetics\r\n    grouping: KnockoutObservable<WatchGroupingMode>;\r\n    isLoading: KnockoutObservable<boolean>;\r\n    hasFailed: KnockoutObservable<boolean>;\r\n\r\n\r\n    constructor(data: any) {\r\n        // TODO: Handle userIds to default load some students in a new set\r\n        this.courseId = ko.observable<number>(data.courseId);\r\n        this.userIds = data.userIds;\r\n        this.assignmentIds = data.assignmentIds;\r\n        this.userSet = ko.observable<ModelSet>(null);\r\n        this.assignmentSet = ko.observable<ModelSet>(null);\r\n        this.grouping = ko.observable<WatchGroupingMode>(WatchGroupingMode.NONE);\r\n        this.submissions = ko.observableArray<SubmissionHistory>([]);\r\n        this.cauToSubmission = {};\r\n        this.server = data.server;\r\n        this.isLoading = ko.observable(false);\r\n        this.hasFailed = ko.observable(false);\r\n\r\n        this.server.userStore.sortMode.subscribe(() => {\r\n            this.submissions.sort((left, right) => {\r\n                return this.server.userStore.sortMethod(left.user, right.user);\r\n            });\r\n        });\r\n        //$(this.getLatest.bind(this));\r\n    }\r\n\r\n    addLogs(logJsons: LogJson[]) {\r\n        let sortedLogs: Record<string, Log[]> = {};\r\n        for (let i=0; i<logJsons.length; i+=1) {\r\n            let log: Log = new Log(logJsons[i]);\r\n            let submissionId = log.getAsSubmissionKey();\r\n            if (!(submissionId in this.cauToSubmission)) {\r\n                let user = this.server.userStore.getInstance(log.subjectId());\r\n                let assignment = this.server.assignmentStore.getInstance(log.assignmentId());\r\n                this.cauToSubmission[submissionId] = new SubmissionHistory(user, assignment);\r\n                this.submissions.push(this.cauToSubmission[submissionId]);\r\n            }\r\n            if (!(submissionId in sortedLogs)) {\r\n                sortedLogs[submissionId] = [];\r\n            }\r\n            sortedLogs[submissionId].push(log);\r\n        }\r\n        for (let submissionId in sortedLogs) {\r\n            this.cauToSubmission[submissionId].addLogs(sortedLogs[submissionId]);\r\n        }\r\n    }\r\n\r\n    addSubmissions(submissionJsons: SubmissionJson[]) {\r\n        for (let i=0; i<submissionJsons.length; i+=1) {\r\n            let submission: Submission = new Submission(submissionJsons[i]);\r\n            let submissionId = submission.getAsSubmissionKey();\r\n            if (!(submissionId in this.cauToSubmission)) {\r\n                let user = this.server.userStore.getInstance(submission.userId());\r\n                let assignment = this.server.assignmentStore.getInstance(submission.assignmentId());\r\n                this.cauToSubmission[submissionId] = new SubmissionHistory(user, assignment);\r\n                this.submissions.push(this.cauToSubmission[submissionId]);\r\n            }\r\n            this.cauToSubmission[submissionId].submission = submission;\r\n        }\r\n    }\r\n\r\n    clearData() {\r\n        this.cauToSubmission = {};\r\n        this.submissions.removeAll();\r\n    }\r\n\r\n    // TODO: Get latest for just a single submission\r\n    getLatest() {\r\n        localStorage.setItem(\"BLOCKPY_SERVER_USERIDS\", this.userSet().getStored());\r\n        localStorage.setItem(\"BLOCKPY_SERVER_ASSIGNMENTIDS\", this.assignmentSet().getStored());\r\n        this.isLoading(true);\r\n        this.hasFailed(false);\r\n        this.setGroupingMode();\r\n        ajax_get(\"blockpy/load_history\", {\r\n            assignment_id: this.assignmentSet().getIds(),\r\n            course_id: this.courseId(),\r\n            user_id: this.userSet().getIds(),\r\n            with_submission: true\r\n        }).then((data) => {\r\n            this.isLoading(false);\r\n            this.hasFailed(!data.success);\r\n            if (data.success) {\r\n                this.clearData();\r\n                this.addLogs(data.history);\r\n                this.addSubmissions(data.submissions);\r\n            } else {\r\n                console.error(\"Loading history failed!\", data);\r\n            }\r\n        }).fail(() => {\r\n            console.error(\"Loading history failed to get data!\", arguments);\r\n            this.hasFailed(true);\r\n            this.isLoading(false);\r\n        });\r\n    }\r\n\r\n    setGroupingMode() {\r\n        let assignmentCount = this.assignmentSet().getIds().length;\r\n        let userCount = this.userSet().getIds().length;\r\n        if (userCount > assignmentCount) {\r\n            this.grouping(WatchGroupingMode.USER);\r\n        } else if (userCount < assignmentCount) {\r\n            this.grouping(WatchGroupingMode.ASSIGNMENT);\r\n        } else {\r\n            this.grouping(WatchGroupingMode.NONE);\r\n        }\r\n    }\r\n}\r\n\r\nexport const WatcherTemplate = `\r\n    <div>\r\n    <user-display-settings-editor params=\"options: server.userStore.displayOptions, sortMode: server.userStore.sortMode, displayMode: server.userStore.displayMode\"></user-display-settings-editor>\r\n    User(s):\r\n        <user-set-selector params=\"store: server.userStore, modelSet: userSet, default: userIds\"></user-set-selector>\r\n    </div>\r\n    <div class=\"mt-4 mb-4\">\r\n    Assignment(s):\r\n        <assignment-set-selector params=\"store: server.assignmentStore, modelSet: assignmentSet, default: assignmentIds\"></assignment-set-selector>\r\n    </div>\r\n    <div class=\"mb-4 mt-4\">\r\n        <button class=\"btn btn-primary\" data-bind=\"click: getLatest\">Load Events</button>\r\n    </div>\r\n    <div data-bind=\"if: isLoading\">\r\n        <div class=\"spinner-loader\" role=\"status\">\r\n            <span class=\"sr-only\">Loading...</span>\r\n        </div>\r\n    </div>\r\n    <!-- ko if: hasFailed -->\r\n    <div class=\"alert alert-danger\" role=\"alert\">\r\n        Loading these events has failed; more details in JS console.\r\n    </div>\r\n    <!-- /ko -->\r\n    <div data-bind=\"ifnot: isLoading\">\r\n        <div data-bind=\"foreach: submissions\" class=\"row\">\r\n            <submission-history-card params=\"submissionHistory: $data, currentState: currentState, watchMode: watchMode,\r\n                                             user: user, assignment: assignment, grouping: $parent.grouping\"\r\n                                     class=\"col-md-12 mb-4 rounded bg-light\"></submission-history-card>    \r\n        </div>\r\n    </div>\r\n`;\r\n\r\nko.components.register(\"watcher\", {\r\n    viewModel: Watcher,\r\n    template: WatcherTemplate\r\n});\r\n\r\n","import * as ko from 'knockout';\r\nimport {Model, ModelJson, ModelStore} from \"./model\";\r\nimport {capitalize, TwoWayReadonlyMap} from \"../components/plugins\";\r\nimport {ajax_get} from \"../components/ajax\";\r\n\r\nexport enum ServiceType {\r\n    NATIVE= \"native\",\r\n    LTI = \"lti\"\r\n}\r\n\r\nexport enum CourseVisibility {\r\n    PRIVATE=\"private\",\r\n    PUBLIC=\"public\"\r\n}\r\n\r\nexport interface CourseJson extends ModelJson {\r\n    id: number;\r\n    name: string;\r\n    url: string;\r\n    owner_id: number;\r\n    service: ServiceType;\r\n    external_id: string;\r\n    endpoint: string;\r\n    visibility: CourseVisibility;\r\n    term: string;\r\n    settings: string;\r\n}\r\n\r\nexport class Course extends Model<CourseJson> {\r\n    id: number;\r\n    name: KnockoutObservable<string>;\r\n    url: KnockoutObservable<string>;\r\n    ownerId: KnockoutObservable<number>;\r\n    service: KnockoutObservable<ServiceType>;\r\n    externalId: KnockoutObservable<string>;\r\n    endpoint: KnockoutObservable<string>;\r\n    visibility: KnockoutObservable<CourseVisibility>;\r\n    term: KnockoutObservable<string>;\r\n    settings: KnockoutObservable<string>;\r\n\r\n    FIELDS: TwoWayReadonlyMap = new TwoWayReadonlyMap({\r\n        \"name\": \"name\",\r\n        \"url\": \"url\",\r\n        \"owner_id\": \"ownerId\",\r\n        \"service\": \"service\",\r\n        \"external_id\": \"externalId\",\r\n        \"endpoint\": \"endpoint\",\r\n        \"visibility\": \"visibility\",\r\n        \"term\": \"term\",\r\n        \"settings\": \"settings\",\r\n        \"date_modified\": \"dateModified\",\r\n        \"date_created\": \"dateCreated\"\r\n    });\r\n\r\n    constructor(data: CourseJson) {\r\n        super(data);\r\n        this.koFromJson(data);\r\n    }\r\n}\r\n\r\nexport class CourseStore extends ModelStore<CourseJson, Course> {\r\n    GET_FIELD: string = \"courses\";\r\n\r\n    getPayload(): any {\r\n        return {\r\n            course_id: this.courseId\r\n        };\r\n    }\r\n\r\n    getUrl(): string {\r\n        return \"courses\";\r\n    }\r\n\r\n    getLocalStorageKey(): string {\r\n        return `BLOCKPY_COURSE_${this.courseId}_COURSES`;\r\n    }\r\n\r\n    makeEmptyInstance(id: number): Course {\r\n        return new Course({\r\n            id: id,\r\n            date_created: null,\r\n            date_modified: null,\r\n            endpoint: \"\",\r\n            external_id: \"\",\r\n            name: \"Unknown Course\",\r\n            owner_id: null,\r\n            service: null,\r\n            settings: \"\",\r\n            term: \"Unknown term\",\r\n            url: \"\",\r\n            visibility: null\r\n        });\r\n    }\r\n}\r\n\r\nexport const CourseTemplate = `\r\n    <div>Course: <span data-bind=\"text: name\"></span></div>\r\n`;\r\n\r\nko.components.register(\"course\", {\r\n    viewModel: Course,\r\n    template: CourseTemplate\r\n});\r\n","import {Assignment} from \"../models/assignment\";\r\nimport {GradingStatus, Submission, SubmissionStatus} from \"../models/submission\";\r\n\r\n\r\nexport function launchEditor(assignment: Assignment, submission: Submission) {\r\n    var form = document.createElement(\"form\");\r\n    form.setAttribute(\"method\", \"post\");\r\n    form.setAttribute(\"action\", window[\"$URL_ROOT\"]+\"blockpy/load_readonly\");\r\n    form.setAttribute(\"target\", \"_blank\");\r\n\r\n    let formData = {\r\n        user: {\r\n            role: \"instructor\"\r\n        },\r\n        assignment: assignment ? assignment.toJson(): null,\r\n        submission: submission ? submission.toJson(): null\r\n    };\r\n\r\n    formData.assignment.forked_id = assignment.id;\r\n    formData.assignment.forked_version = assignment.version();\r\n    formData.assignment.id = null;\r\n    formData.assignment.url = \"\";\r\n    formData.assignment.course_id = null;\r\n    formData.submission.id = null;\r\n    formData.submission.endpoint = \"\";\r\n    formData.submission.url = \"\";\r\n    formData.submission.user_id = null;\r\n    formData.submission.course_id = null;\r\n    formData.submission.assignment_id = null;\r\n    formData.submission.grading_status = GradingStatus.NOT_READY;\r\n    formData.submission.submission_status = SubmissionStatus.IN_PROGRESS;\r\n\r\n    var hiddenField = document.createElement(\"input\");\r\n    hiddenField.setAttribute(\"type\", \"hidden\");\r\n    hiddenField.setAttribute(\"name\", \"assignment_data\");\r\n    hiddenField.setAttribute(\"value\", JSON.stringify(formData, null, 2));\r\n    form.appendChild(hiddenField);\r\n    document.body.appendChild(form);\r\n\r\n    //window.open('', '_blank');\r\n\r\n    form.submit();\r\n}","import * as ko from 'knockout';\r\nimport {Model, ModelJson, ModelStore} from \"./model\";\r\nimport {TwoWayReadonlyMap} from \"../components/plugins\";\r\n\r\nexport interface ReviewJson extends ModelJson {\r\n    comment: string;\r\n    location: string;\r\n    generic: boolean;\r\n    tag_id: number | null;\r\n    score: number | null;\r\n    submission_id: number | null;\r\n    author_id: number;\r\n    assignment_version: number;\r\n    submission_version: number;\r\n    version: number;\r\n    forked_id: number | null;\r\n    forked_version: number | null;\r\n}\r\n\r\nexport class Review extends Model<ReviewJson> {\r\n    comment: KnockoutObservable<string>;\r\n    location: KnockoutObservable<string>;\r\n    generic: KnockoutObservable<boolean>;\r\n    tagId: KnockoutObservable<number | null>;\r\n    score: KnockoutObservable<number|null>;\r\n    submissionId: KnockoutObservable<number | null>;\r\n    authorId: KnockoutObservable<number>;\r\n    assignmentVersion: KnockoutObservable<number>;\r\n    submissionVersion: KnockoutObservable<number>;\r\n    version: KnockoutObservable<number>;\r\n    forkedId: KnockoutObservable<number | null>;\r\n    forkedVersion: KnockoutObservable<number | null>;\r\n\r\n\r\n    FIELDS: TwoWayReadonlyMap = new TwoWayReadonlyMap({\r\n        \"date_modified\": \"dateModified\",\r\n        \"date_created\": \"dateCreated\",\r\n        \"comment\": \"comment\",\r\n        \"location\": \"location\",\r\n        \"generic\": \"generic\",\r\n        \"tag_id\": \"tagId\",\r\n        \"score\": \"score\",\r\n        \"submission_id\": \"submissionId\",\r\n        \"author_id\": \"authorId\",\r\n        \"assignment_version\": \"assignmentVersion\",\r\n        \"submission_version\": \"submissionVersion\",\r\n        \"version\": \"version\",\r\n        \"forked_id\": \"forkedId\",\r\n        \"forked_version\": \"forkedVersion\",\r\n    });\r\n\r\n    constructor(data: ReviewJson) {\r\n        super(data);\r\n        this.koFromJson(data);\r\n    }\r\n}\r\n\r\n\r\nexport class ReviewStore extends ModelStore<ReviewJson, Review> {\r\n    GET_FIELD: string = \"submissions\";\r\n\r\n    getPayload(): any {\r\n        return {\r\n            submission_ids: this.getDelayedIds().join(\",\"),\r\n            course_id: this.courseId\r\n        };\r\n    }\r\n\r\n    getUrl(): string {\r\n        return \"submission/get_ids\";\r\n    }\r\n\r\n    makeEmptyInstance(id: number): Review {\r\n        return new Review({\r\n            assignment_version: 0,\r\n            author_id: 0,\r\n            comment: \"\",\r\n            forked_id: null,\r\n            forked_version: null,\r\n            generic: false,\r\n            location: \"\",\r\n            score: 0,\r\n            submission_id: null,\r\n            submission_version: 0,\r\n            tag_id: null,\r\n            version: 0,\r\n            id: id,\r\n            date_created: null,\r\n            date_modified: null\r\n        });\r\n    }\r\n\r\n    getLocalStorageKey(): string {\r\n        return `BLOCKPY_COURSE_${this.courseId}_REVIEWS`;\r\n    }\r\n}\r\n","import {UserJson, UserStore} from \"../models/user\";\r\nimport {AssignmentJson, AssignmentStore} from \"../models/assignment\";\r\nimport {AssignmentGroupJson, AssignmentGroupStore} from \"../models/assignment_group\";\r\nimport {CourseJson, CourseStore} from \"../models/course\";\r\nimport {ReviewJson, ReviewStore} from \"../models/review\";\r\nimport {SubmissionJson, SubmissionStore} from \"../models/submission\";\r\n\r\nexport interface ServerIds {\r\n    userIds?: number[];\r\n    courseIds?: number[];\r\n    assignmentIds?: number[];\r\n    assignmentGroupIds?: number[];\r\n    reviewIds?: number[];\r\n    submissionIds?: number[];\r\n}\r\n\r\nexport interface ServerData {\r\n    users?: UserJson[];\r\n    courses?: CourseJson[];\r\n    assignments?: AssignmentJson[];\r\n    assignmentGroups?: AssignmentGroupJson[];\r\n    reviews?: ReviewJson[];\r\n    submissions?: SubmissionJson[];\r\n}\r\n\r\n/**\r\n * Principle: None of the UI models hold the canonical lists. They all have references to this Server,\r\n * who holds the unique Stores, each of which has their own canonical lists.\r\n */\r\nexport class Server {\r\n    courseId: number;\r\n\r\n    userStore: UserStore;\r\n    courseStore: CourseStore;\r\n    assignmentStore: AssignmentStore;\r\n    assignmentGroupStore: AssignmentGroupStore;\r\n    reviewStore: ReviewStore;\r\n    submissionStore: SubmissionStore;\r\n\r\n    constructor(courseId: number, initialIds?: ServerIds, initialData?: ServerData) {\r\n        this.courseId = courseId;\r\n        this.userStore = new UserStore(this, courseId, initialIds.userIds, initialData.users);\r\n        this.courseStore = new CourseStore(this, courseId, initialIds.courseIds, initialData.courses);\r\n        this.assignmentStore = new AssignmentStore(this, courseId, initialIds.assignmentIds, initialData.assignments);\r\n        this.assignmentGroupStore = new AssignmentGroupStore(this, courseId, initialIds.assignmentGroupIds, initialData.assignmentGroups);\r\n        this.reviewStore = new ReviewStore(this, courseId, initialIds.reviewIds, initialData.reviews);\r\n        this.submissionStore = new SubmissionStore(this, courseId, initialIds.submissionIds, initialData.submissions);\r\n    }\r\n\r\n}\r\n","import {Server} from \"./server\";\r\nimport {Course} from \"../models/course\";\r\nimport {User} from \"../models/user\";\r\nimport * as ko from 'knockout';\r\nimport {Watcher, WatcherTemplate} from \"./watcher\";\r\nimport {prettyPrintDateTime} from \"./dates\";\r\n\r\nexport interface CourseListInterfaceJson {\r\n    server: Server;\r\n    courses: Course[];\r\n    user: User;\r\n}\r\n\r\nexport class CourseListInterface {\r\n    server: Server;\r\n    courses: Course[];\r\n    user: User;\r\n\r\n    constructor(params: CourseListInterfaceJson) {\r\n        this.server = params.server;\r\n        this.courses = params.courses;\r\n        this.user = params.user;\r\n        console.log(\"TEST\");\r\n    }\r\n\r\n    getRole(id: number): string {\r\n        let roles = this.user.roles();\r\n        for (let i=0; i<roles.length; i+=1) {\r\n            let role = roles[i];\r\n            if (role.courseId() === id) {\r\n                return role.name();\r\n            }\r\n        }\r\n        return \"No Role\";\r\n    }\r\n}\r\n\r\nexport const COURSE_LIST_HTML = `\r\n<ul class=\"list-unstyled\">\r\n<!-- ko foreach: courses -->\r\n    <li class=\"media mt-2 border-bottom\">\r\n        <a data-bind=\"attr: {href: id}\" class=\"btn btn-primary mr-3\">\r\n            <span class=\"fas fa-eye\"></span> Open\r\n        </a>\r\n        <div class=\"media-body\">\r\n            <div class=\"d-flex w-100 justify-content-between\">\r\n                <h5 class=\"mb-1\" data-bind=\"text: name\"></h5>\r\n                <small class=\"text-muted\" data-bind=\"text: prettyDateCreated\"></small>\r\n            </div>\r\n            <p class=\"mb-1\">\r\n                Role: <span data-bind=\"text: $parent.getRole(id)\" class=\"text-capitalize\"></span><br>\r\n                <p data-bind=\"text: term\"></p>\r\n            </p>\r\n            <small class=\"text-muted\" data-bind=\"if: url\">\r\n                Course URL: <span data-bind=\"text: url\"></span>,\r\n            </small>\r\n            <small class=\"text-muted\" data-bind=\"if: service()!=='native'\">\r\n                LMS: <span data-bind=\"text: service\"></span>,\r\n            </small>\r\n            <small class=\"text-muted\">\r\n                Course ID: <span data-bind=\"text: id\"></span>\r\n            </small>\r\n        </div>\r\n    </li>\r\n<!-- /ko -->\r\n</ul>\r\n`;\r\n\r\nko.components.register(\"course-list\", {\r\n    viewModel: CourseListInterface,\r\n    template: COURSE_LIST_HTML\r\n});\r\n\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(460);\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};"],"sourceRoot":""}